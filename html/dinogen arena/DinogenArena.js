var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// typescript-astar
// http://github.com/tsugehara/typescript-astar
var astar;
(function (astar_1) {
    //================== start graph js
    /*
    graph.js http://github.com/bgrins/javascript-astar
    MIT License

    Creates a Graph class used in the astar search algorithm.
    Includes Binary Heap (with modifications) from Marijn Haverbeke
        URL: http://eloquentjavascript.net/appendix2.html
        License: http://creativecommons.org/licenses/by/3.0/
    */
    var GraphNodeType;
    (function (GraphNodeType) {
        GraphNodeType[GraphNodeType["WALL"] = 0] = "WALL";
        GraphNodeType[GraphNodeType["OPEN"] = 1] = "OPEN";
    })(GraphNodeType = astar_1.GraphNodeType || (astar_1.GraphNodeType = {}));
    var Graph = /** @class */ (function () {
        function Graph(grid) {
            this.elements = grid;
            var nodes = [];
            var row, rowLength, len = grid.length;
            for (var x = 0; x < len; ++x) {
                row = grid[x];
                rowLength = row.length;
                nodes[x] = new Array(rowLength); // optimum array with size
                for (var y = 0; y < rowLength; ++y) {
                    nodes[x][y] = new GraphNode(x, y, row[y]);
                }
            }
            this.nodes = nodes;
        }
        Graph.prototype.toString = function () {
            var graphString = "\n";
            var nodes = this.nodes;
            var rowDebug, row, y, l;
            for (var x = 0, len = nodes.length; x < len;) {
                rowDebug = "";
                row = nodes[x++];
                for (y = 0, l = row.length; y < l;) {
                    rowDebug += row[y++].type + " ";
                }
                graphString = graphString + rowDebug + "\n";
            }
            return graphString;
        };
        return Graph;
    }());
    astar_1.Graph = Graph;
    var GraphNode = /** @class */ (function () {
        function GraphNode(x, y, type) {
            this.data = {};
            this.x = x;
            this.y = y;
            this.pos = { x: x, y: y };
            this.type = type;
        }
        GraphNode.prototype.toString = function () {
            return "[" + this.x + " " + this.y + "]";
        };
        GraphNode.prototype.isWall = function () {
            return this.type == GraphNodeType.WALL;
        };
        return GraphNode;
    }());
    astar_1.GraphNode = GraphNode;
    var BinaryHeap = /** @class */ (function () {
        function BinaryHeap(scoreFunction) {
            this.content = [];
            this.scoreFunction = scoreFunction;
        }
        BinaryHeap.prototype.push = function (node) {
            // Add the new node to the end of the array.
            this.content.push(node);
            // Allow it to sink down.
            this.sinkDown(this.content.length - 1);
        };
        BinaryHeap.prototype.pop = function () {
            // Store the first node so we can return it later.
            var result = this.content[0];
            // Get the node at the end of the array.
            var end = this.content.pop();
            // If there are any elements left, put the end node at the
            // start, and let it bubble up.
            if (this.content.length > 0) {
                this.content[0] = end;
                this.bubbleUp(0);
            }
            return result;
        };
        BinaryHeap.prototype.remove = function (node) {
            var i = this.content.indexOf(node);
            // When it is found, the process seen in 'pop' is repeated
            // to fill up the hole.
            var end = this.content.pop();
            if (i !== this.content.length - 1) {
                this.content[i] = end;
                if (this.scoreFunction(end) < this.scoreFunction(node))
                    this.sinkDown(i);
                else
                    this.bubbleUp(i);
            }
        };
        BinaryHeap.prototype.size = function () {
            return this.content.length;
        };
        BinaryHeap.prototype.rescoreElement = function (node) {
            this.sinkDown(this.content.indexOf(node));
        };
        BinaryHeap.prototype.sinkDown = function (n) {
            // Fetch the element that has to be sunk.
            var element = this.content[n];
            // When at 0, an element can not sink any further.
            while (n > 0) {
                // Compute the parent element's index, and fetch it.
                var parentN = ((n + 1) >> 1) - 1, parent = this.content[parentN];
                // Swap the elements if the parent is greater.
                if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                    this.content[parentN] = element;
                    this.content[n] = parent;
                    // Update 'n' to continue at the new position.
                    n = parentN;
                }
                // Found a parent that is less, no need to sink any further.
                else {
                    break;
                }
            }
        };
        BinaryHeap.prototype.bubbleUp = function (n) {
            // Look up the target element and its score.
            var length = this.content.length, element = this.content[n], elemScore = this.scoreFunction(element);
            while (true) {
                // Compute the indices of the child elements.
                var child2N = (n + 1) << 1, child1N = child2N - 1;
                // This is used to store the new position of the element,
                // if any.
                var swap = null;
                // If the first child exists (is inside the array)...
                if (child1N < length) {
                    // Look it up and compute its score.
                    var child1 = this.content[child1N], child1Score = this.scoreFunction(child1);
                    // If the score is less than our element's, we need to swap.
                    if (child1Score < elemScore)
                        swap = child1N;
                }
                // Do the same checks for the other child.
                if (child2N < length) {
                    var child2 = this.content[child2N], child2Score = this.scoreFunction(child2);
                    if (child2Score < (swap === null ? elemScore : child1Score))
                        swap = child2N;
                }
                // If the element needs to be moved, swap it, and continue.
                if (swap !== null) {
                    this.content[n] = this.content[swap];
                    this.content[swap] = element;
                    n = swap;
                }
                // Otherwise, we are done.
                else {
                    break;
                }
            }
        };
        return BinaryHeap;
    }());
    astar_1.BinaryHeap = BinaryHeap;
    var AStar = /** @class */ (function () {
        function AStar(grid, disablePoints, enableCost) {
            this.grid = [];
            for (var x = 0, xl = grid.length; x < xl; x++) {
                this.grid[x] = [];
                for (var y = 0, yl = grid[x].length; y < yl; y++) {
                    var cost = (typeof grid[x][y] == "number") ? grid[x][y] : grid[x][y].type;
                    if (cost > 1 && !enableCost)
                        cost = 1;
                    this.grid[x][y] = {
                        org: grid[x][y],
                        f: 0,
                        g: 0,
                        h: 0,
                        cost: cost,
                        visited: false,
                        closed: false,
                        pos: {
                            x: x,
                            y: y
                        },
                        parent: null
                    };
                }
            }
            if (disablePoints !== undefined) {
                for (var i = 0; i < disablePoints.length; i++)
                    this.grid[disablePoints[i].x][disablePoints[i].y].cost = 0;
            }
        }
        AStar.prototype.heap = function () {
            return new BinaryHeap(function (node) {
                return node.f;
            });
        };
        AStar.prototype._find = function (org) {
            for (var x = 0; x < this.grid.length; x++)
                for (var y = 0; y < this.grid[x].length; y++)
                    if (this.grid[x][y].org == org)
                        return this.grid[x][y];
        };
        AStar.prototype._search = function (start, end, diagonal, heuristic) {
            heuristic = heuristic || this.manhattan;
            diagonal = !!diagonal;
            var openHeap = this.heap();
            var _start, _end;
            if (start.x !== undefined && start.y !== undefined)
                _start = this.grid[start.x][start.y];
            else
                _start = this._find(start);
            if (end.x !== undefined && end.y !== undefined)
                _end = this.grid[end.x][end.y];
            else
                _end = this._find(end);
            if (AStar.NO_CHECK_START_POINT == false && _start.cost <= 0)
                return [];
            openHeap.push(_start);
            while (openHeap.size() > 0) {
                // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
                var currentNode = openHeap.pop();
                // End case -- result has been found, return the traced path.
                if (currentNode === _end) {
                    var curr = currentNode;
                    var ret = [];
                    while (curr.parent) {
                        ret.push(curr);
                        curr = curr.parent;
                    }
                    return ret.reverse();
                }
                // Normal case -- move currentNode from open to closed, process each of its neighbors.
                currentNode.closed = true;
                // Find all neighbors for the current node. Optionally find diagonal neighbors as well (false by default).
                var neighbors = this.neighbors(currentNode, diagonal);
                for (var i = 0, il = neighbors.length; i < il; i++) {
                    var neighbor = neighbors[i];
                    if (neighbor.closed || neighbor.cost <= 0) {
                        // Not a valid node to process, skip to next neighbor.
                        continue;
                    }
                    // The g score is the shortest distance from start to current node.
                    // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.
                    var gScore = currentNode.g + neighbor.cost;
                    var beenVisited = neighbor.visited;
                    if (!beenVisited || gScore < neighbor.g) {
                        // Found an optimal (so far) path to this node.  Take score for node to see how good it is.
                        neighbor.visited = true;
                        neighbor.parent = currentNode;
                        neighbor.h = neighbor.h || heuristic(neighbor.pos, _end.pos);
                        neighbor.g = gScore;
                        neighbor.f = neighbor.g + neighbor.h;
                        if (!beenVisited) {
                            // Pushing to heap will put it in proper place based on the 'f' value.
                            openHeap.push(neighbor);
                        }
                        else {
                            // Already seen the node, but since it has been rescored we need to reorder it in the heap
                            openHeap.rescoreElement(neighbor);
                        }
                    }
                }
            }
            // No result was found - empty array signifies failure to find path.
            return [];
        };
        AStar.search = function (grid, start, end, disablePoints, diagonal, heuristic) {
            var astar = new AStar(grid, disablePoints);
            return astar._search(start, end, diagonal, heuristic);
        };
        AStar.prototype.manhattan = function (pos0, pos1) {
            // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return d1 + d2;
        };
        AStar.prototype.neighbors = function (node, diagonals) {
            var grid = this.grid;
            var ret = [];
            var x = node.pos.x;
            var y = node.pos.y;
            // West
            if (grid[x - 1] && grid[x - 1][y]) {
                ret.push(grid[x - 1][y]);
            }
            // East
            if (grid[x + 1] && grid[x + 1][y]) {
                ret.push(grid[x + 1][y]);
            }
            // South
            if (grid[x] && grid[x][y - 1]) {
                ret.push(grid[x][y - 1]);
            }
            // North
            if (grid[x] && grid[x][y + 1]) {
                ret.push(grid[x][y + 1]);
            }
            if (diagonals) {
                // Southwest
                if (grid[x - 1] && grid[x - 1][y - 1]) {
                    ret.push(grid[x - 1][y - 1]);
                }
                // Southeast
                if (grid[x + 1] && grid[x + 1][y - 1]) {
                    ret.push(grid[x + 1][y - 1]);
                }
                // Northwest
                if (grid[x - 1] && grid[x - 1][y + 1]) {
                    ret.push(grid[x - 1][y + 1]);
                }
                // Northeast
                if (grid[x + 1] && grid[x + 1][y + 1]) {
                    ret.push(grid[x + 1][y + 1]);
                }
            }
            return ret;
        };
        AStar.NO_CHECK_START_POINT = false;
        return AStar;
    }());
    astar_1.AStar = AStar;
})(astar || (astar = {}));
var DinogenArena;
(function (DinogenArena) {
    var BootState = /** @class */ (function (_super) {
        __extends(BootState, _super);
        function BootState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BootState.prototype.init = function () {
            this.input.maxPointers = 1;
            //this.game.stage.disableVisibilityChange = true;
            this.game.renderer.renderSession.roundPixels = true;
            //this.game.antialias = false;
            this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
            if (this.game.device.desktop) {
                this.scale.pageAlignHorizontally = true;
                this.scale.pageAlignVertically = true;
            }
            else {
                this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.scale.forceLandscape = true;
                this.scale.pageAlignHorizontally = true;
                this.scale.pageAlignVertically = true;
            }
            this.fontsText = this.game.add.text(this.game.width * 0.5, this.game.height * 0.5, "Loading fonts...", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            this.fontsText.alpha = 0.5;
            this.fontsText.anchor.set(0.5, 0.5);
        };
        BootState.prototype.preload = function () {
            this.game.load.image("preload_bg", "assets/images/bg/preload_bg.jpg");
            this.game.load.audio("ui_button_over", "assets/sounds/ui/ui_button_over.mp3");
            this.game.load.audio("ui_button_click", "assets/sounds/ui/ui_button_click.mp3");
        };
        BootState.prototype.create = function () {
            /* Disable default actions */
            this.game.canvas.oncontextmenu = function (e) { e.preventDefault(); };
            try {
                window.addEventListener("keydown", function (e) {
                    if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
                        e.preventDefault();
                    }
                }, false);
            }
            catch (e) {
                console.error(e);
            }
            /* ------ */
            this.game.physics.startSystem(Phaser.Physics.BOX2D);
            //this.game.time.advancedTiming = true;
            //this.game.physics.box2d.useElapsedTime = true;
            this.game.physics.box2d.velocityIterations = 1;
            this.game.physics.box2d.positionIterations = 1;
            this.game.state.start("PreloaderState");
        };
        return BootState;
    }(Phaser.State));
    DinogenArena.BootState = BootState;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var Engine = /** @class */ (function (_super) {
        __extends(Engine, _super);
        function Engine() {
            var _this = _super.call(this, 920, 720, Phaser.WEBGL, "content", null) || this;
            _this.ads = null;
            _this.ag = null;
            _this.ngio = null;
            _this.kong = null;
            _this.kongregateAPI = null;
            _this.desiredAPI = null;
            _this.faderTweenSpeed = 350;
            _this.bInit = false;
            _this.state.add("BootState", DinogenArena.BootState, true);
            _this.state.add("PreloaderState", DinogenArena.PreloaderState, false);
            _this.state.add("SponsorState", DinogenArena.SponsorState, false);
            _this.state.add("IntroState", DinogenArena.IntroState, false);
            _this.state.add("MainMenuState", DinogenArena.MainMenuState, false);
            _this.state.add("GameState", DinogenArena.GameState, false);
            _this.state.start("BootState");
            return _this;
        }
        Engine.prototype.initialize = function () {
            DinogenArena.GameUtil.game = this;
            DinogenArena.Achievements.Initialize();
            DinogenArena.InventoryManager.Initialize();
            DinogenArena.GameModeManager.Initialize();
            DinogenArena.PlayerManager.Initialize();
            DinogenArena.DinosaurManager.Initialize();
            DinogenArena.PerkManager.Initialize();
            this.uiLayer = this.add.group(null, null, true);
            this.uiLayer.name = "uiLayer";
            this.uiItems = [];
            this.faderLayer = this.add.group(null, null, true);
            this.faderLayer.name = "faderLayer";
            this.createFader();
            this.fader.alpha = 0;
            this.pendingAchievements = [];
            this.achievementLayer = this.add.group(null, null, true);
            this.achievementLayer.name = "achievementLayer";
            this.input.mouse.mouseWheelCallback = this.onMouseWheel;
            this.initAPI();
            this.initAds();
            this.bInit = true;
        };
        Engine.prototype.initAPI = function () {
            console.log("INIT API -------------------");
            console.log("Desired API: " + this.desiredAPI);
            if (this.desiredAPI == "armor_games") {
                if (this.ag) {
                    DinogenArena.APIUtil.CurrentAPI = DinogenArena.APIUtil.API_ARMOR_GAMES;
                }
            }
            else if (this.desiredAPI == "newgrounds") {
                if (this.ngio) {
                    DinogenArena.APIUtil.CurrentAPI = DinogenArena.APIUtil.API_NEWGROUNDS;
                }
            }
            else if (this.desiredAPI == "kongregate") {
                if (this.kong) {
                    DinogenArena.APIUtil.CurrentAPI = DinogenArena.APIUtil.API_KONGREGATE;
                }
            }
            else {
                console.warn("Could not establish valid API!");
            }
            console.log("APIUtil.CurrentAPI: " + DinogenArena.APIUtil.CurrentAPI);
        };
        Engine.prototype.initAds = function () {
            var ads = DinogenArena.GameUtil.game.ads;
            if (!ads) {
                console.log("No ads instance");
            }
        };
        Engine.prototype.onEvent = function (_name) {
            console.log("Engine::onEvent " + _name);
            if (_name == "SDK_GAME_START") {
                DinogenArena.AdUtil.OnResumeGame();
            }
            else if (_name == "SDK_GAME_PAUSE") {
                DinogenArena.AdUtil.OnPauseGame();
            }
            else if (_name == "SDK_GDPR_TRACKING") {
                //this event is triggered when your user doesn't want to be tracked
            }
            else if (_name == "SDK_GDPR_TARGETING") {
                //this event is triggered when your user doesn't want personalised targeting of ads and such
            }
        };
        Engine.prototype.onMouseWheel = function (e) {
            if (this.currentScroller) {
                this.currentScroller.scroll(e.deltaY);
            }
        };
        Engine.prototype.setCurrentScroller = function (_item) {
            this.currentScroller = _item;
        };
        Engine.prototype.clearCurrentScroller = function () {
            this.currentScroller = null;
        };
        Engine.prototype.onWilkinButtonClicked = function () {
            DinogenArena.GameUtil.OpenWilkinHomepage();
        };
        Engine.prototype.onGuideButtonClicked = function () {
            DinogenArena.GameUtil.OpenDinogenArenaGuide();
        };
        Engine.prototype.onDinogenButtonClicked = function () {
            DinogenArena.GameUtil.OpenDinogenGame();
        };
        Engine.prototype.createFader = function () {
            if (!this.fader) {
                var graphics = this.add.graphics(0, 0);
                graphics.beginFill(0x000000, 1);
                graphics.drawRect(0, 0, 32, 32);
                this.fader = this.add.image(0, 0, graphics.generateTexture());
                graphics.destroy();
                this.faderLayer.add(this.fader);
                this.fader.width = this.width;
                this.fader.height = this.height;
            }
        };
        Engine.prototype.createGame = function (_data) {
            this.uiLayer.removeAll(true);
            this.state.start("GameState", true, false, _data);
            DinogenArena.GameUtil.ForceStartAudio();
        };
        Engine.prototype.loadMainMenu = function (_menuId) {
            var gameState = DinogenArena.GameUtil.GetGameState();
            if (gameState) {
                gameState.destroyGame();
            }
            this.state.start("MainMenuState", true, false, _menuId);
            DinogenArena.GameUtil.ForceStartAudio();
        };
        Engine.prototype.loadIntro = function () {
            var gameState = DinogenArena.GameUtil.GetGameState();
            if (gameState) {
                gameState.destroyGame();
            }
            this.state.start("IntroState");
        };
        Engine.prototype.loadSponsor = function () {
            var gameState = DinogenArena.GameUtil.GetGameState();
            if (gameState) {
                gameState.destroyGame();
            }
            this.state.start("SponsorState");
        };
        Engine.prototype.restartGame = function () {
            var gameState = DinogenArena.GameUtil.GetGameState();
            var data;
            if (gameState) {
                data = gameState.data;
                gameState.destroyGame();
            }
            this.createGame(data);
        };
        Engine.prototype.changeMap = function (_data) {
            var gameState = DinogenArena.GameUtil.GetGameState();
            if (gameState) {
                gameState.destroyGame();
                this.createGame(_data);
            }
        };
        Engine.prototype.fadeToBlack = function (_callback, _callbackContext, _callbackParams) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_callbackParams === void 0) { _callbackParams = null; }
            this.fader.inputEnabled = true;
            this.fader.alpha = 0;
            this.faderTween = this.add.tween(this.fader).to({ alpha: 1 }, this.faderTweenSpeed, Phaser.Easing.Cubic.Out, true);
            if (_callback != null) {
                //console.log(_callbackParams);
                //this.faderTween.onComplete.add(_callback, _callbackContext, 0, _callbackParams);
                DinogenArena.GameUtil.game.time.events.add(this.faderTweenSpeed, _callback, _callbackContext, _callbackParams);
                //_callback.call(this, _callbackParams);
            }
        };
        Engine.prototype.fadeFromBlack = function () {
            this.fader.inputEnabled = false;
            this.fader.alpha = 1;
            this.faderTween = this.add.tween(this.fader).to({ alpha: 0 }, this.faderTweenSpeed * 2, Phaser.Easing.Cubic.Out, true);
        };
        Engine.prototype.destroyFader = function () {
            if (this.fader != null) {
                this.fader.destroy();
                this.fader = null;
            }
        };
        Engine.prototype.createWindow = function (_data) {
            var window = new DinogenArena.Window(_data);
        };
        Engine.prototype.addUI = function (_item) {
            this.uiLayer.add(_item);
            this.uiItems.push(_item);
            //this.updateUIBlurs();
        };
        Engine.prototype.removeUI = function (_item) {
            this.uiLayer.remove(_item);
            this.uiItems.splice(this.uiItems.indexOf(_item), 1);
            this.updateUIBlurs();
        };
        Engine.prototype.isInGameState = function () {
            return this.state.getCurrentState() instanceof DinogenArena.GameState;
        };
        Engine.prototype.isInMainMenuState = function () {
            return this.state.getCurrentState() instanceof DinogenArena.MainMenuState;
        };
        Engine.prototype.getMainMenuState = function () {
            if (!this.isInMainMenuState()) {
                return null;
            }
            return this.state.getCurrentState();
        };
        Engine.prototype.refreshMainMenu = function () {
            var menuState = this.getMainMenuState();
            if (menuState) {
                if (menuState.mainMenu) {
                    var content = menuState.mainMenu.contentElement;
                    if (content) {
                        menuState.mainMenu.contentElement.refreshSubmenu();
                    }
                }
            }
        };
        Engine.prototype.updateUIBlurs = function () {
            //console.clear();
            //console.log("%c------------- UPDATE BLURS -------------", "background: #66FF66");
            if (this.isInGameState()) {
                //return;
            }
            var topChild;
            for (var i = 0; i < this.uiItems.length; i++) {
                var child = this.uiItems[i];
                var bBlur = true;
                if (i == this.uiItems.length - 1) {
                    topChild = child;
                    bBlur = false;
                }
                if (!bBlur) {
                    //console.warn(child);
                }
                else {
                    //console.log(child);
                }
                //console.log(child instanceof Blurable)
                var bBlurrable = true;
                if (!(child instanceof DinogenArena.Blurable)) {
                    bBlurrable = false;
                }
                else {
                    bBlurrable = child.canBlur();
                }
                if (!bBlurrable) {
                    //console.log("  --> this is not blurrable");
                    bBlur = false;
                }
                this.setBlur(child, bBlur);
            }
            if (topChild) {
                topChild.onGetFocus();
                var curParent = topChild;
                while (curParent) {
                    //console.error(curParent);
                    this.setBlur(curParent, false);
                    curParent = curParent.parent;
                }
            }
            //console.log("%c----------------------------------------\n", "background: #66FF66");
        };
        Engine.prototype.setBlur = function (_item, _bVal) {
            if (_bVal) {
                var blurX = this.add.filter("BlurX");
                var blurY = this.add.filter("BlurY");
                _item.filters = [blurX, blurY];
            }
            else {
                _item.filters = undefined;
            }
        };
        Engine.prototype.setGlow = function (_item, _bVal) {
            if (_bVal) {
                var glow = this.add.filter("Glow");
                _item.filters = [glow];
            }
            else {
                _item.filters = undefined;
            }
        };
        Engine.prototype.pushAchievement = function (_id) {
            this.pendingAchievements.push(_id);
            if (!this.currentBubble) {
                this.showNextAchievement();
            }
        };
        Engine.prototype.showNextAchievement = function () {
            if (this.pendingAchievements.length > 0) {
                this.currentBubble = new DinogenArena.AchievementBubble(this.pendingAchievements[0]);
                var padding = 10;
                this.currentBubble.x = this.width - this.currentBubble.width - padding;
                this.currentBubble.y = padding;
                this.achievementLayer.add(this.currentBubble);
            }
        };
        Engine.prototype.destroyAchievement = function () {
            this.pendingAchievements.splice(0, 1);
            this.currentBubble.destroy();
            this.currentBubble = null;
            this.showNextAchievement();
        };
        Engine.prototype.showMouse = function (_bVal) {
            var element = document.getElementById("content");
            if (element) {
                element.style.cursor = _bVal ? "default" : "none";
            }
        };
        Engine.prototype.mouseIsVisible = function () {
            var element = document.getElementById("content");
            if (element) {
                return element.style.cursor == "default";
            }
            return false;
        };
        Engine.prototype.pauseGame = function () {
            console.log("Engine::pauseGame");
        };
        Engine.prototype.resumeGame = function () {
            console.log("Engine::resumeGame");
        };
        Engine.InitProfileData = function () {
            var profiles = [
                null,
                null,
                null
            ];
            localStorage.setItem("profiles", JSON.stringify(profiles));
            Engine.LoadProfileData();
        };
        Engine.ClearProfileData = function () {
            localStorage.clear();
        };
        Engine.SaveProfileData = function () {
            console.log("Saving profile data...");
            localStorage.setItem("profiles", JSON.stringify(DinogenArena.PlayerManager.profiles));
            //APIUtil.SaveProfileData();
        };
        Engine.LoadProfileData = function () {
            var str = localStorage.getItem("profiles");
            return JSON.parse(str);
        };
        return Engine;
    }(Phaser.Game));
    DinogenArena.Engine = Engine;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var GameState = /** @class */ (function (_super) {
        __extends(GameState, _super);
        function GameState() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.targetX = 0;
            _this.targetY = 0;
            _this.bGamePaused = false;
            _this.bPendingDestroy = false;
            _this.cameraMouseLookRatio = 0.1;
            _this.cameraMouseLookRatio2 = _this.cameraMouseLookRatio * 0.5;
            _this.cameraMouseLookRatioMultiplier = 1;
            return _this;
        }
        GameState.prototype.init = function (_data) {
            _super.prototype.init.call(this, _data);
            this.bPendingDestroy = false;
            this.bGamePaused = false;
            this.engine = this.game;
            this.controllers = [];
            this.pawns = [];
            this.actors = [];
            this.interactables = [];
            this.objects = [];
            this.shells = [];
            this.objectsToDestroy = [];
            this.muzzleFlashes = [];
            this.explosions = [];
            this.smokes = [];
            this.bodies = [];
            this.decals = [];
            this.queue = [];
            this.worldFilters = {
                blur: { bEnabled: false },
                gray: { bEnabled: false }
            };
            this.targetX = 0;
            this.targetY = 0;
            this.layerWorld = this.game.add.group();
            this.layerWorld_0 = this.game.add.group(null, "layerWorld_0");
            this.layerWorld.add(this.layerWorld_0);
            this.layerWorld_1 = this.game.add.group(null, "layerWorld_1");
            this.layerWorld.add(this.layerWorld_1);
            this.layerWorld_2 = this.game.add.group(null, "layerWorld_2");
            this.layerWorld.add(this.layerWorld_2);
            this.layerWorld_3 = this.game.add.group(null, "layerWorld_3");
            this.layerWorld.add(this.layerWorld_3);
            this.layerWorld_4 = this.game.add.group(null, "layerWorld_4");
            this.layerWorld.add(this.layerWorld_4);
            this.layerWorldColourFilter = this.game.add.group(null, "layerWorldFilter");
            this.layerWorldColourFilter.fixedToCamera = true;
            this.layerWorld.add(this.layerWorldColourFilter);
            this.setWorldColourFilter(0, 0);
            this.layerSponsor = this.game.add.group();
            this.layerUI = this.game.add.group();
            this.layerPauseMenu = new DinogenArena.Blurable(); //this.game.add.group();
            this.layerPauseMenu.show();
            this.layerPauseMenu.name = "layerPauseMenu";
            this.engine.uiLayer.add(this.layerUI);
            this.engine.uiLayer.add(this.layerPauseMenu);
            this.engine.uiLayer.add(this.layerSponsor);
            this.data = _data;
            var box = this.game.physics.box2d;
            box.onBodyRemoved.add(this.onBodyRemoved, this);
            if (DinogenArena.APIUtil.CurrentAPI == DinogenArena.APIUtil.API_ARMOR_GAMES) {
                var padding = 10;
                var sponsorLogo = new DinogenArena.ImageButton(DinogenArena.APIUtil.OpenCurrentAPIHomepage, DinogenArena.APIUtil, null, "sponsor_armor_games_small", null);
                sponsorLogo.x = this.game.width - sponsorLogo.width - padding;
                sponsorLogo.y = this.game.height - sponsorLogo.height - padding;
                this.layerSponsor.add(sponsorLogo);
            }
        };
        GameState.prototype.onBodyRemoved = function (_body) {
            _body.removeNextStep = true;
        };
        GameState.prototype.create = function () {
            this.game.physics.box2d.setBoundsToWorld();
            this.game.physics.box2d.debugDraw.shapes = true;
            this.game.physics.box2d.debugDraw.joints = true;
            this.loadLevel(this.data);
            var pauseKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC);
            pauseKey.onDown.add(this.onPauseKeyPressed, this);
            this.engine.fadeFromBlack();
            if (!DinogenArena.SoundManager.WantsMute()) {
                DinogenArena.SoundManager.SetMute(false);
            }
        };
        GameState.prototype.update = function () {
            if (this.bGamePaused || this.bPendingDestroy) {
                return;
            }
            while (this.muzzleFlashes.length > 0) {
                this.muzzleFlashes[0].destroy();
                this.muzzleFlashes.splice(0, 1);
            }
            var i;
            for (i = 0; i < this.controllers.length; i++) {
                this.controllers[i].tick();
            }
            if (this.gameMode) {
                this.gameMode.tick();
            }
            this.updateCamera();
            if (this.bodies.length > 400) {
                for (i = 0; i < this.pawns.length; i++) {
                    var pawn = this.pawns[i];
                    if (!pawn.isAlive()) {
                        pawn.triggerDestroy();
                    }
                }
            }
            for (i = this.queue.length - 1; i >= 0; i--) {
                if (this.queue[i] instanceof box2d.b2Joint) {
                    this.game.physics.box2d.world.DestroyJoint(this.queue[i]);
                }
                else if (this.queue[i] instanceof Phaser.Physics.Box2D.Body) {
                    var bod = this.queue[i];
                    this.removeBody(bod);
                }
                else if (this.queue[i][0] instanceof DinogenArena.WorldObject) {
                    this.onCollide(this.queue[i][0], this.queue[i][1]);
                }
                this.queue.splice(i, 1);
            }
            for (i = 0; i < this.objectsToDestroy.length; i++) {
                var cur = this.objectsToDestroy[i];
                if (cur instanceof DinogenArena.Pawn) {
                    this.pawns.splice(this.pawns.indexOf(cur), 1);
                    if (cur instanceof DinogenArena.Helicopter) {
                        if (this.playerController) {
                            this.playerController.getHUD().allies.removeHelicopter();
                        }
                    }
                }
                else if (cur instanceof DinogenArena.Interactable) {
                    this.interactables.splice(this.interactables.indexOf(cur), 1);
                }
                var indexObjects = this.objects.indexOf(cur);
                if (indexObjects >= 0) {
                    this.objects.splice(indexObjects, 1);
                }
                else {
                    console.error(cur);
                }
                cur.destroy();
            }
            this.objectsToDestroy = [];
            if (DinogenArena.GameUtil.IsDebugging()) {
                this.game.debug.text(this.bodies.length + " bodies / " + this.objects.length + " objects", 12, this.game.height - 32, "#00FF00");
            }
            _super.prototype.update.call(this, this.game);
        };
        /*
        render()
        {
            //this.game.debug.box2dWorld();
            this.game.time.physicsElapsed = 1 / this.game.time.fps;
        }
        */
        GameState.FilterRaycastHit = function (body, fixture, point, normal) {
            var filterData = fixture.GetFilterData();
            if (filterData.categoryBits == GameState.CATEGORY_WALLS) {
                return true;
            }
            return false;
        };
        GameState.prototype.line = function (x1, y1, x2, y2) {
            this.game.debug.context.beginPath();
            this.game.debug.context.moveTo(x1, y1);
            this.game.debug.context.lineTo(x2, y2);
            this.game.debug.context.stroke();
        };
        GameState.prototype.setCameraTarget = function (_target) {
            this.cameraTarget = _target;
        };
        GameState.prototype.setPlayerAsCameraTarget = function () {
            if (this.player) {
                this.setCameraTarget(this.player);
            }
        };
        GameState.prototype.hasCinematic = function () {
            return this.cinematic != null;
        };
        GameState.prototype.onCinematicStart = function () {
            this.engine.showMouse(true);
        };
        GameState.prototype.onCinematicEnd = function () {
            this.setPlayerAsCameraTarget();
            this.engine.showMouse(false);
        };
        GameState.prototype.getPlayerTeam = function () {
            if (this.player) {
                return this.player.getTeam();
            }
            return 0;
        };
        GameState.prototype.addAllyKilledIcon = function (_x, _y) {
            var icon = this.game.add.image(_x, _y, "atlas_ui", "icon_ally_killed");
            icon.anchor.set(0.5, 1);
            this.addToWorld(icon, GameState.INDEX_TOP);
            var timer = this.game.time.create();
            timer.add(5000, icon.destroy, icon);
            timer.start();
        };
        GameState.prototype.addBody = function (_body) {
            this.bodies.push(_body);
        };
        GameState.prototype.removeBody = function (_body) {
            _body.setCategoryContactCallback(GameState.CATEGORY_OBJECTS, undefined, undefined);
            _body.setCategoryContactCallback(GameState.CATEGORY_WALLS, undefined, undefined);
            _body.data.SetUserData(null);
            _body.destroy();
            this.bodies.splice(this.bodies.indexOf(_body), 1);
        };
        GameState.prototype.destroyController = function (_controller) {
            if (_controller) {
                this.controllers.splice(this.controllers.indexOf(_controller), 1);
                _controller.destroy();
            }
        };
        GameState.prototype.flagObjectForDestruction = function (_obj) {
            var index = this.objects.indexOf(_obj);
            if (index >= 0) {
                if (!this.objects[index].isPendingDestroy()) {
                    this.objects[index].setPendingDestroy();
                    this.objectsToDestroy.push(this.objects[index]);
                }
            }
        };
        GameState.prototype.destroyJoint = function (_joint) {
            if (!this.queue || !_joint) {
                return;
            }
            this.queue.push(_joint);
        };
        GameState.prototype.destroyBody = function (_body) {
            if (!this.queue || !_body) {
                return;
            }
            this.queue.push(_body);
        };
        GameState.prototype.addCollisionToQueue = function (_objA, _objB) {
            if (!this.queue) {
                return;
            }
            this.queue.push([_objA, _objB]);
        };
        GameState.prototype.onCollide = function (_objA, _objB) {
            if (_objA) {
                if (!_objA.isPendingDestroy()) {
                    _objA.onHit(_objB);
                }
            }
            if (_objB) {
                if (!_objB.isPendingDestroy()) {
                    _objB.onHit(_objA);
                }
            }
        };
        GameState.prototype.loadLevel = function (_data) {
            this.buildMap(_data["map"]);
            if (this.map) {
                this.world.setBounds(0, 0, this.map.width, this.map.height);
            }
            else {
                DinogenArena.GameUtil.Alert("Invalid map data!");
                this.world.setBounds(0, 0, 1000, 1000);
            }
            this.camera.x = this.world.width * 0.5;
            this.camera.y = this.world.height * 0.5;
            var gameModeId = _data["gameMode"];
            if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_SURVIVAL) {
                this.gameMode = new DinogenArena.GameMode_Survival();
            }
            if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_CAMPAIGN) {
                this.gameMode = new DinogenArena.GameMode_Campaign();
            }
            else if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_TEAM_DEATHMATCH) {
                this.gameMode = new DinogenArena.GameMode_TeamDeathmatch();
            }
            else if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_DEATHMATCH) {
                this.gameMode = new DinogenArena.GameMode_Deathmatch();
            }
            else if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_CAPTURE_THE_FLAG) {
                this.gameMode = new DinogenArena.GameMode_CaptureTheFlag();
            }
            else if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_HUMANS_VS_DINOSAURS) {
                this.gameMode = new DinogenArena.GameMode_HumansVsDinosaurs();
            }
            else if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_EVOLUTION) {
                this.gameMode = new DinogenArena.GameMode_Evolution();
            }
            else if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_DINO_HUNT) {
                this.gameMode = new DinogenArena.GameMode_DinoHunt();
            }
            else if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_KING_OF_THE_HILL) {
                this.gameMode = new DinogenArena.GameMode_KingOfTheHill();
            }
            else if (gameModeId == DinogenArena.GameModeManager.GAME_MODE_REX) {
                this.gameMode = new DinogenArena.GameMode_Rex();
            }
            if (this.gameMode) {
                this.createPlayerController();
                this.gameMode.setFromData(_data);
                this.gameMode.setMatchIsWaitingToStart();
            }
            //SoundManager.PlayMusic("music_game_1");
            DinogenArena.SoundManager.StopMusic();
            if (this.gameMode.isSurvival()) {
                DinogenArena.SoundManager.PlayMusic("music_survival");
            }
            else {
                DinogenArena.SoundManager.PlayNextGameSong();
            }
            DinogenArena.SoundManager.PlayAmbience("amb_default");
            this.bPendingDestroy = false;
        };
        GameState.prototype.addToWorld = function (_child, _index) {
            if (_index === void 0) { _index = GameState.INDEX_DEFAULT; }
            if (_index == GameState.INDEX_DECALS) {
                this.layerWorld_0.add(_child);
            }
            else if (_index == GameState.INDEX_BOTTOM) {
                this.layerWorld_1.add(_child);
            }
            else if (_index == GameState.INDEX_DEFAULT) {
                this.layerWorld_2.add(_child);
            }
            else if (_index == GameState.INDEX_TOP) {
                this.layerWorld_3.add(_child);
            }
            else if (_index == GameState.INDEX_AIR) {
                this.layerWorld_4.add(_child);
            }
            else {
                DinogenArena.GameUtil.Alert("Unknown addToWorld " + _child);
            }
        };
        GameState.prototype.setWorldColourFilter = function (_val, _alpha) {
            this.layerWorldColourFilter.removeChildren();
            if (_alpha > 0) {
                var filter = this.game.add.graphics();
                filter.beginFill(_val, _alpha);
                filter.drawRect(0, 0, this.game.width, this.game.height);
                this.layerWorldColourFilter.add(filter);
            }
            var overlay = this.game.add.image(0, 0, "world_overlay");
            this.layerWorldColourFilter.add(overlay);
            if (DinogenArena.GameUtil.IsDebugging()) {
                console.log("setWorldColourFilter " + _val + " " + _alpha);
            }
        };
        GameState.prototype.buildMap = function (_id) {
            this.map = this.game.add.image(0, 0, _id);
            this.addToWorld(this.map, 0);
            this.mapData = this.game.cache.getJSON(_id + "_data");
            var body = null;
            var vertices = null;
            if (this.mapData) {
                var bCreatePolygon = true;
                var edges = this.mapData["edges"];
                for (var i = 0; i < edges.length; i++) {
                    if (edges) {
                        //break;
                    }
                    var cur = edges[i];
                    var commands = cur["commands"];
                    if (commands) {
                        var data = cur["data"];
                        var drawer = new Phaser.Point();
                        for (var j = 0; j < commands.length; j++) {
                            var curX = data[j * 2];
                            var curY = data[(j * 2) + 1];
                            var command = commands[j];
                            if (command == 1) {
                                //NEW SHAPE START
                                drawer.x = curX;
                                drawer.y = curY;
                                if (bCreatePolygon) {
                                    if (vertices && body) {
                                        body.setPolygon(vertices);
                                        body.setCollisionCategory(GameState.CATEGORY_WALLS);
                                    }
                                    body = new Phaser.Physics.Box2D.Body(this.game, null, 0, 0, 0);
                                    body.static = true;
                                    body.dynamic = false;
                                    vertices = [];
                                }
                                else {
                                    var edge = new Phaser.Physics.Box2D.Body(this.game, null, 0, 0, 0);
                                }
                            }
                            else if (command == 2) {
                                //SHAPE VERTEX
                                if (bCreatePolygon) {
                                    vertices.push(curX);
                                    vertices.push(curY);
                                }
                                else {
                                    edge.addEdge(drawer.x, drawer.y, curX, curY);
                                    edge.setCollisionCategory(GameState.CATEGORY_WALLS);
                                }
                                drawer.x = curX;
                                drawer.y = curY;
                            }
                        }
                    }
                }
                var ai = this.mapData["ai"];
                if (ai) {
                    var threshold = ai["threshold"];
                    var nodes = ai["nodes"];
                    var gfx = this.game.add.graphics();
                    gfx.name = "gfx";
                    gfx.visible = false;
                    this.layerWorld.add(gfx);
                    for (var i = 0; i < ai["dimensions"].x; i++) {
                        for (var j = 0; j < ai["dimensions"].y; j++) {
                            var val = nodes[i][j];
                            var desiredX = i * threshold;
                            var desiredY = j * threshold;
                            if (val > 0 && gfx.visible) {
                                gfx.beginFill(val == 0 ? 0xFF0000 : 0x00FF00, 1);
                                gfx.drawRect(desiredX - 1, desiredY - 1, 2, 2);
                                gfx.endFill();
                            }
                        }
                    }
                }
            }
        };
        GameState.prototype.getPath = function (_startX, _startY, _endX, _endY) {
            var path = [];
            var ai = this.mapData["ai"];
            if (ai) {
                var threshold = ai["threshold"];
                var nodes = ai["nodes"];
                var result;
                if (nodes.length > 0) {
                    var start = this.getNearestValidNode(nodes, { x: Math.round(_startX / threshold), y: Math.round(_startY / threshold) });
                    var end = this.getNearestValidNode(nodes, { x: Math.round(_endX / threshold), y: Math.round(_endY / threshold) });
                    try {
                        result = astar.AStar.search(nodes, start, end, undefined, true);
                    }
                    catch (e) {
                        console.warn("AStar path failed!");
                        result = null;
                    }
                    if (result) {
                        for (var i = 0; i < result.length; i++) {
                            var cur = result[i];
                            path.push({ x: cur.pos.x * threshold, y: cur.pos.y * threshold });
                        }
                    }
                }
            }
            path.push({ x: _endX, y: _endY });
            return path;
        };
        GameState.prototype.getNearestValidNode = function (_nodes, _pos) {
            try {
                if (_nodes[_pos.x][_pos.y] == 0) {
                    var nodesToTry = [
                        { x: _pos.x, y: _pos.y + 1 },
                        { x: _pos.x, y: _pos.y - 1 },
                        { x: _pos.x + 1, y: _pos.y },
                        { x: _pos.x + 1, y: _pos.y + 1 },
                        { x: _pos.x - 1, y: _pos.y },
                        { x: _pos.x - 1, y: _pos.y - 1 },
                        { x: _pos.x + 1, y: _pos.y - 1 },
                        { x: _pos.x - 1, y: _pos.y + 1 }
                    ];
                    for (var i = 0; i < nodesToTry.length; i++) {
                        var cur = nodesToTry[i];
                        if (_nodes[cur.x][cur.y] != 0) {
                            _pos.x = cur.x;
                            _pos.y = cur.y;
                            break;
                        }
                    }
                    //console.warn("Invalid node, fix this");
                }
            }
            catch (e) {
                console.warn(e);
            }
            return _pos;
        };
        GameState.prototype.setWorldBlur = function (_bVal) {
            console.log("setWorldBlur " + _bVal);
            this.worldFilters["blur"]["bEnabled"] = _bVal;
            this.updateWorldFilters();
        };
        GameState.prototype.setWorldGray = function (_bVal) {
            console.log("setWorldGray " + _bVal);
            this.worldFilters["gray"]["bEnabled"] = _bVal;
            this.updateWorldFilters();
        };
        GameState.prototype.updateWorldFilters = function () {
            var filters = [];
            var bEnableFilters = DinogenArena.PlayerManager.CurrentProfile.settings.bEffects;
            if (bEnableFilters) {
                if (this.worldFilters["blur"]["bEnabled"] == true) {
                    var blurX = this.add.filter("BlurX");
                    var blurY = this.add.filter("BlurY");
                    filters.push(blurX);
                    filters.push(blurY);
                }
                if (this.worldFilters["gray"]["bEnabled"] == true) {
                    var gray = this.add.filter("Gray");
                    gray.gray = 0.9;
                    filters.push(gray);
                }
            }
            if (filters.length == 0) {
                this.layerWorld.filters = undefined;
            }
            else {
                this.layerWorld.filters = filters;
            }
        };
        GameState.prototype.setCameraMouseLookRatioMultiplier = function (_val) {
            this.cameraMouseLookRatioMultiplier = _val;
            this.cameraMouseLookRatio = 0.25 * this.cameraMouseLookRatioMultiplier;
            this.cameraMouseLookRatio2 = this.cameraMouseLookRatio * 0.5;
        };
        GameState.prototype.getDeadPawnMask = function () {
            if (this.gameMode.isSurvival()) {
                return 0;
            }
            return GameState.MASK_DEAD;
        };
        GameState.prototype.updateCamera = function () {
            if (this.cameraTarget) {
                this.targetX = this.cameraTarget.x - (this.game.scale.width * 0.5);
                this.targetY = this.cameraTarget.y - (this.game.scale.height * 0.5);
                if (this.cameraTarget == this.player) {
                    if (!this.gameMode.matchHasEnded()) {
                        if (this.player && this.player.isAlive() && this.playerController.canInput()) {
                            this.targetX -= -(this.game.input.x * this.cameraMouseLookRatio) + (this.game.scale.width * this.cameraMouseLookRatio2);
                            this.targetY -= -(this.game.input.y * this.cameraMouseLookRatio) + (this.game.scale.height * this.cameraMouseLookRatio2);
                        }
                    }
                }
                this.game.camera.x -= (this.game.camera.x - this.targetX) * GameState.CAMERA_SPEED;
                this.game.camera.y -= (this.game.camera.y - this.targetY) * GameState.CAMERA_SPEED;
            }
        };
        GameState.prototype.checkMeleeAttack = function (_pawn, _damage) {
            var count = 0;
            for (var i = 0; i < this.pawns.length; i++) {
                var pawn = this.pawns[i];
                if (pawn.isAlive() && pawn.getTeam() != _pawn.getTeam() && pawn != _pawn) {
                    if (this.checkOverlap(_pawn.hitSprite, pawn.hitSprite)) {
                        DinogenArena.SoundManager.PlayWorldSound("wpn_melee_hit", pawn.x, pawn.y);
                        pawn.takeDamage(_damage, _pawn.getController(), _pawn, DinogenArena.DamageType.DAMAGE_TYPE_MELEE);
                        this.createImpactEffect(pawn.x, pawn.y, pawn.rotation, DinogenArena.ImpactEffect.TYPE_BLOOD);
                        count++;
                    }
                }
                if (count >= 3) {
                    break;
                }
            }
            if (this.gameMode.isCampaign()) {
                for (var i = 0; i < this.actors.length; i++) {
                    var actor = this.actors[i];
                    if (this.checkOverlap(_pawn.hitSprite, actor.hitSprite)) {
                        DinogenArena.SoundManager.PlayWorldSound("wpn_melee_hit", actor.x, actor.y);
                        actor.takeDamage(_damage, _pawn.getController(), _pawn, DinogenArena.DamageType.DAMAGE_TYPE_MELEE);
                        var distX = actor.x - _pawn.x;
                        var distY = actor.y - _pawn.y;
                        var rad = Math.atan2(distY, distX);
                        var force = _damage;
                        var vx = Math.cos(rad) * _damage;
                        var vy = Math.sin(rad) * _damage;
                        DinogenArena.GameUtil.ApplyForce(actor.primaryBody, vx, vy);
                        this.createImpactEffect(actor.x, actor.y, actor.rotation, DinogenArena.ImpactEffect.TYPE_GENERIC);
                    }
                }
            }
        };
        GameState.prototype.checkOverlap = function (_a, _b) {
            var boundsA = _a.getBounds();
            var boundsB = _b.getBounds();
            return Phaser.Rectangle.intersects(boundsA, boundsB);
        };
        GameState.prototype.getLivingBotsForTeam = function (_team) {
            var arr = [];
            for (var i = 0; i < this.pawns.length; i++) {
                var pawn = this.pawns[i];
                if (!pawn.isPlayer() && pawn.isAlive() && pawn.getTeam() == _team) {
                    arr.push(pawn);
                }
            }
            return arr;
        };
        GameState.prototype.getNumLivingPawnsForTeam = function (_team) {
            var count = 0;
            for (var i = 0; i < this.pawns.length; i++) {
                var pawn = this.pawns[i];
                if (pawn.isAlive() && pawn.getTeam() == _team) {
                    count++;
                }
            }
            return count;
        };
        GameState.prototype.getNumCharactersForTeam = function (_team) {
            var count = 0;
            for (var i = 0; i < this.pawns.length; i++) {
                var pawn = this.pawns[i];
                if (pawn.isAlive() && pawn.getTeam() == _team && pawn instanceof DinogenArena.Character) {
                    count++;
                }
            }
            return count;
        };
        GameState.prototype.getNumHelicopters = function () {
            var count = 0;
            for (var i = 0; i < this.pawns.length; i++) {
                var pawn = this.pawns[i];
                if (pawn.isAlive() && pawn instanceof DinogenArena.Helicopter) {
                    count++;
                }
            }
            return count;
        };
        GameState.prototype.isOnScreen = function (_x, _y) {
            var padding = 0;
            var camX = _x - this.game.camera.x;
            var camY = _y - this.game.camera.y;
            if (camX < (padding) || camX > (this.game.width - padding)) {
                return false;
            }
            if (camY < (padding) || camY > (this.game.height - padding)) {
                return false;
            }
            return true;
        };
        GameState.prototype.onExplosionComplete = function () {
            this.explosions[0].destroy();
            this.explosions.splice(0, 1);
        };
        GameState.prototype.destroySmoke = function (_smoke) {
            var index = this.smokes.indexOf(_smoke);
            this.smokes[index].destroy();
            this.smokes.splice(index, 1);
        };
        GameState.prototype.createFootprint = function (_x, _y, _rotation, _alpha, _type) {
            var footprint = this.game.add.image(_x, _y, "atlas_objects", _type);
            footprint.anchor.set(0.5, 0.5);
            footprint.rotation = _rotation;
            footprint.alpha = _alpha;
            this.addToWorld(footprint, GameState.INDEX_BOTTOM);
            this.pushToDecals(footprint);
            return footprint;
        };
        GameState.prototype.createExplosion = function (_x, _y, _radius, _instigator, _causer, _data) {
            var damage = 0;
            var firearm = _data ? _data["firearm"] : null;
            if (firearm) {
                damage = firearm.getDamage();
            }
            else {
                damage = _data["damage"];
            }
            //this.shakeCamera(20);
            //this.createSmoke(_x, _y, 0, Smoke.SMOKE_DEFAULT);
            this.createDecal(_x, _y, DinogenArena.WilkinUtil.GenerateRandomNumber(-180, 180) * DinogenArena.WilkinUtil.TO_RADIANS, "crater");
            var gfx = this.game.add.sprite(_x, _y, "atlas_explosions", "explosion0000");
            gfx.anchor.set(0.5, 0.5);
            gfx.rotation = DinogenArena.WilkinUtil.GenerateRandomNumber(0, 4) * 90;
            gfx.animations.add("explode");
            var anim = gfx.animations.play("explode", DinogenArena.GameUtil.frameRate);
            anim.onComplete.add(this.onExplosionComplete, this);
            this.addToWorld(gfx);
            this.explosions.push(gfx);
            var rect = new Phaser.Rectangle(_x, _y, _radius * 2, _radius * 2);
            /*
            var graphics = this.game.add.graphics();
            graphics.beginFill(0x00FFFF, 0.1);
            graphics.drawCircle(rect.x, rect.y, _radius * 2);
            graphics.endFill();
            this.layerWorld.add(graphics);
            */
            var curActor = null;
            var curPawn = null;
            var distMult = 1;
            var distFromCenter = 0;
            for (var i = 0; i < this.objects.length; i++) {
                curActor = null;
                curPawn = null;
                var curObject = this.objects[i];
                if (curObject.primaryBody) {
                    if (curObject instanceof DinogenArena.Actor) {
                        curActor = curObject;
                        if (curActor instanceof DinogenArena.Pawn) {
                            curPawn = curActor;
                            if (curPawn instanceof DinogenArena.Helicopter || curPawn instanceof DinogenArena.AutoTurret) {
                                continue;
                            }
                        }
                    }
                    else if (!(curObject instanceof DinogenArena.Interactable)) {
                        continue;
                    }
                    distMult = 1;
                    distFromCenter = DinogenArena.WilkinUtil.GetDistance(rect.x, rect.y, curObject.x, curObject.y);
                    if (distFromCenter <= _radius) {
                        distMult = 1 - (distFromCenter / _radius);
                        var damageAmount = damage * distMult;
                        var force = Math.min(damageAmount * 4, 500);
                        var distX = curObject.x - _causer.x;
                        var distY = curObject.y - _causer.y;
                        var rad = Math.atan2(distY, distX);
                        var vx = Math.cos(rad) * force;
                        var vy = Math.sin(rad) * force;
                        curObject.primaryBody.applyForce(vx, vy);
                        var rotAmount = damageAmount * 4;
                        if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                            curObject.primaryBody.rotateLeft(DinogenArena.WilkinUtil.GenerateRandomNumber(rotAmount * 0.1, rotAmount));
                        }
                        else {
                            curObject.primaryBody.rotateRight(DinogenArena.WilkinUtil.GenerateRandomNumber(rotAmount * 0.1, rotAmount));
                        }
                        if (curActor != null) {
                            var bDamage = true;
                            if (curPawn) {
                                if (curPawn.getController() == _instigator) {
                                    if (this.gameMode.friendlyFireIsEnabled()) {
                                        bDamage = true;
                                    }
                                    else {
                                        bDamage = false;
                                    }
                                }
                                else if (curPawn.getTeam() == _instigator.getGameModePlayer().getTeam()) {
                                    bDamage = false;
                                }
                            }
                            if (bDamage) {
                                if (curPawn instanceof DinogenArena.Dinosaur) {
                                    damageAmount *= 1.5;
                                }
                                curActor.takeDamage(damageAmount, _instigator, _causer, DinogenArena.DamageType.DAMAGE_TYPE_EXPLOSIVE);
                            }
                        }
                        /*
                        graphics.lineStyle(1, 0x00FF00, 0.5);
                        graphics.moveTo(rect.x, rect.y);
                        graphics.lineTo(curObject.x, curObject.y);
                        var pos = this.game.add.text(curObject.x, curObject.y, curObject.getId() + ": " + distFromCenter.toFixed(0) + " --> " + (distMult * 100).toFixed(0) + "%", { font: "12px " + GameUtil.FONT, fill: "#00FF00" });
                        this.layerWorld.add(pos);
                        */
                    }
                }
            }
            DinogenArena.SoundManager.PlayWorldSound("explosion", _x, _y, 3, 2);
        };
        GameState.prototype.createSmoke = function (_x, _y, _rotation, _type) {
            if (!DinogenArena.PlayerManager.CurrentProfile.settings.bEffects) {
                return null;
            }
            var smoke = new DinogenArena.Smoke(_type);
            smoke.position.set(_x, _y);
            smoke.rotation = _rotation;
            this.smokes.push(smoke);
            if (this.smokes.length > 80) {
                this.destroySmoke(this.smokes[0]);
            }
            return smoke;
        };
        GameState.prototype.createProjectile = function (_x, _y, _rotation, _type, _causer, _instigator, _data) {
            var projectile;
            if (_type == DinogenArena.ProjectileBase.TYPE_BULLET) {
                projectile = new DinogenArena.Bullet(_x, _y, _rotation, _causer, _instigator, _data);
            }
            else if (_type == DinogenArena.ProjectileBase.TYPE_ARROW) {
                projectile = new DinogenArena.Arrow(_x, _y, _rotation, _causer, _instigator, _data);
            }
            else if (_type == DinogenArena.ProjectileBase.TYPE_ROCKET) {
                projectile = new DinogenArena.Rocket(_x, _y, _rotation, _causer, _instigator, _data);
            }
            else if (_type == DinogenArena.ProjectileBase.TYPE_GRENADE) {
                projectile = new DinogenArena.Grenade(_x, _y, _rotation, _causer, _instigator, _data);
            }
            else if (_type == DinogenArena.ProjectileBase.TYPE_VENOM) {
                projectile = new DinogenArena.Venom(_x, _y, _rotation, _causer, _instigator, _data);
            }
            else if (_type == DinogenArena.ProjectileBase.TYPE_NEEDLE) {
                projectile = new DinogenArena.Needle(_x, _y, _rotation, _causer, _instigator, _data);
            }
            if (!projectile) {
                return null;
            }
            this.objects.push(projectile);
            return projectile;
        };
        GameState.prototype.createShell = function (_x, _y, _rotation, _type) {
            if (!DinogenArena.PlayerManager.CurrentProfile.settings.bEffects) {
                return null;
            }
            if (!this.isOnScreen(_x, _y)) {
                return null;
            }
            if (this.shells.length > 100) {
                this.shells[0].triggerDestroy();
            }
            var shell = new DinogenArena.Shell(_x, _y, _rotation, _type);
            this.objects.push(shell);
            this.shells.push(shell);
            return shell;
        };
        GameState.prototype.removeShell = function (_shell) {
            var index = this.shells.indexOf(_shell);
            if (index >= 0) {
                this.shells.splice(index, 1);
            }
        };
        GameState.prototype.createImpactEffect = function (_x, _y, _rotation, _type) {
            if (!DinogenArena.PlayerManager.CurrentProfile.settings.bEffects) {
                return null;
            }
            if (!this.isOnScreen(_x, _y)) {
                return null;
            }
            //blood, venom, generic
            var fx = this.game.add.image(_x, _y, "atlas_impacts");
            fx.rotation = _rotation + (DinogenArena.WilkinUtil.GenerateRandomNumber(-5, 5) * DinogenArena.WilkinUtil.TO_RADIANS);
            fx.alpha = DinogenArena.WilkinUtil.GenerateRandomNumber(5, 10) * 0.1;
            fx.scale.x = DinogenArena.WilkinUtil.GenerateRandomNumber(10, 20) * 0.1;
            fx.scale.y = DinogenArena.WilkinUtil.GenerateRandomNumber(10, 20) * 0.1;
            var frames = Phaser.Animation.generateFrameNames(_type, 0, DinogenArena.ImpactEffect.GetNumFrames(_type), "", 4);
            var effect = fx.animations.add("effect", frames);
            var anim = fx.animations.play("effect", 60);
            anim.onComplete.addOnce(this.onImpactEffectComplete, this, 0, fx);
            this.addToWorld(fx);
        };
        GameState.prototype.onImpactEffectComplete = function (_fx) {
            _fx.destroy();
        };
        GameState.prototype.createMuzzleFlash = function (_x, _y, _rotation, _type) {
            if (_type === void 0) { _type = "default"; }
            if (!this.isOnScreen(_x, _y)) {
                return null;
            }
            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                var muzzleFlash = this.game.add.image(_x, _y, "atlas_effects", "muzzleFlash_" + DinogenArena.WilkinUtil.GenerateRandomNumber(1, 4));
                muzzleFlash.anchor.set(0, 0.5);
                muzzleFlash.scale.x = DinogenArena.WilkinUtil.GenerateRandomNumber(5, 15) * 0.1;
                muzzleFlash.rotation = _rotation + (DinogenArena.WilkinUtil.GenerateRandomNumber(-5, 5) * DinogenArena.WilkinUtil.TO_RADIANS);
                this.addToWorld(muzzleFlash);
                this.muzzleFlashes.push(muzzleFlash);
            }
            this.createSmoke(_x, _y, _rotation, DinogenArena.Smoke.SMOKE_MUZZLE);
            var sparks = this.game.add.image(_x, _y, "atlas_effects", "sparks_" + DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3));
            sparks.anchor.set(0, 0.5);
            sparks.rotation = _rotation + (DinogenArena.WilkinUtil.GenerateRandomNumber(-15, 15) * DinogenArena.WilkinUtil.TO_RADIANS);
            sparks.scale.x = DinogenArena.WilkinUtil.GenerateRandomNumber(10, 15) * 0.1;
            sparks.scale.y = DinogenArena.WilkinUtil.GenerateRandomNumber(10, 15) * 0.1;
            this.addToWorld(sparks);
            this.muzzleFlashes.push(sparks);
        };
        GameState.prototype.createPlayerController = function () {
            if (this.playerController) {
                alert("Trying to create player controller when it already exists");
                return;
            }
            var pc = new DinogenArena.PlayerController();
            this.controllers.push(pc);
            this.playerController = pc;
            return pc;
        };
        GameState.prototype.createAICharacterController = function () {
            var ai = new DinogenArena.AIController_Character();
            this.controllers.push(ai);
            return ai;
        };
        GameState.prototype.createAIDinosaurController = function () {
            var ai = new DinogenArena.AIController_Dinosaur();
            this.controllers.push(ai);
            return ai;
        };
        GameState.prototype.createAIAutoTurretController = function () {
            var ai = new DinogenArena.AIController_AutoTurret();
            this.controllers.push(ai);
            return ai;
        };
        GameState.prototype.createAIHelicopterController = function () {
            var ai = new DinogenArena.AIController_Helicopter();
            this.controllers.push(ai);
            return ai;
        };
        GameState.prototype.createCharacter = function (_id, _x, _y, _controller) {
            var char = new DinogenArena.Character(_id, _x, _y, 0, _controller);
            this.pawns.push(char);
            this.objects.push(char);
            return char;
        };
        GameState.prototype.createAICharacter = function (_id, _x, _y) {
            var ai = this.createAICharacterController();
            var char = this.createCharacter(_id, _x, _y, ai);
            if (!this.player) {
                this.cameraTarget = char;
            }
            return char;
        };
        GameState.prototype.createDinosaur = function (_id, _x, _y, _controller, _type) {
            var dino;
            if (_type == DinogenArena.Dinosaur.TYPE_RAPTOR) {
                dino = new DinogenArena.Raptor(_id, _x, _y, 0, _controller);
            }
            if (_type == DinogenArena.Dinosaur.TYPE_NEEDLER) {
                dino = new DinogenArena.Needler(_id, _x, _y, 0, _controller);
            }
            else if (_type == DinogenArena.Dinosaur.TYPE_COMPY) {
                dino = new DinogenArena.Compy(_id, _x, _y, 0, _controller);
            }
            else if (_type == DinogenArena.Dinosaur.TYPE_DILO) {
                dino = new DinogenArena.Dilo(_id, _x, _y, 0, _controller);
            }
            else if (_type == DinogenArena.Dinosaur.TYPE_SPINOSAURUS) {
                dino = new DinogenArena.Spinosaurus(_id, _x, _y, 0, _controller);
            }
            else if (_type == DinogenArena.Dinosaur.TYPE_ALLOSAURUS) {
                dino = new DinogenArena.Allosaurus(_id, _x, _y, 0, _controller);
            }
            else if (_type == DinogenArena.Dinosaur.TYPE_TREX) {
                dino = new DinogenArena.TRex(_id, _x, _y, 0, _controller);
            }
            if (dino) {
                this.pawns.push(dino);
                this.objects.push(dino);
            }
            return dino;
        };
        GameState.prototype.createAIDinosaur = function (_id, _x, _y, _type) {
            var ai = this.createAIDinosaurController();
            var dino = this.createDinosaur(_id, _x, _y, ai, _type);
            return dino;
        };
        GameState.prototype.createPlayerCharacter = function (_x, _y) {
            var pc = this.playerController;
            var char = this.createCharacter("pawn_player", _x, _y, pc);
            this.player = char;
            this.playerController = pc;
            this.cameraTarget = this.player;
            return char;
        };
        GameState.prototype.createPlayerDinosaur = function (_x, _y, _type) {
            var pc = this.playerController;
            var dino = this.createDinosaur("pawn_player", _x, _y, pc, _type);
            this.player = dino;
            this.playerController = pc;
            this.cameraTarget = this.player;
            return dino;
        };
        GameState.prototype.createAutoTurret = function (_id, _x, _y, _rotation) {
            var ai = this.createAIAutoTurretController();
            var turret = new DinogenArena.AutoTurret(_id, _x, _y, _rotation, ai);
            this.pawns.push(turret);
            this.objects.push(turret);
            return turret;
        };
        GameState.prototype.createAutoTurretBase = function (_id, _x, _y, _rotation, _turret) {
            var base = new DinogenArena.AutoTurretBase(_id, _x, _y, _rotation, _turret);
            this.interactables.push(base);
            this.objects.push(base);
            return base;
        };
        GameState.prototype.createHelicopter = function (_id, _x, _y, _rotation, _heliType) {
            var heli;
            var ai = this.createAIHelicopterController();
            if (_heliType == DinogenArena.Helicopter.TYPE_APACHE) {
                heli = new DinogenArena.Apache(_id, _x, _y, _rotation, ai);
            }
            else if (_heliType == DinogenArena.Helicopter.TYPE_COBRA) {
                heli = new DinogenArena.Cobra(_id, _x, _y, _rotation, ai);
            }
            else if (_heliType == DinogenArena.Helicopter.TYPE_SEAKNIGHT) {
                heli = new DinogenArena.SeaKnight(_id, _x, _y, _rotation, ai);
            }
            else if (_heliType == DinogenArena.Helicopter.TYPE_OSPREY) {
                heli = new DinogenArena.Osprey(_id, _x, _y, _rotation, ai);
            }
            else {
                DinogenArena.GameUtil.Alert("Invalid helicopter: " + _heliType);
            }
            this.pawns.push(heli);
            this.objects.push(heli);
            return heli;
        };
        GameState.prototype.createGenericObject = function (_id, _x, _y, _rotation) {
            var obj = new DinogenArena.WorldObject(_id, _x, _y, _rotation);
            this.objects.push(obj);
            return obj;
        };
        GameState.prototype.createTarget = function (_id, _x, _y, _rotation) {
            var target = new DinogenArena.Target(_id, _x, _y, _rotation);
            this.objects.push(target);
            this.actors.push(target);
            return target;
        };
        GameState.prototype.createDecal = function (_x, _y, _rotation, _type) {
            if (!DinogenArena.PlayerManager.CurrentProfile.settings.bDecals) {
                return null;
            }
            var rand = 0;
            var alphaMin = 10;
            var alphaMax = 100;
            if (_type == "blood") {
                rand = 3;
                alphaMin = 5;
                alphaMax = 30;
            }
            else if (_type == "venom") {
                rand = 3;
                alphaMin = 5;
                alphaMax = 20;
            }
            var decal = this.game.add.image(_x, _y, "atlas_objects", ("decal_" + _type + (rand > 1 ? ("_" + DinogenArena.WilkinUtil.GenerateRandomNumber(1, rand)) : "")));
            decal.alpha = DinogenArena.WilkinUtil.GenerateRandomNumber(alphaMin, alphaMax) * 0.01;
            decal.scale.x = DinogenArena.WilkinUtil.GenerateRandomNumber(80, 120) * 0.01;
            decal.scale.y = DinogenArena.WilkinUtil.GenerateRandomNumber(80, 120) * 0.01;
            decal.anchor.set(0.5, 0.5);
            decal.rotation = DinogenArena.WilkinUtil.GenerateRandomNumber(-180, 180) * DinogenArena.WilkinUtil.TO_RADIANS;
            this.addToWorld(decal, GameState.INDEX_DECALS);
            this.pushToDecals(decal);
            return decal;
        };
        GameState.prototype.pushToDecals = function (_img) {
            if (this.decals.length > 100) {
                this.decals[0].destroy();
                this.decals.splice(0, 1);
            }
            this.decals.push(_img);
        };
        GameState.prototype.createMoneyDrop = function (_id, _x, _y, _rotation, _value) {
            var money = new DinogenArena.MoneyDrop(_id, _x, _y, _rotation, _value);
            this.interactables.push(money);
            this.objects.push(money);
            return money;
        };
        GameState.prototype.createArrowAmmo = function (_id, _x, _y, _rotation) {
            var arrow = new DinogenArena.ArrowAmmo(_id, _x, _y, _rotation);
            this.interactables.push(arrow);
            this.objects.push(arrow);
            return arrow;
        };
        GameState.prototype.createHillZone = function (_x, _y) {
            var zone = new DinogenArena.HillZone("hill", _x, _y);
            this.objects.push(zone);
            return zone;
        };
        GameState.prototype.createFlag = function (_team, _x, _y) {
            var flag = new DinogenArena.Flag("flag_" + _team, _x, _y, _team);
            flag.hitSprite.tint = DinogenArena.GameModeManager.GetColourForTeam(_team);
            this.interactables.push(flag);
            this.objects.push(flag);
            var ctf = this.gameMode;
            if (ctf) {
                ctf.setFlag(_team, flag);
            }
            var homeSprite = this.game.add.sprite(_x, _y, "atlas_objects", "flag_home");
            homeSprite.anchor.set(0.5, 0.5);
            homeSprite.tint = flag.hitSprite.tint;
            this.addToWorld(homeSprite, GameState.INDEX_BOTTOM);
            return flag;
        };
        GameState.prototype.createCrate = function (_id, _x, _y, _rotation, _type, _contents) {
            if (_contents === void 0) { _contents = null; }
            var crate;
            if (_type == DinogenArena.Crate.TYPE_SURVIVAL_CRATE) {
                crate = new DinogenArena.SurvivalCrate(_id, _x, _y, _rotation);
            }
            else if (_type == DinogenArena.Crate.TYPE_GENERIC_CRATE) {
                crate = new DinogenArena.GenericCrate(_id, _x, _y, _rotation, _contents);
            }
            else {
                crate = new DinogenArena.Crate(_id, _x, _y, _rotation, _contents);
            }
            this.interactables.push(crate);
            this.objects.push(crate);
            if (this.gameMode.isSurvival()) {
                this.playerController.getHUD().addObjectiveArrow({ worldObject: crate });
            }
            return crate;
        };
        GameState.prototype.createTriggerArea = function (_id, _x, _y) {
            var area = new DinogenArena.TriggerArea(_id, _x, _y, 0);
            this.interactables.push(area);
            this.objects.push(area);
            return area;
        };
        GameState.prototype.createWorldButton = function (_id, _x, _y) {
            var but = new DinogenArena.WorldButton(_id, _x, _y, 0, null);
            this.interactables.push(but);
            this.objects.push(but);
            return but;
        };
        GameState.prototype.createDroppedItem = function (_id, _x, _y, _rotation, _data) {
            var item = new DinogenArena.DroppedItem(_id, _x, _y, _rotation, _data);
            if (this.interactables.length > 12) {
                var toDestroy = this.interactables[0];
                if (toDestroy.canBeDestroyed()) {
                    this.flagObjectForDestruction(toDestroy);
                }
            }
            this.interactables.push(item);
            this.objects.push(item);
            return item;
        };
        GameState.prototype.getObjectById = function (_id) {
            for (var i = 0; i < this.objects.length; i++) {
                if (this.objects[i].getId() == _id) {
                    return this.objects[i];
                }
            }
            return null;
        };
        GameState.prototype.getClosestPawnFor = function (_pawn, _bEnemy, _bLineOfSight, _maxDistance) {
            if (_bLineOfSight === void 0) { _bLineOfSight = false; }
            if (_maxDistance === void 0) { _maxDistance = 0; }
            if (!_pawn) {
                return null;
            }
            var arr = [];
            var index = 0;
            var lastDist = 99999;
            for (var i = 0; i < this.pawns.length; i++) {
                var tmp = this.pawns[i];
                if (tmp != _pawn) {
                    if (tmp.isAlive() && tmp.isTargetable()) {
                        var bValid = false;
                        if (_bEnemy && tmp.getTeam() != _pawn.getTeam()) {
                            bValid = true;
                        }
                        else if (!_bEnemy && tmp.getTeam() == _pawn.getTeam()) {
                            bValid = true;
                        }
                        if (_bLineOfSight && bValid) {
                            var raycastOutput = this.game.physics.box2d.raycast(_pawn.x, _pawn.y, tmp.x, tmp.y, true, GameState.FilterRaycastHit);
                            if (raycastOutput.length > 0) {
                                bValid = false;
                            }
                        }
                        if (_maxDistance > 0 && bValid) {
                            if (this.getDistance(_pawn, tmp) > _maxDistance) {
                                bValid = false;
                            }
                        }
                        if (bValid) {
                            var dist = this.getDistance(tmp, _pawn);
                            if (dist < lastDist) {
                                index = arr.length;
                                lastDist = dist;
                            }
                            arr.push(tmp);
                        }
                    }
                }
            }
            if (arr.length > 0) {
                return arr[index];
            }
            return null;
        };
        GameState.prototype.shakeCamera = function (_val) {
            this.camera.x += DinogenArena.WilkinUtil.GenerateRandomNumber(-_val, _val);
            this.camera.y += DinogenArena.WilkinUtil.GenerateRandomNumber(-_val, _val);
        };
        GameState.prototype.getDistance = function (_obj1, _obj2) {
            return DinogenArena.WilkinUtil.GetDistance(_obj1.x, _obj1.y, _obj2.x, _obj2.y);
        };
        GameState.prototype.onPauseKeyPressed = function () {
            if (!this.gameMode.matchHasEnded()) {
                if (!this.bGamePaused) {
                    this.setPaused(!this.bGamePaused);
                }
            }
        };
        GameState.prototype.startCinematic = function (_id) {
            if (this.cinematic) {
                this.stopCinematic();
            }
            this.cinematic = new DinogenArena.CinematicScreen();
            this.cinematic.startCinematic(DinogenArena.CampaignManager.GetCinematicById(_id));
            this.onCinematicStart();
        };
        GameState.prototype.stopCinematic = function () {
            this.cinematic.destroy();
            this.cinematic = null;
            this.onCinematicEnd();
        };
        GameState.prototype.setPaused = function (_bVal, _bUsePauseMenu) {
            if (_bUsePauseMenu === void 0) { _bUsePauseMenu = true; }
            if (_bVal) {
                this.bGamePaused = true;
                DinogenArena.SoundManager.PauseVox();
                for (var i = 0; i < this.objects.length; i++) {
                    this.objects[i].onGamePaused();
                }
                if (this.pauseMenu) {
                    this.pauseMenu.destroy();
                }
                if (_bUsePauseMenu) {
                    this.pauseMenu = new DinogenArena.PauseMenu();
                    this.layerUI.visible = false;
                }
                this.engine.showMouse(true);
            }
            else {
                this.bGamePaused = false;
                DinogenArena.SoundManager.ResumeVox();
                for (var i = 0; i < this.objects.length; i++) {
                    this.objects[i].onGameResumed();
                }
                if (this.pauseMenu) {
                    this.pauseMenu.close();
                }
                this.layerUI.visible = true;
                var bShowMouse = false;
                if (this.gameMode.spawnMenu || this.gameMode.teamSelectMenu) {
                    bShowMouse = true;
                }
                this.engine.showMouse(bShowMouse);
            }
            DinogenArena.SoundManager.OnGamePaused(_bVal);
        };
        GameState.prototype.destroyGame = function () {
            this.bPendingDestroy = true;
            this.destroy();
        };
        GameState.prototype.destroy = function () {
            DinogenArena.SoundManager.DestroyAmbience();
            DinogenArena.SoundManager.DestroyVox();
            this.worldFilters = null;
            this.gameMode.destroy();
            this.gameMode = null;
            this.mapData = null;
            this.map.destroy();
            this.map = null;
            while (this.objects.length > 0) {
                this.flagObjectForDestruction(this.objects[0]);
                this.objects[0].destroy();
                this.objects.splice(0, 1);
            }
            this.objects = null;
            this.objectsToDestroy = null;
            while (this.controllers.length > 0) {
                this.controllers[0].destroy();
                this.controllers.splice(0, 1);
            }
            this.controllers = null;
            this.muzzleFlashes = null;
            this.explosions = [];
            this.smokes = [];
            this.pawns = null;
            this.shells = null;
            this.actors = null;
            this.gameMode = null;
            this.cameraTarget = null;
            this.player = null;
            this.playerController = null;
            this.layerUI.destroy();
            this.layerUI = null;
            this.layerWorld.destroy();
            this.layerWorld = null;
            if (this.pauseMenu) {
                this.pauseMenu.destroy();
                this.pauseMenu = null;
            }
            this.layerPauseMenu.destroy();
            this.layerPauseMenu = null;
            this.bodies = null;
            this.decals = null;
            this.queue = null;
            this.engine = null;
        };
        GameState.CAMERA_SPEED = 0.15;
        GameState.CATEGORY_PROJECTILES = 1;
        GameState.CATEGORY_OBJECTS = 2;
        GameState.CATEGORY_ITEMS = 4;
        GameState.CATEGORY_WALLS = 8;
        GameState.CATEGORY_DEAD = 16;
        GameState.CATEGORY_DINO = 32;
        GameState.CATEGORY_AIR = 64;
        GameState.CATEGORY_SHELLS = 128;
        GameState.MASK_PROJECTILES = GameState.CATEGORY_WALLS | GameState.CATEGORY_OBJECTS;
        GameState.MASK_PAWN = GameState.CATEGORY_WALLS | GameState.CATEGORY_PROJECTILES | GameState.CATEGORY_OBJECTS | GameState.CATEGORY_ITEMS | GameState.CATEGORY_DEAD;
        GameState.MASK_PAWN_DINO = GameState.CATEGORY_PROJECTILES | GameState.CATEGORY_OBJECTS;
        GameState.MASK_DEAD = GameState.CATEGORY_WALLS | GameState.CATEGORY_OBJECTS;
        GameState.MASK_ITEMS = GameState.CATEGORY_WALLS | GameState.CATEGORY_OBJECTS;
        GameState.MASK_SHELLS = GameState.CATEGORY_WALLS | GameState.CATEGORY_ITEMS;
        GameState.MASK_AIR = 0; //GameState.CATEGORY_AIR;
        GameState.MASK_CRATES = GameState.CATEGORY_WALLS | GameState.CATEGORY_OBJECTS | GameState.CATEGORY_ITEMS | GameState.CATEGORY_DEAD | GameState.CATEGORY_SHELLS;
        GameState.INDEX_DECALS = 0;
        GameState.INDEX_BOTTOM = 1;
        GameState.INDEX_DEFAULT = 2;
        GameState.INDEX_TOP = 3;
        GameState.INDEX_AIR = 4;
        return GameState;
    }(Phaser.State));
    DinogenArena.GameState = GameState;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var DamageType = /** @class */ (function () {
        function DamageType() {
        }
        DamageType.DAMAGE_TYPE_BULLET = "DAMAGE_TYPE_BULLET";
        DamageType.DAMAGE_TYPE_MELEE = "DAMAGE_TYPE_MELEE";
        DamageType.DAMAGE_TYPE_EXPLOSIVE = "DAMAGE_TYPE_EXPLOSIVE";
        DamageType.DAMAGE_TYPE_DINOSAUR = "DAMAGE_TYPE_DINOSAUR";
        DamageType.DAMAGE_TYPE_WORLD = "DAMAGE_TYPE_WORLD";
        return DamageType;
    }());
    DinogenArena.DamageType = DamageType;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var SoundNode = /** @class */ (function () {
        function SoundNode(_target, _soundId, _volumeMultiplier, _bLoop) {
            this.bLoop = false;
            this.target = _target;
            this.soundId = _soundId;
            this.volumeMultiplier = _volumeMultiplier;
            this.bLoop = _bLoop;
            this.sound = DinogenArena.SoundManager.PlayWorldSound(this.soundId, this.target.x, this.target.y, 0, _volumeMultiplier, this.bLoop);
        }
        SoundNode.prototype.destroy = function () {
            this.target = null;
            this.sound.stop();
            this.sound.destroy();
            this.sound = null;
        };
        SoundNode.prototype.stop = function () {
            if (this.sound) {
                this.sound.stop();
            }
        };
        SoundNode.prototype.tick = function () {
            this.setVolume(DinogenArena.SoundManager.GetVolForWorldPosition(this.target.x, this.target.y) * DinogenArena.PlayerManager.CurrentProfile.settings.gameVolume * this.volumeMultiplier);
        };
        SoundNode.prototype.setVolume = function (_val) {
            if (this.sound) {
                this.sound.volume = _val;
            }
        };
        return SoundNode;
    }());
    DinogenArena.SoundNode = SoundNode;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var WorldObject = /** @class */ (function (_super) {
        __extends(WorldObject, _super);
        function WorldObject(_id, _x, _y, _rotation) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.minimapIconId = "minimap_object";
            _this.bRotateMinimapIcon = true;
            _this.bShowOnMinimap = true;
            _this.referenceScale = 0.5;
            _this.destroyTimer = 60;
            _this.bDestroyTimerEnabled = false;
            _this.bPendingDestroy = false;
            _this.bSetRotationFromPrimaryBody = true;
            _this.bJointLimitsEnabled = true;
            _this.id = _id;
            _this.position.set(_x, _y);
            _this.rotation = _rotation;
            _this.setDestroyTimer(3);
            _this.bodies = [];
            DinogenArena.GameUtil.GetGameState().addToWorld(_this, DinogenArena.GameState.INDEX_DEFAULT);
            return _this;
        }
        WorldObject.prototype.destroy = function () {
            this.destroyAllBodies();
            if (this.hitSprite) {
                this.hitSprite.destroy();
            }
            this.detach();
            this.hitSprite = null;
            delete this.sprites;
            this.sprites = null;
            this.bodies = null;
            this.joints = null;
            this.attachObject = null;
            this.minimapIconId = null;
            _super.prototype.destroy.call(this);
        };
        WorldObject.prototype.update = function () {
            _super.prototype.update.call(this);
            if (!DinogenArena.GameUtil.GetGameState().bGamePaused) {
                this.tick();
            }
        };
        WorldObject.prototype.tick = function () {
            for (var i = 0; i < this.bodies.length; i++) {
                var bb = this.bodies[i];
                var data = bb.data.GetUserData();
                if (data) {
                    var mc;
                    var obj = data;
                    if (obj["mc"] instanceof Phaser.Sprite) {
                        mc = obj["mc"];
                    }
                    if (mc) {
                        var worldObj = mc.parent;
                        if (worldObj) {
                            mc.position.set(bb.x, bb.y);
                        }
                        mc.rotation = bb.rotation - mc.parent.rotation;
                    }
                }
            }
            if (this.primaryBody) {
                this.updatePosition();
                if (!this.primaryBody.fixedRotation) {
                    if (this.bSetRotationFromPrimaryBody) {
                        this.rotation = this.primaryBody.rotation;
                    }
                }
            }
            if (this.attachObject) {
                if (this.hitSprite) {
                    this.hitSprite.position.set(this.attachObject.x, this.attachObject.y);
                }
                else {
                    this.position.set(this.attachObject.x, this.attachObject.y);
                }
            }
            if (this.bDestroyTimerEnabled) {
                if (this.destroyTimer > 0) {
                    this.destroyTimer--;
                }
                else {
                    this.triggerDestroy();
                }
            }
        };
        WorldObject.prototype.showOnMinimap = function () {
            return this.bShowOnMinimap;
        };
        WorldObject.prototype.attachTo = function (_obj) {
            this.attachObject = _obj;
        };
        WorldObject.prototype.detach = function () {
            this.attachObject = null;
        };
        WorldObject.prototype.getMinimapIconId = function () {
            return this.minimapIconId;
        };
        WorldObject.prototype.getMinimapIconScale = function () {
            return this.referenceScale;
        };
        WorldObject.prototype.rotateMinimapIcon = function () {
            return this.bRotateMinimapIcon;
        };
        WorldObject.prototype.getMaterial = function () {
            return this.material;
        };
        WorldObject.prototype.onGamePaused = function () {
            return;
        };
        WorldObject.prototype.onGameResumed = function () {
            return;
        };
        WorldObject.prototype.updatePosition = function () {
            this.x = this.primaryBody.x;
            this.y = this.primaryBody.y;
        };
        WorldObject.prototype.getSprite = function (_id) {
            if (this.sprites) {
                return this.sprites[_id];
            }
            return null;
        };
        WorldObject.prototype.addBody = function (_body, _spriteId) {
            if (_spriteId === void 0) { _spriteId = null; }
            var obj = {};
            obj["worldObject"] = this;
            _body.data.SetUserData(obj);
            this.bodies.push(_body);
            DinogenArena.GameUtil.GetGameState().addBody(_body);
            if (_spriteId) {
                if (!this.sprites) {
                    this.sprites = {};
                }
                this.sprites[_spriteId] = _body.sprite;
            }
        };
        WorldObject.prototype.updateUserData = function (_body, _mc) {
            var obj = {};
            obj["worldObject"] = this;
            obj["mc"] = _mc;
            _body.data.SetUserData(obj);
        };
        WorldObject.prototype.removeBody = function (_body) {
            if (_body.sprite) {
                _body.sprite.physicsEnabled = false;
                _body.sprite.destroy();
                _body.sprite = null;
            }
            DinogenArena.GameUtil.GetGameState().destroyBody(_body);
        };
        WorldObject.prototype.removeJoint = function (_joint) {
            //GameUtil.GetGameState().destroyJoint(_joint);
        };
        WorldObject.prototype.destroyAllBodies = function () {
            if (this.joints) {
                while (this.joints.length > 0) {
                    this.removeJoint(this.joints[0]);
                    this.joints.splice(0, 1);
                }
                this.joints = [];
            }
            if (this.bodies) {
                while (this.bodies.length > 0) {
                    this.removeBody(this.bodies[0]);
                    this.bodies.splice(0, 1);
                }
                this.bodies = [];
            }
            this.primaryBody = null;
        };
        WorldObject.prototype.bodyCallback = function (_body1, _body2, _fixture1, _fixture2, _begin, _contact) {
            if (!_begin) {
                return;
            }
            var objA = _body1.data.GetUserData() ? _body1.data.GetUserData()["worldObject"] : null;
            var objB = _body2.data.GetUserData() ? _body2.data.GetUserData()["worldObject"] : null;
            if (objA || objB) {
                DinogenArena.GameUtil.GetGameState().addCollisionToQueue(objA, objB);
            }
        };
        WorldObject.prototype.rotateAroundPoint = function (_x, _y, angle, _bodies) {
            var cosAngle = Math.cos(angle);
            var sinAngle = Math.sin(angle);
            for (var i = 0; i < this.bodies.length; i++) {
                var body = _bodies[i];
                var distX = body.x - _x;
                var distY = body.y - _y;
                body.x = cosAngle * distX - sinAngle * distY + _x;
                body.y = cosAngle * distY + sinAngle * distX + _y;
                body.rotation = angle;
            }
        };
        WorldObject.prototype.onHit = function (_obj) {
            return;
        };
        WorldObject.prototype.createBody = function () {
            return;
        };
        WorldObject.prototype.getRotationInRadians = function () {
            return this.rotation;
        };
        WorldObject.prototype.setId = function (_id) {
            this.id = _id;
        };
        WorldObject.prototype.getId = function () {
            return this.id;
        };
        WorldObject.prototype.triggerDestroy = function () {
            DinogenArena.GameUtil.GetGameState().flagObjectForDestruction(this);
        };
        WorldObject.prototype.enableDestroyTimer = function () {
            this.bDestroyTimerEnabled = true;
        };
        WorldObject.prototype.setDestroyTimer = function (_sec) {
            this.destroyTimer = Math.round(_sec * 60);
        };
        WorldObject.prototype.destroyTimerIsEnabled = function () {
            return this.bDestroyTimerEnabled;
        };
        WorldObject.prototype.isPendingDestroy = function () {
            return this.bPendingDestroy;
        };
        WorldObject.prototype.setPendingDestroy = function () {
            this.bPendingDestroy = true;
            this.visible = false;
        };
        return WorldObject;
    }(Phaser.Group));
    DinogenArena.WorldObject = WorldObject;
    var ImpactEffect = /** @class */ (function () {
        function ImpactEffect() {
        }
        ImpactEffect.GetNumFrames = function (_id) {
            if (_id == ImpactEffect.TYPE_BLOOD) {
                return 18;
            }
            else if (_id == ImpactEffect.TYPE_GENERIC) {
                return 18;
            }
            else if (_id == ImpactEffect.TYPE_GIB) {
                return 12;
            }
            return 1;
        };
        ImpactEffect.IsBlood = function (_id) {
            if (_id == ImpactEffect.TYPE_BLOOD || _id == ImpactEffect.TYPE_GIB) {
                return true;
            }
            return false;
        };
        ImpactEffect.TYPE_BLOOD = "impact_blood";
        ImpactEffect.TYPE_GIB = "impact_gib";
        ImpactEffect.TYPE_GENERIC = "impact_generic";
        ImpactEffect.TYPE_VENOM = "impact_venom";
        return ImpactEffect;
    }());
    DinogenArena.ImpactEffect = ImpactEffect;
    var Smoke = /** @class */ (function (_super) {
        __extends(Smoke, _super);
        function Smoke(_type) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.alphaRate = -0.01;
            _this.scaleXRate = 0;
            _this.scaleYRate = 0;
            _this.rotationRate = 0;
            _this.xRate = 0;
            _this.smokeType = _type;
            var atlas = "atlas_effects";
            var atlasKey = "smoke";
            if (_this.smokeType == Smoke.SMOKE_DEFAULT) {
                _this.alpha = 0.5;
                _this.alphaRate = -0.008;
                _this.scale.x = DinogenArena.WilkinUtil.GenerateRandomNumber(4, 8) * 0.1;
                _this.scale.y = DinogenArena.WilkinUtil.GenerateRandomNumber(4, 8) * 0.1;
                _this.scaleXRate = DinogenArena.WilkinUtil.GenerateRandomNumber(4, 8) * 0.01;
                _this.scaleYRate = DinogenArena.WilkinUtil.GenerateRandomNumber(4, 8) * 0.01;
                _this.rotationRate = (DinogenArena.WilkinUtil.GenerateRandomNumber(-4, 4) * 0.1) * DinogenArena.WilkinUtil.TO_RADIANS;
            }
            else if (_this.smokeType == Smoke.SMOKE_MUZZLE) {
                _this.alpha = DinogenArena.WilkinUtil.GenerateRandomNumber(18, 22) * 0.01;
                _this.scale.set(0.35, 0.35);
                _this.alphaRate = -0.005;
                _this.scaleXRate = DinogenArena.WilkinUtil.GenerateRandomNumber(-4, 4) * 0.01;
                _this.scaleYRate = DinogenArena.WilkinUtil.GenerateRandomNumber(-4, 4) * 0.01;
                _this.rotationRate = (DinogenArena.WilkinUtil.GenerateRandomNumber(-25, 25) * 0.1) * DinogenArena.WilkinUtil.TO_RADIANS;
                _this.xRate = 2;
            }
            _this.smoke = _this.game.add.image(0, 0, atlas, atlasKey);
            _this.smoke.anchor.set(0.5, 0.5);
            //this.smoke.rotation = WilkinUtil.GenerateRandomNumber(-180, 180) * WilkinUtil.TO_RADIANS;
            _this.add(_this.smoke);
            DinogenArena.GameUtil.GetGameState().addToWorld(_this);
            return _this;
        }
        Smoke.prototype.destroy = function () {
            this.smoke = null;
            _super.prototype.destroy.call(this);
        };
        Smoke.prototype.update = function () {
            if (!DinogenArena.GameUtil.GetGameState().bGamePaused) {
                this.tick();
            }
        };
        Smoke.prototype.tick = function () {
            if (this.alpha <= 0 || this.smoke.scale.x <= 0 || this.smoke.scale.y <= 0) {
                DinogenArena.GameUtil.GetGameState().destroySmoke(this);
            }
            else {
                this.alpha += this.alphaRate;
                this.smoke.scale.x += this.scaleXRate;
                this.smoke.scale.y += this.scaleYRate;
                this.smoke.rotation += this.rotationRate;
                this.smoke.x += this.xRate;
            }
        };
        Smoke.SMOKE_DEFAULT = "SMOKE_DEFAULT";
        Smoke.SMOKE_MUZZLE = "SMOKE_MUZZLE";
        Smoke.SMOKE_BLOOD = "SMOKE_BLOOD";
        return Smoke;
    }(Phaser.Group));
    DinogenArena.Smoke = Smoke;
    var ProjectileBase = /** @class */ (function (_super) {
        __extends(ProjectileBase, _super);
        function ProjectileBase(_x, _y, _rotation, _causer, _instigator, _data) {
            var _this = _super.call(this, null, _x, _y, _rotation) || this;
            _this.speed = 1;
            _this.damage = 0;
            _this.bZeroVelocityOnHit = true;
            _this.causer = _causer;
            _this.instigator = _instigator;
            _this.data = _data;
            _this.firearm = _this.data ? _this.data["firearm"] : null;
            _this.setDestroyTimer(1);
            _this.enableDestroyTimer();
            _this.origin = new Phaser.Point(_x, _y);
            return _this;
        }
        ProjectileBase.prototype.destroy = function () {
            this.firearm = null;
            this.causer = null;
            this.instigator = null;
            delete this.data;
            this.data = null;
            this.origin = null;
            _super.prototype.destroy.call(this);
        };
        ProjectileBase.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            if (this.bZeroVelocityOnHit) {
                if (this.primaryBody) {
                    this.primaryBody.setZeroVelocity();
                }
            }
        };
        ProjectileBase.prototype.getDistanceFromOrigin = function () {
            return DinogenArena.WilkinUtil.GetDistance(this.x, this.y, this.origin.x, this.origin.y);
        };
        ProjectileBase.prototype.getOrigin = function () {
            return this.origin;
        };
        ProjectileBase.prototype.getFirearm = function () {
            return this.firearm;
        };
        ProjectileBase.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.x < 0 || this.x > this.game.world.width || this.y < 0 || this.y > this.game.world.height) {
                this.triggerDestroy();
            }
        };
        ProjectileBase.TYPE_BULLET = "TYPE_BULLET";
        ProjectileBase.TYPE_ARROW = "TYPE_ARROW";
        ProjectileBase.TYPE_ROCKET = "TYPE_ROCKET";
        ProjectileBase.TYPE_GRENADE = "TYPE_GRENADE";
        ProjectileBase.TYPE_VENOM = "TYPE_VENOM";
        ProjectileBase.TYPE_NEEDLE = "TYPE_NEEDLE";
        return ProjectileBase;
    }(WorldObject));
    DinogenArena.ProjectileBase = ProjectileBase;
    var Venom = /** @class */ (function (_super) {
        __extends(Venom, _super);
        function Venom(_x, _y, _rotation, _causer, _instigator, _data) {
            var _this = _super.call(this, _x, _y, _rotation, _causer, _instigator, _data) || this;
            _this.damage = _this.data["damage"];
            if (_this.data["damageMultiplier"] != undefined) {
                _this.damage *= _this.data["damageMultiplier"];
            }
            _this.speed = 2500;
            _this.venom = _this.game.add.image(0, 0, "atlas_effects", "projectile_venom");
            _this.add(_this.venom);
            DinogenArena.GameUtil.GetGameState().addToWorld(_this);
            _this.venom.anchor.set(0.5, 0.5);
            _this.venom.scale.x = DinogenArena.WilkinUtil.GenerateRandomNumber(10, 20) * 0.1;
            //this.venom.scale.y = WilkinUtil.GenerateRandomNumber(8, 12) * 0.1;
            _this.createBody();
            _this.primaryBody.velocity.x = Math.cos(_this.rotation) * _this.speed;
            _this.primaryBody.velocity.y = Math.sin(_this.rotation) * _this.speed;
            _this.setDestroyTimer(1);
            return _this;
        }
        Venom.prototype.destroy = function () {
            this.venom = null;
            _super.prototype.destroy.call(this);
        };
        Venom.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            var bApplyDamage = true;
            var sfx = "physics_flesh_impact_bullet";
            var impactType = ImpactEffect.TYPE_VENOM;
            if (_obj instanceof Actor) {
                var actor = _obj;
                var pawn = actor instanceof Pawn ? actor : null;
                if (pawn) {
                    var causerPawn = this.causer instanceof Pawn ? this.causer : null;
                    if (causerPawn) {
                        if (causerPawn.getTeam() == pawn.getTeam()) {
                            bApplyDamage = false;
                        }
                    }
                }
                if (bApplyDamage) {
                    actor.takeDamage(this.damage, this.instigator, this, DinogenArena.DamageType.DAMAGE_TYPE_DINOSAUR);
                    this.instigator.onEnemyHit();
                }
            }
            DinogenArena.GameUtil.GetGameState().createImpactEffect(this.x, this.y, (this.rotation + (180 * DinogenArena.WilkinUtil.TO_RADIANS)), impactType);
            DinogenArena.SoundManager.PlayWorldSound(sfx, this.x, this.y, 3);
            DinogenArena.GameUtil.GetGameState().createDecal(this.x, this.y, this.rotation, "venom");
            this.triggerDestroy();
        };
        Venom.prototype.createBody = function () {
            var venomBody = new Phaser.Physics.Box2D.Body(this.game, null, this.x, this.y, 0);
            //venomBody.setRectangleFromSprite(this.venom);
            var fixture = venomBody.setCircle(8);
            //var fixture = venomBody.setRectangle(4, 8);
            venomBody.dynamic = true;
            venomBody.rotation = this.rotation;
            venomBody.friction = 0;
            venomBody.restitution = 0;
            venomBody.bullet = true;
            fixture.SetDensity(0);
            venomBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_PROJECTILES);
            venomBody.setCollisionMask(DinogenArena.GameState.MASK_PROJECTILES);
            this.addBody(venomBody);
            this.primaryBody = venomBody;
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
        };
        return Venom;
    }(ProjectileBase));
    DinogenArena.Venom = Venom;
    var Needle = /** @class */ (function (_super) {
        __extends(Needle, _super);
        function Needle(_x, _y, _rotation, _causer, _instigator, _data) {
            var _this = _super.call(this, _x, _y, _rotation, _causer, _instigator, _data) || this;
            _this.damage = _this.data["damage"];
            if (_this.data["damageMultiplier"] != undefined) {
                _this.damage *= _this.data["damageMultiplier"];
            }
            _this.speed = DinogenArena.WilkinUtil.GenerateRandomNumber(2000, 2500);
            _this.needle = _this.game.add.image(0, 0, "atlas_effects", "projectile_needle");
            _this.add(_this.needle);
            DinogenArena.GameUtil.GetGameState().addToWorld(_this);
            _this.needle.anchor.set(0.5, 0.5);
            _this.needle.alpha = DinogenArena.WilkinUtil.GenerateRandomNumber(5, 10) * 0.1;
            _this.needle.scale.x = DinogenArena.WilkinUtil.GenerateRandomNumber(20, 30) * 0.1;
            _this.createBody();
            _this.primaryBody.velocity.x = Math.cos(_this.rotation) * _this.speed;
            _this.primaryBody.velocity.y = Math.sin(_this.rotation) * _this.speed;
            //GameUtil.ApplyForce(this.primaryBody, Math.cos(this.rotation) * this.speed, Math.sin(this.rotation) * this.speed);
            _this.setDestroyTimer(1);
            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                DinogenArena.SoundManager.PlayWorldSound("physics_bullet_flyby", _this.x, _this.y, 5, 0.5);
            }
            return _this;
        }
        Needle.prototype.destroy = function () {
            this.needle = null;
            _super.prototype.destroy.call(this);
        };
        Needle.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            var bApplyDamage = true;
            var sfx = "physics_flesh_impact_needle";
            var impactType = "venom";
            if (_obj instanceof Actor) {
                var actor = _obj;
                var pawn = actor instanceof Pawn ? actor : null;
                if (pawn) {
                    var causerPawn = this.causer instanceof Pawn ? this.causer : null;
                    if (causerPawn) {
                        if (causerPawn.getTeam() == pawn.getTeam()) {
                            bApplyDamage = false;
                        }
                    }
                }
                if (bApplyDamage) {
                    actor.takeDamage(this.damage, this.instigator, this, DinogenArena.DamageType.DAMAGE_TYPE_DINOSAUR);
                    this.instigator.onEnemyHit();
                }
            }
            //GameUtil.GetGameState().createImpactEffect(this.x, this.y, (this.rotation + (180 * WilkinUtil.TO_RADIANS)), impactType);
            DinogenArena.SoundManager.PlayWorldSound(sfx, this.x, this.y, 3);
            this.triggerDestroy();
        };
        Needle.prototype.createBody = function () {
            var needleBody = new Phaser.Physics.Box2D.Body(this.game, null, this.x, this.y, 0);
            //venomBody.setRectangleFromSprite(this.venom);
            var fixture = needleBody.setCircle(4);
            //var fixture = needleBody.setRectangle(4, 4);
            needleBody.dynamic = true;
            needleBody.rotation = this.rotation;
            needleBody.friction = 0;
            needleBody.bullet = true;
            fixture.SetDensity(0);
            needleBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_PROJECTILES);
            needleBody.setCollisionMask(DinogenArena.GameState.MASK_PROJECTILES);
            this.addBody(needleBody);
            this.primaryBody = needleBody;
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
        };
        return Needle;
    }(ProjectileBase));
    DinogenArena.Needle = Needle;
    var Grenade = /** @class */ (function (_super) {
        __extends(Grenade, _super);
        function Grenade(_x, _y, _rotation, _causer, _instigator, _data) {
            var _this = _super.call(this, _x, _y, _rotation, _causer, _instigator, _data) || this;
            _this.detonationTimer = 90;
            _this.bZeroVelocityOnHit = false;
            _this.firearm = _this.data["firearm"];
            _this.damage = _this.firearm.getDamage();
            if (_this.data["damageMultiplier"] != undefined) {
                _this.damage *= _this.data["damageMultiplier"];
            }
            _this.speed = _data["speed"] ? _data["speed"] : 50;
            _this.grenade = _this.game.add.image(0, 0, "atlas_effects", "projectile_grenade");
            _this.add(_this.grenade);
            DinogenArena.GameUtil.GetGameState().addToWorld(_this);
            _this.grenade.anchor.set(0.5, 0.5);
            _this.createBody();
            DinogenArena.GameUtil.ApplyForce(_this.primaryBody, Math.cos(_this.rotation) * _this.speed, Math.sin(_this.rotation) * _this.speed);
            _this.primaryBody.rotateLeft(Math.random() * 2000);
            _this.setDestroyTimer((_this.detonationTimer / DinogenArena.GameUtil.frameRate) + 1);
            return _this;
        }
        Grenade.prototype.destroy = function () {
            this.grenade = null;
            _super.prototype.destroy.call(this);
        };
        Grenade.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.detonationTimer > 0) {
                this.detonationTimer--;
            }
            else {
                DinogenArena.GameUtil.GetGameState().createExplosion(this.x, this.y, 225, this.instigator, this, this.data);
                this.triggerDestroy();
            }
        };
        Grenade.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            DinogenArena.SoundManager.PlayWorldSound("physics_grenade_bounce", this.x, this.y);
        };
        Grenade.prototype.createBody = function () {
            var grenadeBody = new Phaser.Physics.Box2D.Body(this.game, null, this.x, this.y, 1);
            grenadeBody.setRectangleFromSprite(this.grenade);
            grenadeBody.dynamic = true;
            grenadeBody.rotation = this.rotation;
            grenadeBody.friction = 1;
            grenadeBody.restitution = 0.8;
            grenadeBody.linearDamping = 3;
            grenadeBody.angularDamping = 3;
            grenadeBody.bullet = true;
            grenadeBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_PROJECTILES);
            grenadeBody.setCollisionMask(DinogenArena.GameState.MASK_PROJECTILES);
            this.addBody(grenadeBody);
            this.primaryBody = grenadeBody;
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
        };
        return Grenade;
    }(ProjectileBase));
    DinogenArena.Grenade = Grenade;
    var Rocket = /** @class */ (function (_super) {
        __extends(Rocket, _super);
        function Rocket(_x, _y, _rotation, _causer, _instigator, _data) {
            var _this = _super.call(this, _x, _y, _rotation, _causer, _instigator, _data) || this;
            if (_this.firearm) {
                _this.damage = _this.firearm.getDamage();
            }
            else {
                _this.damage = _this.data["damage"];
            }
            if (_this.data["damageMultiplier"] != undefined) {
                _this.damage *= _this.data["damageMultiplier"];
            }
            _this.speed = 1200;
            _this.rocket = _this.game.add.image(0, 0, "atlas_effects", "projectile_rocket");
            _this.add(_this.rocket);
            DinogenArena.GameUtil.GetGameState().addToWorld(_this);
            _this.rocket.anchor.set(0.5, 0.5);
            _this.createBody();
            _this.primaryBody.velocity.x = Math.cos(_this.rotation) * _this.speed;
            _this.primaryBody.velocity.y = Math.sin(_this.rotation) * _this.speed;
            return _this;
        }
        Rocket.prototype.destroy = function () {
            this.rocket = null;
            _super.prototype.destroy.call(this);
        };
        Rocket.prototype.tick = function () {
            _super.prototype.tick.call(this);
            DinogenArena.GameUtil.GetGameState().createSmoke(this.x, this.y, this.rotation, Smoke.SMOKE_DEFAULT);
        };
        Rocket.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            DinogenArena.SoundManager.PlayWorldSound("physics_flesh_impact_bullet", this.x, this.y, 3);
            DinogenArena.GameUtil.GetGameState().createExplosion(this.x, this.y, 200, this.instigator, this, this.data);
            this.triggerDestroy();
        };
        Rocket.prototype.createBody = function () {
            var rocketBody = new Phaser.Physics.Box2D.Body(this.game, null, this.x, this.y, 1);
            rocketBody.setCircle(14);
            //var fixture = rocketBody.setRectangle(12, 12);
            rocketBody.dynamic = true;
            rocketBody.rotation = this.rotation;
            rocketBody.friction = 0;
            rocketBody.bullet = true;
            rocketBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_PROJECTILES);
            rocketBody.setCollisionMask(DinogenArena.GameState.MASK_PROJECTILES);
            this.addBody(rocketBody);
            this.primaryBody = rocketBody;
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
        };
        return Rocket;
    }(ProjectileBase));
    DinogenArena.Rocket = Rocket;
    var Arrow = /** @class */ (function (_super) {
        __extends(Arrow, _super);
        function Arrow(_x, _y, _rotation, _causer, _instigator, _data) {
            var _this = _super.call(this, _x, _y, _rotation, _causer, _instigator, _data) || this;
            _this.firearm = _this.data["firearm"];
            _this.damage = _this.firearm.getDamage();
            if (_this.data["damageMultiplier"] != undefined) {
                _this.damage *= _this.data["damageMultiplier"];
            }
            _this.speed = 5000;
            _this.arrow = _this.game.add.image(0, 0, "atlas_effects", "projectile_arrow");
            _this.arrow.anchor.set(0.5, 0.5);
            _this.addChild(_this.arrow);
            _this.createBody();
            _this.primaryBody.velocity.x = Math.cos(_this.rotation) * _this.speed;
            _this.primaryBody.velocity.y = Math.sin(_this.rotation) * _this.speed;
            DinogenArena.SoundManager.PlayWorldSound("physics_bullet_flyby", _this.x, _this.y, 5, 0.5);
            return _this;
        }
        Arrow.prototype.destroy = function () {
            this.arrow = null;
            _super.prototype.destroy.call(this);
        };
        Arrow.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            var bCollide = true;
            if (_obj instanceof Actor) {
                var actor = _obj;
                var pawn = actor;
                if (pawn) {
                    var causerPawn = this.causer;
                    DinogenArena.SoundManager.PlayWorldSound("physics_flesh_impact_bullet", this.x, this.y, 3);
                    if (causerPawn) {
                        if (causerPawn.getTeam() == pawn.getTeam()) {
                            bCollide = false;
                        }
                    }
                }
                if (bCollide) {
                    if (this.firearm) {
                        if (pawn instanceof Dinosaur) {
                            this.damage *= 1.25;
                        }
                        actor.takeDamage(this.damage, this.instigator, this, DinogenArena.DamageType.DAMAGE_TYPE_BULLET);
                    }
                }
            }
            DinogenArena.GameUtil.GetGameState().createArrowAmmo(null, this.x, this.y, this.rotation);
            this.triggerDestroy();
        };
        Arrow.prototype.createBody = function () {
            var arrowBody = new Phaser.Physics.Box2D.Body(this.game, null, this.x, this.y, 1);
            //arrowBody.setCircle(4);
            arrowBody.setRectangle(4, 4);
            arrowBody.dynamic = true;
            arrowBody.rotation = this.rotation;
            arrowBody.friction = 0;
            arrowBody.bullet = true;
            arrowBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_PROJECTILES);
            arrowBody.setCollisionMask(DinogenArena.GameState.MASK_PROJECTILES);
            this.addBody(arrowBody);
            this.primaryBody = arrowBody;
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
        };
        return Arrow;
    }(ProjectileBase));
    DinogenArena.Arrow = Arrow;
    var Bullet = /** @class */ (function (_super) {
        __extends(Bullet, _super);
        function Bullet(_x, _y, _rotation, _causer, _instigator, _data) {
            var _this = _super.call(this, _x, _y, _rotation, _causer, _instigator, _data) || this;
            if (_this.firearm) {
                _this.damage = _this.firearm.getDamage();
            }
            else {
                _this.damage = _this.data["damage"];
            }
            if (_this.data["damageMultiplier"] != undefined) {
                _this.damage *= _this.data["damageMultiplier"];
            }
            //this.setDestroyTimer(1);
            _this.speed = DinogenArena.WilkinUtil.GenerateRandomNumber(4000, 5500);
            _this.bullet = _this.game.add.image(0, 0, "atlas_effects", "projectile_bullet");
            _this.addChild(_this.bullet);
            _this.bullet.anchor.set(0.5, 0.5);
            _this.bullet.scale.x = (DinogenArena.WilkinUtil.GenerateRandomNumber(10, 15) * 0.1);
            if (_this.data["bBig"] == true) {
                _this.bullet.scale.y = DinogenArena.WilkinUtil.GenerateRandomNumber(2, 4);
                _this.bullet.alpha = DinogenArena.WilkinUtil.GenerateRandomNumber(5, 10) * 0.1;
            }
            else {
                _this.bullet.alpha = DinogenArena.WilkinUtil.GenerateRandomNumber(1, 10) * 0.1;
            }
            DinogenArena.GameUtil.GetGameState().addToWorld(_this);
            _this.createBody();
            _this.primaryBody.velocity.x = Math.cos(_this.rotation) * _this.speed;
            _this.primaryBody.velocity.y = Math.sin(_this.rotation) * _this.speed;
            //GameUtil.ApplyForce(this.primaryBody, Math.cos(this.rotation) * this.speed, Math.sin(this.rotation) * this.speed);
            if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 4) == 1) {
                DinogenArena.SoundManager.PlayWorldSound("physics_bullet_flyby", _this.x, _this.y, 5, 0.5);
            }
            return _this;
        }
        Bullet.prototype.destroy = function () {
            this.bullet = null;
            _super.prototype.destroy.call(this);
        };
        Bullet.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            var bApplyDamage = true;
            var sfx = "physics_concrete_impact_bullet";
            var impactType = ImpactEffect.TYPE_GENERIC;
            if (_obj instanceof Actor) {
                var actor = _obj;
                var pawn = actor instanceof Pawn ? actor : null;
                if (pawn) {
                    sfx = "physics_flesh_impact_bullet";
                    impactType = ImpactEffect.TYPE_BLOOD;
                    var causerPawn = this.causer instanceof Pawn ? this.causer : null;
                    if (causerPawn) {
                        if (causerPawn.getTeam() == pawn.getTeam()) {
                            bApplyDamage = false;
                        }
                    }
                }
                if (bApplyDamage) {
                    actor.takeDamage(this.damage, this.instigator, this, DinogenArena.DamageType.DAMAGE_TYPE_BULLET);
                }
            }
            DinogenArena.GameUtil.GetGameState().createImpactEffect(this.x, this.y, (this.rotation + (180 * DinogenArena.WilkinUtil.TO_RADIANS)), impactType);
            DinogenArena.SoundManager.PlayWorldSound(sfx, this.x, this.y, 3);
            this.triggerDestroy();
        };
        Bullet.prototype.createBody = function () {
            var bulletBody = new Phaser.Physics.Box2D.Body(this.game, null, this.x, this.y, 0);
            var fixture = bulletBody.setCircle(4);
            //var fixture = bulletBody.setRectangle(6, 6);
            bulletBody.dynamic = true;
            bulletBody.rotation = this.rotation;
            bulletBody.friction = 0;
            bulletBody.bullet = true;
            fixture.SetDensity(0);
            bulletBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_PROJECTILES);
            bulletBody.setCollisionMask(DinogenArena.GameState.MASK_PROJECTILES);
            this.addBody(bulletBody);
            this.primaryBody = bulletBody;
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
            //this.primaryBody.setCategoryContactCallback(GameState.CATEGORY_PROJECTILES, this.bodyCallback, this);
            //this.primaryBody.setCategoryContactCallback(GameState.CATEGORY_ITEMS, this.bodyCallback, this);
        };
        return Bullet;
    }(ProjectileBase));
    DinogenArena.Bullet = Bullet;
    var Shell = /** @class */ (function (_super) {
        __extends(Shell, _super);
        function Shell(_x, _y, _rotation, _type) {
            var _this = _super.call(this, null, _x, _y, _rotation) || this;
            _this.shellType = _type;
            _this.shell = _this.game.add.sprite(0, 0, "atlas_objects", "shell_" + _type);
            _this.shell.anchor.set(0.5, 0.5);
            _this.addChild(_this.shell);
            DinogenArena.GameUtil.GetGameState().addToWorld(_this, DinogenArena.GameState.INDEX_BOTTOM);
            _this.createBody();
            _this.setDestroyTimer(DinogenArena.WilkinUtil.GenerateRandomNumber(3, 5));
            _this.enableDestroyTimer();
            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                _this.playSound();
            }
            return _this;
        }
        Shell.prototype.destroy = function () {
            this.shell = null;
            DinogenArena.GameUtil.GetGameState().removeShell(this);
            _super.prototype.destroy.call(this);
        };
        Shell.prototype.playSound = function () {
            var sfx = this.shellType == DinogenArena.Firearm.ROUND_12G ? "shotgun" : "generic";
            DinogenArena.SoundManager.PlayWorldSound("physics_shell_" + sfx, this.x, this.y, 3, 1);
        };
        Shell.prototype.createBody = function () {
            var shellBody = new Phaser.Physics.Box2D.Body(this.game, this.shell, this.x, this.y, 0);
            //shellBody.setCircle(12, 0, 0);
            //shellBody.setRectangle(14, 8);
            shellBody.setRectangleFromSprite(this.shell);
            shellBody.rotation = this.rotation;
            shellBody.dynamic = true;
            shellBody.linearDamping = 8;
            shellBody.angularDamping = 6;
            shellBody.friction = 1;
            shellBody.restitution = 1;
            shellBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_SHELLS);
            shellBody.setCollisionMask(DinogenArena.GameState.MASK_SHELLS);
            var rad = this.rotation + ((DinogenArena.WilkinUtil.GenerateRandomNumber(-8, 8) + 90) * DinogenArena.WilkinUtil.TO_RADIANS);
            var speed = DinogenArena.WilkinUtil.GenerateRandomNumber(10, 15);
            DinogenArena.GameUtil.ApplyForce(shellBody, Math.cos(rad) * speed, Math.sin(rad) * speed);
            shellBody.angularVelocity = DinogenArena.WilkinUtil.GenerateRandomNumber(-12, 12);
            this.addBody(shellBody);
            this.primaryBody = shellBody;
        };
        return Shell;
    }(WorldObject));
    DinogenArena.Shell = Shell;
    var Actor = /** @class */ (function (_super) {
        __extends(Actor, _super);
        function Actor(_id, _x, _y, _rotation) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.desiredHealthBarAlpha = 0.8;
            _this.healthMax = 100;
            _this.health = _this.healthMax;
            _this.damageMultiplier = 1;
            _this.bCanDamage = true;
            _this.setHealthMax(100);
            return _this;
        }
        Actor.prototype.destroy = function () {
            if (this.healthBar) {
                this.healthBar.clear();
                this.healthBar.destroy();
                this.healthBar = null;
            }
            this.healthBarBody = null;
            this.drops = null;
            _super.prototype.destroy.call(this);
        };
        Actor.prototype.setDrops = function (_drops) {
            this.drops = _drops;
        };
        Actor.prototype.createDrops = function () {
            if (this.drops) {
                for (var i = 0; i < this.drops.length; i++) {
                    var drop = this.drops[i];
                    if (Math.random() <= drop["chance"]) {
                        var dropObj;
                        if (drop["type"] == DinogenArena.DropsManager.TYPE_MONEY) {
                            var moneyValue = DinogenArena.WilkinUtil.GenerateRandomNumber(drop["valueMin"], drop["valueMax"]);
                            dropObj = DinogenArena.GameUtil.GetGameState().createMoneyDrop(null, this.x, this.y, this.rotation, moneyValue);
                        }
                        else if (drop["type"] == DinogenArena.DropsManager.TYPE_WEAPON) {
                            var firearm = DinogenArena.InventoryManager.GetItemById(drop["weaponId"]);
                            firearm.setAmmo(Math.round(Math.random() * firearm.getAmmo()));
                            dropObj = DinogenArena.GameUtil.GetGameState().createDroppedItem(null, this.x, this.y, this.rotation, firearm);
                        }
                        if (dropObj) {
                            if (dropObj.primaryBody) {
                                DinogenArena.GameUtil.ApplyForce(dropObj.primaryBody, DinogenArena.WilkinUtil.GenerateRandomNumber(-32, 32), DinogenArena.WilkinUtil.GenerateRandomNumber(-32, 32));
                                dropObj.primaryBody.angularVelocity = DinogenArena.WilkinUtil.GenerateRandomNumber(-32, 32);
                            }
                        }
                    }
                }
            }
            else {
                console.warn("No drops");
            }
        };
        Actor.prototype.setOnDeathTriggerId = function (_val) {
            this.onDeathTriggerId = _val;
        };
        Actor.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.healthBar) {
                //this.healthBar.rotation = -this.rotation;
                if (this.healthBarBody) {
                    this.healthBar.x = this.healthBarBody.x;
                    this.healthBar.y = this.healthBarBody.y;
                }
                else {
                    this.healthBar.x = this.x;
                    this.healthBar.y = this.y;
                }
            }
        };
        Actor.prototype.onGamePaused = function () {
            _super.prototype.onGamePaused.call(this);
            for (var i = 0; i < this.bodies.length; i++) {
                this.bodies[i].setZeroVelocity();
                this.bodies[i].setZeroRotation();
            }
        };
        Actor.prototype.createHealthBar = function () {
            if (this.healthBar) {
                this.healthBar.destroy();
            }
            this.healthBar = this.game.add.graphics();
            this.healthBar.alpha = this.desiredHealthBarAlpha;
            this.healthBar.rotation = -90 * DinogenArena.WilkinUtil.TO_RADIANS;
            //this.add(this.healthBar);
            DinogenArena.GameUtil.GetGameState().addToWorld(this.healthBar, DinogenArena.GameState.INDEX_BOTTOM);
        };
        Actor.prototype.setHealthMax = function (_val) {
            this.healthMax = _val;
            this.giveFullHealth();
        };
        Actor.prototype.giveFullHealth = function () {
            if (this.isAlive()) {
                this.health = this.healthMax;
                this.addHealth(0);
            }
        };
        Actor.prototype.suicide = function () {
            this.die(this.getHealth(), null, null, null);
        };
        Actor.prototype.takeDamage = function (_damageAmount, _instigator, _causer, _damageType) {
            this.onTakeDamage(_damageAmount, _instigator, _causer, _damageType);
            return _damageAmount;
        };
        Actor.prototype.onTakeDamage = function (_damageAmount, _instigator, _causer, _damageType) {
            if (!this.isAlive()) {
                return;
            }
            if (!DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                return;
            }
            var realDamage = _damageAmount * this.damageMultiplier;
            /*
            if (_damageType == DamageType.DAMAGE_TYPE_EXPLOSIVE)
            {
                if (this.primaryBody)
                {
                    var force: number = _damageAmount * 15;
                    var distX: number = this.x - _causer.x;
                    var distY: number = this.y - _causer.y;
                    var rad: number = Math.atan2(distY, distX);
                    var vx: number = Math.cos(rad) * force;
                    var vy: number = Math.sin(rad) * force;
                    this.primaryBody.applyForce(vx, vy);
                }
            }
            */
            if (this.canBeDamaged()) {
                this.addHealth(-realDamage);
            }
            if (this.health <= 0) {
                this.die(realDamage, _instigator, _causer, _damageType);
            }
        };
        Actor.prototype.die = function (_killingDamage, _killer, _causer, _damageType) {
            this.onDeath(_killingDamage, _killer, _causer, _damageType);
        };
        Actor.prototype.onDeath = function (_killingDamage, _instigator, _causer, _damageType) {
            this.health = 0;
            if (this.healthBar) {
                this.healthBar.clear();
            }
            var campaign = DinogenArena.GameUtil.GetGameState().gameMode.getCampaign();
            if (campaign) {
                this.createDrops();
                if (this.onDeathTriggerId) {
                    campaign.dispatchTrigger({ id: this.onDeathTriggerId });
                }
            }
        };
        Actor.prototype.addHealth = function (_val) {
            this.health = Math.max(0, Math.min(this.health + _val, this.healthMax));
        };
        Actor.prototype.getHealthMax = function () {
            return this.healthMax;
        };
        Actor.prototype.getHealth = function () {
            return this.health;
        };
        Actor.prototype.getHealthPercent = function () {
            return this.health / this.healthMax;
        };
        Actor.prototype.canDamage = function () {
            return this.bCanDamage;
        };
        Actor.prototype.isAlive = function () {
            return this.health > 0;
        };
        Actor.prototype.revive = function () {
            var bWasDead = !this.isAlive();
            this.health = this.healthMax;
            this.addHealth(0);
            this.onRevive();
        };
        Actor.prototype.onRevive = function () {
            return;
        };
        Actor.prototype.setDamageMultiplier = function (_val) {
            this.damageMultiplier = _val;
        };
        Actor.prototype.getDamageMultiplier = function () {
            return this.damageMultiplier;
        };
        Actor.prototype.canBeDamaged = function () {
            return this.bCanDamage;
        };
        return Actor;
    }(WorldObject));
    DinogenArena.Actor = Actor;
    var Pawn = /** @class */ (function (_super) {
        __extends(Pawn, _super);
        function Pawn(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.speed = 10;
            _this.speedMultiplier = 1;
            _this.team = -1;
            _this.lookTarget = 0;
            _this.lookSpeed = 0.25;
            _this.regenTimerMax = 1;
            _this.regenTimer = _this.regenTimerMax;
            _this.spawnProtectTimer = 0;
            _this.footprintTimer = 0;
            _this.footprintTimerMax = 120;
            _this.stepTimer = 0;
            _this.stepTimerMax = 15;
            _this.stepSoundId = "char_step";
            _this.bPlayStepSound = true;
            _this.bRegenHealth = true;
            _this.bWantsToMove = false;
            _this.bTargetable = true;
            _this.bInHillZone = false;
            _this.bCheckFootprints = true;
            _this.minimapIconId = "minimap_pawn_generic";
            _this.modifiers = {};
            _this.modifiers["move_speed"] = 1;
            _this.modifiers["regen_speed"] = 1;
            _this.modifiers["view_distance"] = 1;
            _this.modifiers["damage_inflict_bullet"] = 1;
            _this.modifiers["damage_inflict_dino"] = 1;
            _this.modifiers["damage_receive_bullet"] = 1;
            _this.modifiers["damage_receive_dino"] = 1;
            _this.controller = _controller;
            if (_this.controller) {
                _this.controller.possess(_this);
            }
            if (_this.isPlayer()) {
                _this.lookSpeed = 1;
            }
            _this.setRegenTimerMax(3);
            _this.setTeam(-1);
            _this.setSpawnProtectTimer(DinogenArena.GameUtil.GetGameState().gameMode.bUseSpawnProtection ? 2 : 0);
            _this.setDestroyTimer(DinogenArena.WilkinUtil.GenerateRandomNumber(3, 5));
            var gfx = _this.game.add.graphics();
            gfx.beginFill(0xFF00FF, 0);
            gfx.drawRect(0, 0, 32, 32);
            _this.hitSprite = _this.game.add.sprite(0, 0, gfx.generateTexture());
            gfx.destroy();
            _this.hitSprite.anchor.set(0.5, 0.5);
            _this.add(_this.hitSprite);
            _this.setHitSpriteSize(42);
            _this.rotation = DinogenArena.WilkinUtil.GenerateRandomNumber(-180, 180) * DinogenArena.WilkinUtil.TO_RADIANS;
            return _this;
        }
        Pawn.prototype.destroy = function () {
            delete this.modifiers;
            this.modifiers = null;
            this.stepSoundId = null;
            this.footprintKey = null;
            this.onUnPossess();
            _super.prototype.destroy.call(this);
        };
        Pawn.prototype.setHitSpriteSize = function (_val) {
            if (_val === void 0) { _val = 32; }
            if (this.hitSprite) {
                this.hitSprite.width = this.hitSprite.height = _val;
            }
        };
        Pawn.prototype.isBig = function () {
            return this.referenceScale > 0.5;
        };
        Pawn.prototype.suicide = function () {
            this.die(this.getHealth(), this.getController(), this, DinogenArena.DamageType.DAMAGE_TYPE_WORLD);
        };
        Pawn.prototype.getKillReward = function () {
            return 1;
        };
        Pawn.prototype.setWantsToMove = function (_bVal) {
            this.bWantsToMove = _bVal;
        };
        Pawn.prototype.setLookSpeed = function (_val) {
            this.lookSpeed = _val;
        };
        Pawn.prototype.isPlayerAlly = function () {
            return this.team == DinogenArena.GameUtil.GetGameState().getPlayerTeam(); //!this.isPlayer()
        };
        Pawn.prototype.setSpawnProtectTimer = function (_seconds) {
            if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                this.spawnProtectTimer = _seconds * 60;
            }
            else {
                this.spawnProtectTimer = 0;
            }
        };
        Pawn.prototype.setRegenHealth = function (_bVal) {
            this.bRegenHealth = _bVal;
        };
        Pawn.prototype.setRegenTimerMax = function (_seconds) {
            this.regenTimerMax = _seconds * 60;
        };
        Pawn.prototype.setRegenModifier = function (_val) {
            this.modifiers["regen_max"] = _val;
            this.setRegenTimerMax(3 * _val);
        };
        Pawn.prototype.setHealthModifier = function (_val) {
            this.modifiers["health"] = _val;
            this.giveFullHealth();
            this.setHealthMax(this.healthMax * _val);
        };
        Pawn.prototype.setInHillZone = function () {
            this.bInHillZone = true;
        };
        Pawn.prototype.isInHillZone = function () {
            return this.bInHillZone;
        };
        Pawn.prototype.tick = function () {
            _super.prototype.tick.call(this);
            this.bInHillZone = false;
            if (!DinogenArena.GameUtil.GetGameState().gameMode.matchHasEnded()) {
                if (this.isAlive()) {
                    if (this.spawnProtectTimer > 0) {
                        this.spawnProtectTimer--;
                    }
                    if (this.healthBar) {
                        this.healthBar.alpha = this.spawnProtectTimer > 0 ? 0.2 : this.desiredHealthBarAlpha;
                    }
                    if (this.bRegenHealth) {
                        if (this.health < this.healthMax) {
                            if (this.regenTimer > 0) {
                                this.regenTimer--;
                            }
                            else {
                                this.addHealth(0.5 * this.modifiers["regen_speed"]);
                            }
                        }
                    }
                    if (this.bSetRotationFromPrimaryBody) {
                        var bodyAngle = this.primaryBody.angle;
                        var desiredAngle = this.lookTarget;
                        var turnSpeed = 500 / this.primaryBody.mass;
                        var target = this.lookTarget - this.rotation;
                        if (target > 180 * DinogenArena.WilkinUtil.TO_RADIANS) {
                            target -= 360 * DinogenArena.WilkinUtil.TO_RADIANS;
                        }
                        else if (target < -180 * DinogenArena.WilkinUtil.TO_RADIANS) {
                            target += 360 * DinogenArena.WilkinUtil.TO_RADIANS;
                        }
                        this.primaryBody.rotateRight(target * (turnSpeed * this.lookSpeed));
                    }
                    else {
                        var target = this.rotation - this.lookTarget;
                        if (target > 180 * DinogenArena.WilkinUtil.TO_RADIANS) {
                            target -= 360 * DinogenArena.WilkinUtil.TO_RADIANS;
                        }
                        else if (target < -180 * DinogenArena.WilkinUtil.TO_RADIANS) {
                            target += 360 * DinogenArena.WilkinUtil.TO_RADIANS;
                        }
                        this.rotation -= target * this.lookSpeed;
                        //this.rotation -= (this.rotation - this.lookTarget) * this.lookSpeed;
                    }
                    this.checkBloodDecal();
                    if (this.footprintTimer > 0) {
                        if (this.isMoving()) {
                            if (this.footprintTimer != this.footprintTimerMax && this.footprintTimer % 10 == 0) {
                                this.createFootprint();
                            }
                            this.footprintTimer--;
                        }
                    }
                    if (this.bPlayStepSound) {
                        if (this.isMoving()) {
                            if (this.stepTimer <= 0) {
                                DinogenArena.SoundManager.PlayWorldSound(this.stepSoundId, this.x, this.y, 4, 0.5);
                                this.stepTimer = this.stepTimerMax;
                            }
                            else {
                                this.stepTimer--;
                            }
                        }
                    }
                }
            }
        };
        Pawn.prototype.checkBloodDecal = function () {
            if (!this.hitSprite) {
                return;
            }
            if (!this.bCheckFootprints) {
                return;
            }
            var decals = DinogenArena.GameUtil.GetGameState().decals;
            var boundsB = this.hitSprite.getBounds();
            for (var i = 0; i < decals.length; i++) {
                var decal = decals[i];
                if (decal.frameName.indexOf("decal_blood") >= 0) {
                    var boundsA = decal.getBounds();
                    var bHit = Phaser.Rectangle.intersects(boundsA, boundsB);
                    if (bHit) {
                        this.footprintTimer = this.footprintTimerMax;
                        return;
                    }
                }
            }
        };
        Pawn.prototype.createFootprint = function () {
            if (!this.footprintKey) {
                return;
            }
            if (!DinogenArena.GameUtil.GetGameState().isOnScreen(this.x, this.y)) {
                return;
            }
            var distX = this.primaryBody.velocity.x;
            var distY = this.primaryBody.velocity.y;
            var angle = Math.atan2(distY, distX);
            var rot = angle + (DinogenArena.WilkinUtil.GenerateRandomNumber(-8, 8) * DinogenArena.WilkinUtil.TO_RADIANS);
            var alphaMult = 0.4;
            DinogenArena.GameUtil.GetGameState().createFootprint(this.x + DinogenArena.WilkinUtil.GenerateRandomNumber(-6, 6), this.y + DinogenArena.WilkinUtil.GenerateRandomNumber(-6, 6), rot, (this.footprintTimer / this.footprintTimerMax) * alphaMult, this.footprintKey);
        };
        Pawn.prototype.lookAt = function (_x, _y) {
            var distX = _x - this.x;
            var distY = _y - this.y;
            var angle = Math.atan2(distY, distX);
            this.lookTarget = angle;
            return angle;
        };
        Pawn.prototype.createDeathBody = function () {
            this.destroyAllBodies();
            DinogenArena.SoundManager.PlayWorldSound("physics_body_fall", this.x, this.y);
            return;
        };
        Pawn.prototype.onDeath = function (_killingDamage, _instigator, _causer, _damageType) {
            _super.prototype.onDeath.call(this, _killingDamage, _instigator, _causer, _damageType);
            this.setState(Pawn.STATE_DEAD);
            if (this.controller) {
                this.controller.onPawnDeath(_instigator, _causer, _damageType);
            }
            if (_instigator) {
                _instigator.onPawnKill(this.controller, _causer, _damageType);
            }
            this.createBloodDecal(_causer);
            this.enableDestroyTimer();
            if (this.primaryBody) {
                var force = Math.max(100, Math.min(_killingDamage * 8, 300)) * (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_EXPLOSIVE ? 2 : 1);
                var rad = (_causer && _causer.primaryBody) ? _causer.primaryBody.rotation : 0;
                var vx = Math.cos(rad) * force;
                var vy = Math.sin(rad) * force;
                DinogenArena.GameUtil.ApplyForce(this.primaryBody, vx, vy);
                this.primaryBody.rotateLeft(DinogenArena.WilkinUtil.GenerateRandomNumber(-force, force));
            }
        };
        Pawn.prototype.addHealth = function (_val) {
            _super.prototype.addHealth.call(this, _val);
            this.updateHUD();
            if (this.healthBar) {
                var radius = 32;
                if (this.primaryBody) {
                    radius = 50 * this.referenceScale;
                }
                var size = 360 * DinogenArena.WilkinUtil.TO_RADIANS;
                this.healthBar.clear();
                this.healthBar.lineStyle(8, 0x000000, 0.2);
                this.healthBar.arc(0, 0, radius, 0, size, false);
                this.healthBar.lineStyle(4, DinogenArena.GameModeManager.GetColourForTeam(this.team), 1);
                this.healthBar.arc(0, 0, radius, 0, size * this.getHealthPercent(), false);
                this.healthBar.endFill();
            }
        };
        Pawn.prototype.onTakeDamage = function (_damageAmount, _instigator, _causer, _damageType) {
            if (!this.modifiers) {
                DinogenArena.GameUtil.Alert("Invalid modifiers object for pawn");
                return;
            }
            var realDamage = _damageAmount;
            if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_DINOSAUR) {
                realDamage *= this.modifiers["damage_receive_dino"];
            }
            else if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_BULLET) {
                realDamage *= this.modifiers["damage_receive_bullet"];
            }
            else {
                //realDamage *= this.modifiers["damage_receive"]
            }
            _super.prototype.onTakeDamage.call(this, realDamage, _instigator, _causer, _damageType);
            if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_MELEE || DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                this.createBloodDecal(_damageType == DinogenArena.DamageType.DAMAGE_TYPE_EXPLOSIVE ? null : _causer);
            }
            if (this.bRegenHealth) {
                this.regenTimer = this.regenTimerMax;
            }
            if (this.controller) {
                this.controller.onPawnTakeDamage(realDamage, _causer);
            }
        };
        Pawn.prototype.createBloodDecal = function (_causer) {
            var decalX = this.x + DinogenArena.WilkinUtil.GenerateRandomNumber(-10, 10);
            var decalY = this.y + DinogenArena.WilkinUtil.GenerateRandomNumber(-10, 10);
            if (_causer) {
                decalX = _causer.x;
                decalY = _causer.y;
            }
            DinogenArena.GameUtil.GetGameState().createDecal(decalX, decalY, this.rotation, "blood");
        };
        Pawn.prototype.updateHUD = function () {
            if (this.getPlayerController() != null) {
                this.getPlayerController().updateHUD();
            }
        };
        Pawn.prototype.stopAllActions = function () {
            this.bWantsToMove = false;
        };
        Pawn.prototype.setState = function (_val) {
            if (!this.game) {
                return;
            }
            if (_val == Pawn.STATE_DEAD) {
                this.destroyAllBodies();
                if (DinogenArena.PlayerManager.CurrentProfile.settings.bDeadBodies) {
                    this.queueDeadBody();
                }
            }
        };
        Pawn.prototype.queueDeadBody = function () {
            this.createDeathBody();
            if (!DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                if (this.primaryBody) {
                    for (var i = 0; i < this.bodies.length; i++) {
                        var bod = this.bodies[i];
                        bod.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
                        bod.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
                    }
                }
            }
        };
        Pawn.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                DinogenArena.SoundManager.PlayWorldSound("physics_body_hit", this.x, this.y, 3, DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) * 0.1);
            }
        };
        Pawn.prototype.moveForward = function (_multiplier) {
            if (_multiplier === void 0) { _multiplier = 1; }
            var speed = this.getSpeed() * _multiplier;
            var rad = this.rotation;
            var vx = Math.cos(rad) * speed;
            var vy = Math.sin(rad) * speed;
            DinogenArena.GameUtil.ApplyForce(this.primaryBody, vx, vy);
            this.bWantsToMove = true;
        };
        Pawn.prototype.moveBackward = function (_multiplier) {
            if (_multiplier === void 0) { _multiplier = 1; }
            var speed = this.getSpeed() * _multiplier;
            var rad = this.rotation;
            var vx = Math.cos(rad) * -speed;
            var vy = Math.sin(rad) * -speed;
            DinogenArena.GameUtil.ApplyForce(this.primaryBody, vx, vy);
            this.bWantsToMove = true;
        };
        Pawn.prototype.moveLeft = function (_multiplier) {
            if (_multiplier === void 0) { _multiplier = 1; }
            var speed = this.getSpeed() * _multiplier;
            var rad = this.rotation - (90 * DinogenArena.WilkinUtil.TO_RADIANS);
            var vx = Math.cos(rad) * speed;
            var vy = Math.sin(rad) * speed;
            DinogenArena.GameUtil.ApplyForce(this.primaryBody, vx, vy);
            this.bWantsToMove = true;
        };
        Pawn.prototype.moveRight = function (_multiplier) {
            if (_multiplier === void 0) { _multiplier = 1; }
            var speed = this.getSpeed() * _multiplier;
            var rad = this.rotation + (90 * DinogenArena.WilkinUtil.TO_RADIANS);
            var vx = Math.cos(rad) * speed;
            var vy = Math.sin(rad) * speed;
            DinogenArena.GameUtil.ApplyForce(this.primaryBody, vx, vy);
            this.bWantsToMove = true;
        };
        Pawn.prototype.move = function (_vx, _vy) {
            if (this.isPlayer()) {
                if (this.primaryBody.x + _vx < 0) {
                    return;
                }
                else if (this.primaryBody.x + _vx > this.game.world.width) {
                    return;
                }
                if (this.primaryBody.y + _vy < 0) {
                    return;
                }
                else if (this.primaryBody.y + _vy > this.game.world.height) {
                    return;
                }
            }
            DinogenArena.GameUtil.ApplyForce(this.primaryBody, _vx, _vy);
            this.bWantsToMove = true;
        };
        Pawn.prototype.moveToPoint = function (_x, _y, _multiplier) {
            if (_multiplier === void 0) { _multiplier = 1; }
            var distX = _x - this.x;
            var distY = _y - this.y;
            var rad = Math.atan2(distY, distX);
            var pawnSpeed = this.getSpeed() * _multiplier;
            this.move(Math.cos(rad) * pawnSpeed, Math.sin(rad) * pawnSpeed);
        };
        Pawn.prototype.isMoving = function () {
            if (this.primaryBody) {
                var velocity = this.primaryBody.data.GetLinearVelocity();
                return velocity.Length() > 2;
            }
            return this.bWantsToMove;
        };
        Pawn.prototype.getSpeed = function () {
            return (this.speed * this.speedMultiplier) * this.modifiers["move_speed"];
        };
        Pawn.prototype.onPossess = function (_controller) {
            this.controller = _controller;
            var bIsPlayer = (_controller instanceof DinogenArena.PlayerController);
            if (!bIsPlayer) {
                if (DinogenArena.GameUtil.GetGameState().gameMode.isCustom() || this instanceof Character) {
                    this.createHealthBar();
                }
            }
            this.updateHUD();
        };
        Pawn.prototype.onUnPossess = function () {
            if (this.controller && this.controller.getPawn() == this) {
                this.controller.unPossess();
            }
            this.controller = null;
        };
        Pawn.prototype.getController = function () {
            return this.controller;
        };
        Pawn.prototype.getPlayerController = function () {
            return (this.controller instanceof DinogenArena.PlayerController) ? this.controller : null;
        };
        Pawn.prototype.getAIController = function () {
            return (this.controller instanceof DinogenArena.AIController) ? this.controller : null;
        };
        Pawn.prototype.isPlayer = function () {
            return this.id == "pawn_player";
        };
        Pawn.prototype.setTeam = function (_team) {
            this.team = _team;
            if (this.controller) {
                this.controller.onPawnSetTeam(_team);
            }
            DinogenArena.GameUtil.GetGameState().gameMode.onSetPawnTeam(this);
            this.addHealth(0);
        };
        Pawn.prototype.getTeam = function () {
            return this.team;
        };
        Pawn.prototype.canBeDamaged = function () {
            return _super.prototype.canBeDamaged.call(this) && !this.spawnProtectTimer;
        };
        Pawn.prototype.isTargetable = function () {
            return this.bTargetable;
        };
        Pawn.STATE_DEFAULT = "STATE_DEFAULT";
        Pawn.STATE_DEAD = "STATE_DEAD";
        return Pawn;
    }(Actor));
    DinogenArena.Pawn = Pawn;
    var AutoTurret = /** @class */ (function (_super) {
        __extends(AutoTurret, _super);
        function AutoTurret(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.accuracy = 1;
            _this.ammo = 500;
            _this.damage = 15;
            _this.fireRate = 6;
            _this.fireDelayTimer = 0;
            _this.level = 0;
            _this.range = 500;
            _this.bWantsToFire = false;
            _this.bFireHandler = false;
            _this.bFireDelay = false;
            _this.bCanAttack = true;
            _this.bCanDamage = false;
            _this.bTargetable = false;
            _this.lookSpeed = 0.5;
            _this.createBody();
            _this.upgrade();
            return _this;
        }
        AutoTurret.prototype.destroy = function () {
            this.turret = null;
            this.roundType = null;
            this.fireSoundId = null;
            _super.prototype.destroy.call(this);
        };
        AutoTurret.prototype.canAttack = function () {
            return this.bCanAttack;
        };
        AutoTurret.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.bFireHandler) {
                this.fireHandler();
            }
            if (this.bFireDelay) {
                this.fireDelayHandler();
            }
        };
        AutoTurret.prototype.createBody = function () {
            _super.prototype.createBody.call(this);
            this.turret = this.game.add.sprite(0, 0, "atlas_objects", "turret_gun_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.turret, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(this.turret);
            var turretBody = this.turret.body;
            turretBody.dynamic = true;
            turretBody.x = this.x;
            turretBody.y = this.y;
            turretBody.linearDamping = 1;
            turretBody.friction = 0;
            turretBody.restitution = 1;
            this.addBody(turretBody);
            this.primaryBody = turretBody;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCollisionMask(0);
        };
        AutoTurret.prototype.fireHandler = function () {
            if (!this.bWantsToFire) {
                this.bFireHandler = false;
            }
            else {
                if (this.canFire()) {
                    this.fire();
                    this.startFireDelay(this.fireRate);
                }
            }
        };
        AutoTurret.prototype.startFireDelay = function (_delay) {
            this.bFireDelay = true;
            this.fireDelayTimer = _delay;
        };
        AutoTurret.prototype.fireDelayHandler = function () {
            this.fireDelayTimer--;
            if (this.fireDelayTimer <= 0) {
                this.endFireDelay();
            }
        };
        AutoTurret.prototype.endFireDelay = function () {
            this.bFireDelay = false;
        };
        AutoTurret.prototype.canFire = function () {
            return this.bWantsToFire && !this.bFireDelay && this.hasAmmo();
        };
        AutoTurret.prototype.triggerWeapon = function (_bVal) {
            this.bWantsToFire = _bVal;
            if (_bVal) {
                this.startWeaponFire();
            }
            else {
                this.stopWeaponFire();
            }
        };
        AutoTurret.prototype.startWeaponFire = function () {
            this.bWantsToFire = true;
            this.triggerFire();
        };
        AutoTurret.prototype.stopWeaponFire = function () {
            this.bWantsToFire = false;
        };
        AutoTurret.prototype.triggerFire = function () {
            this.bFireHandler = true;
        };
        AutoTurret.prototype.fire = function () {
            var bulletsPerShot = 1;
            if (this.level == 5) {
                bulletsPerShot = 2;
            }
            else if (this.level == 6) {
                bulletsPerShot = 3;
            }
            for (var i = 0; i < bulletsPerShot; i++) {
                var data = { damage: this.damage };
                var startX = this.x;
                var startY = this.y;
                if (bulletsPerShot > 1) {
                    var addRot = (i == 0 ? 90 : -90) * DinogenArena.WilkinUtil.TO_RADIANS;
                    if (i >= 2) {
                        addRot = 0;
                    }
                    var bulletSpacing = 10;
                    startX = this.x + (Math.cos(this.rotation + addRot) * bulletSpacing);
                    startY = this.y + (Math.sin(this.rotation + addRot) * bulletSpacing);
                }
                DinogenArena.GameUtil.GetGameState().createProjectile(startX, startY, this.rotation + (DinogenArena.WilkinUtil.GenerateRandomNumber(-this.accuracy, this.accuracy) * DinogenArena.WilkinUtil.TO_RADIANS), ProjectileBase.TYPE_BULLET, this, this.controller, data);
                //GameUtil.GetGameState().createShell(this.x, this.y, this.rotation, this.roundType);
                var dist = this.turret.width * 0.5;
                DinogenArena.GameUtil.GetGameState().createMuzzleFlash(this.x + Math.cos(this.rotation) * dist, this.y + Math.sin(this.rotation) * dist, this.rotation);
                DinogenArena.SoundManager.PlayWorldSound(this.fireSoundId, this.x, this.y, 0);
            }
        };
        AutoTurret.prototype.hasAmmo = function () {
            return this.ammo > 0;
        };
        AutoTurret.prototype.upgrade = function () {
            this.level = Math.min(this.level + 1, AutoTurret.LEVEL_MAX);
            if (this.level == 1) {
                this.damage = 30;
                this.fireRate = 6;
                this.accuracy = 4;
                this.roundType = DinogenArena.Firearm.ROUND_9MM;
                this.fireSoundId = "wpn_fire_p90";
            }
            else if (this.level == 2) {
                this.damage = 75;
                this.fireRate = 4;
                this.accuracy = 3;
                this.roundType = DinogenArena.Firearm.ROUND_556MM;
                this.fireSoundId = "wpn_fire_famas";
            }
            else if (this.level == 3) {
                this.damage = 125;
                this.fireRate = 8;
                this.accuracy = 2;
                this.roundType = DinogenArena.Firearm.ROUND_762MM;
                this.fireSoundId = "wpn_fire_hk417";
            }
            else if (this.level == 4) {
                this.damage = 250;
                this.fireRate = 12;
                this.accuracy = 1;
                this.roundType = DinogenArena.Firearm.ROUND_762MM;
                this.fireSoundId = "wpn_fire_rsass";
            }
            else if (this.level == 5) {
                this.damage = 400;
                this.fireRate = 20;
                this.accuracy = 0;
                this.roundType = DinogenArena.Firearm.ROUND_762MM;
                this.fireSoundId = "wpn_fire_turret";
            }
            else if (this.level == 6) {
                this.damage = 1000;
                this.fireRate = 14;
                this.accuracy = 0;
                this.roundType = DinogenArena.Firearm.ROUND_762MM;
                this.fireSoundId = "wpn_fire_turret";
            }
            this.turret.frameName = "turret_gun_" + this.level;
        };
        AutoTurret.prototype.getRange = function () {
            return 250 + (50 * this.level);
        };
        AutoTurret.prototype.getLevel = function () {
            return this.level;
        };
        AutoTurret.prototype.getCostToUpgrade = function () {
            return AutoTurret.COST_BASE * (this.level + 1);
        };
        AutoTurret.prototype.isMaximumLevel = function () {
            return this.level >= AutoTurret.LEVEL_MAX;
        };
        AutoTurret.LEVEL_MAX = 6;
        AutoTurret.COST_BASE = 2000;
        return AutoTurret;
    }(Pawn));
    DinogenArena.AutoTurret = AutoTurret;
    var Helicopter = /** @class */ (function (_super) {
        __extends(Helicopter, _super);
        function Helicopter(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.accuracy = 1;
            _this.ammoMax = 1000;
            _this.ammo = 1000;
            _this.damage = 20;
            _this.fireRate = 4;
            _this.fireDelayTimer = 0;
            _this.weaponAngle = 0;
            _this.desiredWeaponAngle = 0;
            _this.weaponAngleSpeed = 0.2;
            _this.fireIntervalTimerMax = 60;
            _this.fireIntervalTimer = 0;
            _this.dropTimer = 0;
            _this.dropTimerMax = 60;
            _this.bUseFireInterval = true;
            _this.bFireInterval = false;
            _this.bWantsToFire = false;
            _this.bFireHandler = false;
            _this.bFireDelay = false;
            _this.bCanAttack = true;
            _this.bDropping = false;
            _this.referenceScale = 1;
            _this.bCanDamage = false;
            _this.bTargetable = false;
            _this.bPlayStepSound = false;
            _this.lookSpeed = 0.9;
            _this.items = [];
            _this.setDestroyTimer(5);
            return _this;
        }
        Helicopter.prototype.destroy = function () {
            this.fireSoundId = null;
            this.heli.animations.destroy();
            this.items = null;
            this.heli = null;
            if (this.shadow) {
                this.shadow.animations.destroy();
                this.shadow.destroy();
                this.shadow = null;
            }
            this.node.destroy();
            this.node = null;
            _super.prototype.destroy.call(this);
        };
        Helicopter.prototype.setAmmoMax = function (_val) {
            this.ammoMax = _val;
            this.ammo = _val;
        };
        Helicopter.prototype.getHeliType = function () {
            return this.heliType;
        };
        Helicopter.prototype.getActivePercent = function () {
            return this.ammo / this.ammoMax;
        };
        Helicopter.prototype.stopAllActions = function () {
            _super.prototype.stopAllActions.call(this);
            this.node.stop();
        };
        Helicopter.prototype.hasItems = function () {
            return this.items.length > 0;
        };
        Helicopter.prototype.addItem = function (_item) {
            this.items.push(_item);
        };
        Helicopter.prototype.setDropping = function (_bVal) {
            this.bDropping = true;
        };
        Helicopter.prototype.isDropping = function () {
            return this.bDropping;
        };
        Helicopter.prototype.dropItem = function () {
            if (this.hasItems()) {
                var item = this.items[0];
                var crate = DinogenArena.GameUtil.GetGameState().createCrate(null, this.x, this.y, this.rotation, Crate.TYPE_GENERIC_CRATE, item);
                DinogenArena.GameUtil.ApplyForce(crate.primaryBody, DinogenArena.WilkinUtil.GenerateRandomNumber(-100, 100), DinogenArena.WilkinUtil.GenerateRandomNumber(-100, 100));
                crate.primaryBody.angularVelocity = DinogenArena.WilkinUtil.GenerateRandomNumber(-100, 100);
                this.items.splice(0, 1);
                DinogenArena.SoundManager.PlayWorldSound("physics_crate_fall", this.x, this.y);
            }
            if (!this.hasItems()) {
                this.bDropping = false;
                this.ammo = 0; //TODO: Hacky way to make the helicopter leave
            }
            this.dropTimer = this.dropTimerMax;
        };
        Helicopter.prototype.canAttack = function () {
            return this.bCanAttack;
        };
        Helicopter.prototype.createSoundNode = function () {
            if (this.node) {
                this.node.destroy();
            }
            this.node = new DinogenArena.SoundNode(this, this.heliType + "_idle_loop", 0.5, true);
        };
        Helicopter.prototype.tick = function () {
            _super.prototype.tick.call(this);
            this.node.tick();
            if (this.bWantsToFire) {
                this.weaponAngle -= (this.weaponAngle - this.desiredWeaponAngle) * this.weaponAngleSpeed;
                if (this.fireIntervalTimer > 0) {
                    this.fireIntervalTimer--;
                }
                else {
                    this.bFireInterval = !this.bFireInterval;
                    this.fireIntervalTimer = this.fireIntervalTimerMax;
                }
            }
            if (this.bFireHandler) {
                this.fireHandler();
            }
            if (this.bFireDelay) {
                this.fireDelayHandler();
            }
            if (this.bDropping) {
                if (this.dropTimer > 0) {
                    this.dropTimer--;
                }
                else {
                    this.dropItem();
                }
            }
            if (this.shadow) {
                this.shadow.x = this.heli.x;
                this.shadow.y = this.heli.y + 100;
                this.shadow.rotation = this.heli.rotation;
            }
        };
        Helicopter.prototype.createBody = function () {
            _super.prototype.createBody.call(this);
            this.heli = this.game.add.sprite(0, 0, "atlas_vehicles", this.heliType + "0000");
            var anim = Phaser.Animation.generateFrameNames(this.heliType, 0, 4, "", 4);
            this.heli.animations.add("anim", anim);
            this.heli.animations.play("anim", DinogenArena.GameUtil.frameRate, true);
            DinogenArena.GameUtil.GetGameState().addToWorld(this.heli, DinogenArena.GameState.INDEX_AIR);
            if (DinogenArena.PlayerManager.CurrentProfile.settings.bEffects) {
                this.shadow = this.game.add.image(0, 0, "atlas_vehicles", this.heliType + "0000");
                this.shadow.scale.set(0.8, 0.8);
                this.shadow.tint = 0x000000;
                this.shadow.alpha = 0.1;
                this.shadow.anchor.set(0.5, 0.5);
                this.shadow.animations.add("anim", anim);
                this.shadow.animations.play("anim", DinogenArena.GameUtil.frameRate, true);
                DinogenArena.GameUtil.GetGameState().addToWorld(this.shadow);
            }
            this.game.physics.box2d.enable(this.heli);
            var heliBody = this.heli.body;
            heliBody.dynamic = true;
            heliBody.x = this.x;
            heliBody.y = this.y;
            heliBody.linearDamping = 1;
            //heliBody.angularDamping = 1;
            heliBody.friction = 0;
            heliBody.restitution = 1;
            this.addBody(heliBody);
            this.primaryBody = heliBody;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_AIR);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_AIR);
        };
        Helicopter.prototype.onGamePaused = function () {
            _super.prototype.onGamePaused.call(this);
            this.node.setVolume(0);
            this.heli.animations.stop();
            if (this.shadow) {
                this.shadow.animations.stop();
            }
        };
        Helicopter.prototype.onGameResumed = function () {
            _super.prototype.onGameResumed.call(this);
            this.heli.animations.play("anim", DinogenArena.GameUtil.frameRate, true);
            if (this.shadow) {
                this.shadow.animations.play("anim", DinogenArena.GameUtil.frameRate, true);
            }
        };
        Helicopter.prototype.fireHandler = function () {
            if (!this.bWantsToFire) {
                this.bFireHandler = false;
            }
            else {
                if (this.canFire()) {
                    this.fire();
                    this.startFireDelay(this.fireRate);
                }
            }
        };
        Helicopter.prototype.startFireDelay = function (_delay) {
            this.bFireDelay = true;
            this.fireDelayTimer = _delay;
        };
        Helicopter.prototype.fireDelayHandler = function () {
            this.fireDelayTimer--;
            if (this.fireDelayTimer <= 0) {
                this.endFireDelay();
            }
        };
        Helicopter.prototype.endFireDelay = function () {
            this.bFireDelay = false;
        };
        Helicopter.prototype.canFire = function () {
            var bFireCheck = this.bUseFireInterval ? !this.bFireInterval : true;
            return this.bWantsToFire && !this.bFireDelay && bFireCheck && this.hasAmmo();
        };
        Helicopter.prototype.setDesiredWeaponAngle = function (_val) {
            this.desiredWeaponAngle = _val;
        };
        Helicopter.prototype.triggerWeapon = function (_bVal) {
            this.bWantsToFire = _bVal;
            if (_bVal) {
                this.startWeaponFire();
            }
            else {
                this.stopWeaponFire();
            }
        };
        Helicopter.prototype.startWeaponFire = function () {
            this.bWantsToFire = true;
            this.triggerFire();
        };
        Helicopter.prototype.stopWeaponFire = function () {
            this.bWantsToFire = false;
        };
        Helicopter.prototype.triggerFire = function () {
            this.bFireHandler = true;
        };
        Helicopter.prototype.fire = function () {
            var data = { damage: this.damage };
            DinogenArena.GameUtil.GetGameState().createProjectile(this.x, this.y, this.weaponAngle + (DinogenArena.WilkinUtil.GenerateRandomNumber(-this.accuracy, this.accuracy) * DinogenArena.WilkinUtil.TO_RADIANS), ProjectileBase.TYPE_BULLET, this, this.controller, data);
            DinogenArena.SoundManager.PlayWorldSound(this.fireSoundId, this.x, this.y, 0);
            this.ammo--;
        };
        Helicopter.prototype.hasAmmo = function () {
            return this.ammo > 0;
        };
        Helicopter.TYPE_APACHE = "apache";
        Helicopter.TYPE_COBRA = "cobra";
        Helicopter.TYPE_SEAKNIGHT = "seaknight";
        Helicopter.TYPE_OSPREY = "osprey";
        return Helicopter;
    }(Pawn));
    DinogenArena.Helicopter = Helicopter;
    var Apache = /** @class */ (function (_super) {
        __extends(Apache, _super);
        function Apache(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.heliType = Helicopter.TYPE_APACHE;
            _this.minimapIconId = "minimap_pawn_" + _this.heliType;
            _this.fireSoundId = "wpn_fire_hamr";
            _this.speed = 150;
            _this.damage = 150;
            _this.setAmmoMax(2000);
            _this.createBody();
            _this.createSoundNode();
            return _this;
        }
        Apache.prototype.fire = function () {
            if (this.ammo % 50 == 0) {
                var data = { damage: 2000 };
                DinogenArena.GameUtil.GetGameState().createProjectile(this.x, this.y, this.desiredWeaponAngle, ProjectileBase.TYPE_ROCKET, this, this.controller, data);
                DinogenArena.SoundManager.PlayWorldSound("wpn_fire_rpg", this.x, this.y, 0, 0.5);
            }
            else {
                var data = { damage: this.damage };
                DinogenArena.GameUtil.GetGameState().createProjectile(this.x, this.y, this.weaponAngle + (DinogenArena.WilkinUtil.GenerateRandomNumber(-this.accuracy, this.accuracy) * DinogenArena.WilkinUtil.TO_RADIANS), ProjectileBase.TYPE_BULLET, this, this.controller, data);
                DinogenArena.SoundManager.PlayWorldSound(this.fireSoundId, this.x, this.y, 0, 0.5);
            }
            this.ammo--;
        };
        return Apache;
    }(Helicopter));
    DinogenArena.Apache = Apache;
    var Cobra = /** @class */ (function (_super) {
        __extends(Cobra, _super);
        function Cobra(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.heliType = Helicopter.TYPE_COBRA;
            _this.minimapIconId = "minimap_pawn_" + _this.heliType;
            _this.fireSoundId = "wpn_fire_p90";
            _this.accuracy = 2;
            _this.fireRate = 2;
            _this.damage = 80;
            _this.fireIntervalTimerMax = 45;
            _this.lookSpeed = 0.99;
            _this.speed = 180;
            _this.setAmmoMax(1500);
            _this.createBody();
            _this.createSoundNode();
            return _this;
        }
        return Cobra;
    }(Helicopter));
    DinogenArena.Cobra = Cobra;
    var SeaKnight = /** @class */ (function (_super) {
        __extends(SeaKnight, _super);
        function SeaKnight(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.heliType = Helicopter.TYPE_SEAKNIGHT;
            _this.minimapIconId = "minimap_pawn_" + _this.heliType;
            _this.bCanAttack = false;
            _this.speed = 220;
            _this.lookSpeed = 0.99;
            _this.setAmmoMax(1);
            _this.createBody();
            _this.createSoundNode();
            return _this;
        }
        SeaKnight.prototype.getActivePercent = function () {
            return this.items.length / 3;
        };
        return SeaKnight;
    }(Helicopter));
    DinogenArena.SeaKnight = SeaKnight;
    var Osprey = /** @class */ (function (_super) {
        __extends(Osprey, _super);
        function Osprey(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.heliType = Helicopter.TYPE_OSPREY;
            _this.minimapIconId = "minimap_pawn_" + _this.heliType;
            _this.fireSoundId = "wpn_fire_tpr";
            _this.damage = 300;
            _this.fireRate = 10;
            _this.setAmmoMax(5000);
            _this.fireIntervalTimerMax = 30;
            _this.bUseFireInterval = false;
            _this.lookSpeed = 0.99;
            _this.speed = 200;
            _this.dropTimerMax = 900;
            _this.createBody();
            _this.createSoundNode();
            return _this;
        }
        Osprey.prototype.getActivePercent = function () {
            return this.items.length / 3;
        };
        return Osprey;
    }(Helicopter));
    DinogenArena.Osprey = Osprey;
    var Character = /** @class */ (function (_super) {
        __extends(Character, _super);
        function Character(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.meleeDamage = 100;
            _this.bWantsToSprint = false;
            _this.bIsMeleeAttacking = false;
            _this.bWantsToFire = false;
            _this.bFireHandler = false;
            _this.bBurstFireHandler = false;
            _this.bFireDelay = false;
            _this.bIsReloading = false;
            _this.bUnlimitedAmmo = false;
            _this.footprintKey = "footprint_blood_human";
            _this.modifiers["ammo"] = 1;
            _this.modifiers["reload_speed"] = 1;
            _this.modifiers["fire_rate"] = 1;
            _this.modifiers["accuracy"] = 1;
            _this.bSetRotationFromPrimaryBody = false;
            _this.speed = 20;
            _this.inventory = new DinogenArena.Inventory();
            _this.loadDefaultInventory();
            _this.createBody();
            _this.perks = [];
            return _this;
            //this.setDestroyTimer(1);
        }
        Character.prototype.destroy = function () {
            this.avatarId = null;
            this.destroyVox();
            this.perks = null;
            this.torso = null;
            if (this.legs) {
                this.legs.animations.destroy();
                this.legs = null;
            }
            if (this.inventory) {
                this.inventory.destroy();
                this.inventory = null;
            }
            this.jointHead = null;
            this.jointUpperArmL = null;
            this.jointUpperArmR = null;
            this.jointLowerArmL = null;
            this.jointLowerArmR = null;
            this.jointUpperLegL = null;
            this.jointUpperLegR = null;
            this.jointLowerLegL = null;
            this.jointLowerLegR = null;
            _super.prototype.destroy.call(this);
        };
        Character.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.isAlive()) {
                if (this.voxIcon) {
                    this.voxIcon.rotation = -this.rotation;
                }
                if (this.primaryBody) {
                    if (this.isMoving()) {
                        if (this.isSprinting()) {
                            this.legs.animations.play("sprint");
                        }
                        else {
                            this.legs.animations.play("walk");
                        }
                    }
                    else {
                        this.legs.frame = "legs_default";
                    }
                    //this.legs.animations.play("sprint");
                    var distX = this.primaryBody.velocity.x;
                    var distY = this.primaryBody.velocity.y;
                    var angle = Math.atan2(distY, distX);
                    this.legs.rotation = angle - this.rotation;
                    if (this.bFireHandler) {
                        this.fireHandler();
                    }
                    if (this.bBurstFireHandler) {
                        this.burstFireHandler();
                    }
                    if (this.bFireDelay) {
                        this.fireDelayHandler();
                    }
                    if (this.bIsReloading) {
                        this.reloadHandler();
                    }
                }
            }
        };
        Character.prototype.sayVox = function (_id, _randMax, _bTriggerNearbyAllyResponse) {
            if (_randMax === void 0) { _randMax = 0; }
            if (_bTriggerNearbyAllyResponse === void 0) { _bTriggerNearbyAllyResponse = false; }
            if (!this.isPlayerAlly() || !this.isAlive() || !_id) {
                return;
            }
            if (this.vox) {
                return;
            }
            if (!DinogenArena.PlayerManager.CurrentProfile.settings.bEffects) {
                return;
            }
            this.vox = DinogenArena.SoundManager.PlayWorldSound(_id, this.x, this.y, _randMax);
            if (!this.vox) {
                return;
            }
            this.vox.onStop.add(this.onStopVox, this);
            if (!this.voxIcon) {
                this.voxIcon = this.game.add.image(0, 0, "atlas_ui", "indicator_objective");
                this.voxIcon.anchor.set(0.5, 1);
                this.voxIcon.alpha = 0.8;
                this.voxIcon.tint = DinogenArena.GameUtil.COLOUR_XP;
                this.add(this.voxIcon);
            }
            this.voxIcon.visible = true;
            if (_bTriggerNearbyAllyResponse) {
                var pawns = DinogenArena.GameUtil.GetGameState().getLivingBotsForTeam(this.team);
                var count = 0;
                for (var i = 0; i < pawns.length; i++) {
                    var pawn = pawns[i];
                    if (pawn instanceof Character) {
                        var char = pawn;
                        if (char != this) {
                            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                                var dist = DinogenArena.WilkinUtil.GetDistance(this.x, this.y, char.x, char.y);
                                count++;
                                if (dist < 800) {
                                    var timer = this.game.time.create();
                                    timer.add(DinogenArena.WilkinUtil.GenerateRandomNumber(1000, 2000), function () { this.sayVox("vox_char_affirmative", 5); }, char);
                                    timer.start();
                                }
                            }
                        }
                        if (count >= 5) {
                            break;
                        }
                    }
                }
            }
        };
        Character.prototype.stopVox = function () {
            if (this.vox) {
                this.vox.stop();
            }
        };
        Character.prototype.onStopVox = function () {
            this.destroyVox();
            this.voxIcon.visible = false;
        };
        Character.prototype.destroyVox = function () {
            if (this.vox) {
                if (this.vox) {
                    if (this.vox.onStop) {
                        this.vox.onStop.removeAll();
                    }
                    this.vox.destroy();
                }
            }
            this.vox = null;
        };
        Character.prototype.isSniper = function () {
            if (!this.inventory) {
                return false;
            }
            return this.inventory.hasSniper();
        };
        Character.prototype.setAvatarId = function (_val) {
            this.avatarId = _val;
        };
        Character.prototype.getAvatarId = function () {
            return this.avatarId;
        };
        Character.prototype.setUnlimitedAmmo = function (_bVal) {
            this.bUnlimitedAmmo = _bVal;
        };
        Character.prototype.getPerks = function () {
            return this.perks;
        };
        Character.prototype.hasPerk = function (_id) {
            for (var i = 0; i < this.perks.length; i++) {
                if (this.perks[i].id == _id) {
                    return true;
                }
            }
            return false;
        };
        Character.prototype.addPerk = function (_id) {
            if (this.hasPerk(_id)) {
                return;
            }
            var perk = DinogenArena.PerkManager.GetPerk(_id);
            this.perks.push(perk);
            this.applyPerk(perk);
            this.updateHUDPerks();
        };
        Character.prototype.applyPerk = function (_perk) {
            var modifiers = _perk.modifiers;
            for (var i = 0; i < modifiers.length; i++) {
                this.modifiers[modifiers[i]["id"]] = modifiers[i]["value"];
                if (modifiers[i]["id"] == "regen_max") {
                    this.setRegenModifier(modifiers[i]["value"]);
                }
            }
        };
        Character.prototype.createBody = function () {
            var charBody = new Phaser.Physics.Box2D.Body(this.game, null, this.x, this.y, 1);
            charBody.setCircle(14, 0, 0);
            //charBody.setRectangle(26, 26);
            charBody.dynamic = true;
            charBody.linearDamping = 24;
            charBody.angularDamping = 12;
            charBody.friction = 1;
            charBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            charBody.setCollisionMask(DinogenArena.GameState.MASK_PAWN);
            this.addBody(charBody);
            this.legs = this.game.add.sprite(0, 0, "atlas_char_legs", "legs_default");
            var anim = Phaser.Animation.generateFrameNames("legs_sprint", 0, 19, "", 4);
            var sprint = this.legs.animations.add("sprint", anim);
            anim = Phaser.Animation.generateFrameNames("legs_walk", 0, 29, "", 4);
            var walk = this.legs.animations.add("walk", anim);
            this.legs.anchor.set(0.5, 0.5);
            this.addChild(this.legs);
            this.primaryBody = charBody;
            this.addBody(this.primaryBody);
        };
        Character.prototype.destroyAllBodies = function () {
            if (this.torso) {
                this.torso.destroy();
                this.torso = null;
            }
            if (this.legs) {
                this.legs.destroy();
                this.legs = null;
            }
            _super.prototype.destroyAllBodies.call(this);
        };
        Character.prototype.hasBow = function () {
            return this.inventory.hasBow();
        };
        Character.prototype.getBowInventoryIndex = function () {
            return this.inventory.getBowInventoryIndex();
        };
        Character.prototype.createDeathBody = function () {
            _super.prototype.createDeathBody.call(this);
            var atlasId = "atlas_char_dead";
            var startX = this.x;
            var startY = this.y;
            var deadLegUpperL = this.game.add.sprite(startX - 3, startY + 13, atlasId, "leg_upper_l");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadLegUpperL, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadLegUpperL);
            var deadLegLowerL = this.game.add.sprite(startX - 5, startY + 33, atlasId, "leg_lower_l");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadLegLowerL, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadLegLowerL);
            var deadLegUpperR = this.game.add.sprite(startX + 3, startY + 13, atlasId, "leg_upper_r");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadLegUpperR, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadLegUpperR);
            var deadLegLowerR = this.game.add.sprite(startX + 5, startY + 33, atlasId, "leg_lower_r");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadLegLowerR, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadLegLowerR);
            var deadBody = this.game.add.sprite(startX, startY - 6.4, atlasId, "body");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadBody, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadBody);
            deadBody.body.setRectangle(14, deadBody.height);
            var deadHead = this.game.add.sprite(startX + 1, startY - 25, atlasId, "head");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadHead, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadHead);
            var deadArmUpperL = this.game.add.sprite(startX - 16, startY - 16, atlasId, "arm_upper_l");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadArmUpperL, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadArmUpperL);
            deadArmUpperL.body.setRectangle(deadArmUpperL.width, 6);
            var deadArmLowerL = this.game.add.sprite(startX - 30, startY - 16, atlasId, "arm_lower_l");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadArmLowerL, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadArmLowerL);
            deadArmLowerL.body.setRectangle(deadArmLowerL.width, 4);
            var deadArmUpperR = this.game.add.sprite(startX + 16, startY - 16, atlasId, "arm_upper_r");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadArmUpperR, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadArmUpperR);
            deadArmUpperR.body.setRectangle(deadArmUpperR.width, 6);
            var deadArmLowerR = this.game.add.sprite(startX + 30, startY - 16, atlasId, "arm_lower_r");
            DinogenArena.GameUtil.GetGameState().addToWorld(deadArmLowerR, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(deadArmLowerR);
            deadArmLowerR.body.setRectangle(deadArmLowerR.width, 4);
            //Joints
            this.jointHead = this.game.physics.box2d.revoluteJoint(deadBody, deadHead, 0, -15, 0, 3, 0, 0, 0, -40, 40, this.bJointLimitsEnabled);
            this.jointUpperArmL = this.game.physics.box2d.revoluteJoint(deadBody, deadArmUpperL, -8, -10, 8, 0, 0, 0, 0, -85, 130, this.bJointLimitsEnabled);
            this.jointUpperArmR = this.game.physics.box2d.revoluteJoint(deadBody, deadArmUpperR, 8, -10, -8, 0, 0, 0, 0, -130, 85, this.bJointLimitsEnabled);
            this.jointLowerArmL = this.game.physics.box2d.revoluteJoint(deadArmUpperL, deadArmLowerL, -6, 0, 8, 0, 0, 0, 0, -130, 10, this.bJointLimitsEnabled);
            this.jointLowerArmR = this.game.physics.box2d.revoluteJoint(deadArmUpperR, deadArmLowerR, 6, 0, -8, 0, 0, 0, 0, -10, 130, this.bJointLimitsEnabled);
            this.jointUpperLegL = this.game.physics.box2d.revoluteJoint(deadBody, deadLegUpperL, -4, 10, 0, -10, 0, 0, 0, -25, 45, this.bJointLimitsEnabled);
            this.jointUpperLegR = this.game.physics.box2d.revoluteJoint(deadBody, deadLegUpperR, 4, 10, 0, -10, 0, 0, 0, -45, 25, this.bJointLimitsEnabled);
            this.jointLowerLegL = this.game.physics.box2d.revoluteJoint(deadLegUpperL, deadLegLowerL, -1, 6, 0, -12, 0, 0, 0, -25, 115, this.bJointLimitsEnabled);
            this.jointLowerLegR = this.game.physics.box2d.revoluteJoint(deadLegUpperR, deadLegLowerR, 1, 6, 0, -12, 0, 0, 0, -115, 25, this.bJointLimitsEnabled);
            this.joints = [
                this.jointHead,
                this.jointUpperArmL,
                this.jointUpperArmR,
                this.jointLowerArmL,
                this.jointLowerArmR,
                this.jointUpperLegL,
                this.jointUpperLegR,
                this.jointLowerLegL,
                this.jointLowerLegR,
            ];
            this.primaryBody = deadBody.body;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
            this.primaryBody.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
            this.addBody(deadBody.body, "deadBody");
            this.addBody(deadHead.body, "deadHead");
            this.addBody(deadArmUpperL.body, "deadArmUpperL");
            this.addBody(deadArmUpperR.body, "deadArmUpperR");
            this.addBody(deadArmLowerL.body, "deadArmLowerL");
            this.addBody(deadArmLowerR.body, "deadArmLowerR");
            this.addBody(deadLegUpperL.body, "deadLegUpperL");
            this.addBody(deadLegUpperR.body, "deadLegUpperR");
            this.addBody(deadLegLowerL.body, "deadLegLowerL");
            this.addBody(deadLegLowerR.body, "deadLegLowerR");
            for (var i = 0; i < this.bodies.length; i++) {
                var bod = this.bodies[i];
                bod.linearDamping = DinogenArena.WilkinUtil.GenerateRandomNumber(3, 5);
                bod.angularDamping = DinogenArena.WilkinUtil.GenerateRandomNumber(3, 5);
                bod.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
                bod.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
            }
            this.rotateAroundPoint(this.primaryBody.x, this.primaryBody.y, (this.rotation - 90), this.bodies);
            this.onTorsoChanged();
        };
        Character.prototype.fireHandler = function () {
            if (!this.bWantsToFire) {
                this.bFireHandler = false;
            }
            else {
                if (this.canFire()) {
                    var cur = this.getCurrentInventoryItem();
                    if (cur) {
                        this.fire();
                        var fireMode = cur.getFireMode();
                        if (fireMode == DinogenArena.Firearm.FIRE_MODE_SEMI) {
                            this.startFireDelay(cur.getFireRate() * this.modifiers["fire_rate"]);
                            this.bFireHandler = false;
                        }
                        else if (fireMode == DinogenArena.Firearm.FIRE_MODE_BURST) {
                            this.startFireDelay(cur.getBurstFireRate());
                            cur.setBursts(2);
                            this.burstTimer = cur.getFireRate() * this.modifiers["fire_rate"];
                            this.bBurstFireHandler = true;
                            this.bFireHandler = false;
                        }
                        else if (fireMode == DinogenArena.Firearm.FIRE_MODE_AUTO) {
                            this.startFireDelay(cur.getFireRate() * this.modifiers["fire_rate"]);
                        }
                    }
                }
                else if (this.isReloading()) {
                    if (this.getCurrentFirearm()) {
                        if (this.getCurrentFirearm().isSingleRoundLoaded() && this.getCurrentFirearm().hasMag()) {
                            this.cancelReload();
                        }
                    }
                }
            }
        };
        Character.prototype.startFireDelay = function (_delay) {
            this.bFireDelay = true;
            this.fireDelayTimer = _delay;
        };
        Character.prototype.burstFireHandler = function () {
            if (this.getCurrentFirearm().getBursts() > 0) {
                if (this.burstTimer > 0) {
                    this.burstTimer--;
                }
                else {
                    if (this.getCurrentFirearm().getMag() > 0) {
                        this.getCurrentFirearm().useBurst();
                        this.burstTimer = this.getCurrentFirearm().getFireRate();
                        this.fire();
                    }
                    else {
                        this.burstFireComplete();
                    }
                }
            }
            else {
                this.burstFireComplete();
            }
        };
        Character.prototype.burstFireComplete = function () {
            this.bBurstFireHandler = false;
        };
        Character.prototype.fireDelayHandler = function () {
            this.fireDelayTimer--;
            if (this.fireDelayTimer <= 0) {
                this.endFireDelay();
            }
        };
        Character.prototype.endFireDelay = function () {
            this.bFireDelay = false;
            if (this.getCurrentFirearm().getMag() == 0) {
                if (this.canReload()) {
                    this.reload();
                }
            }
        };
        Character.prototype.reloadHandler = function () {
            this.reloadTimer--;
            if (this.isPlayer()) {
                this.getPlayerController().getHUD().getCrosshair().setReloadingPercentage(1 - (this.reloadTimer / this.reloadTimerMax));
            }
            if (this.reloadTimer == 0) {
                this.onReloadComplete();
            }
        };
        Character.prototype.addInventoryItems = function (_items) {
            for (var i = 0; i < _items.length; i++) {
                if (_items[i] instanceof DinogenArena.Firearm) {
                    this.addInventoryItem(_items[i]);
                }
                else {
                    this.addInventoryItemById(_items[i]);
                }
            }
        };
        Character.prototype.addInventoryItemById = function (_id) {
            var item = DinogenArena.InventoryManager.GetItemById(_id);
            if (item) {
                this.addInventoryItem(item);
            }
            return item;
        };
        Character.prototype.updateHUD = function () {
            _super.prototype.updateHUD.call(this);
            this.updateHUDAmmo();
        };
        Character.prototype.addInventoryItem = function (_item) {
            if (this.inventory.hasInventorySpace()) {
                this.inventory.addItem(_item);
                this.currentInventoryIndex = this.inventory.getLength() - 1;
                this.loadCurrentInventoryItem();
                this.updateHUD();
            }
            return _item;
        };
        Character.prototype.hasAnyAmmo = function () {
            return this.inventory.hasAnyAmmo();
        };
        Character.prototype.hasInventorySpace = function () {
            return this.inventory.hasInventorySpace();
        };
        Character.prototype.hasInventoryItem = function (_id) {
            return this.inventory.hasItem(_id);
        };
        Character.prototype.getInventoryItemIndex = function (_id) {
            return this.inventory.getItemIndex(_id);
        };
        Character.prototype.getInventoryLength = function () {
            return this.inventory.getLength();
        };
        Character.prototype.getInventoryItems = function () {
            if (!this.inventory) {
                return null;
            }
            return this.inventory.getAll();
        };
        Character.prototype.getInventoryAsArray = function () {
            return this.inventory.toArray();
        };
        Character.prototype.updateHUDAmmo = function () {
            if (this.isPlayer()) {
                if (this.getCurrentFirearm() != null) {
                    var hud = this.getPlayerController().getHUD();
                    hud.updateAmmo(this.getCurrentFirearm());
                    var crosshair = hud.getCrosshair();
                    crosshair.setCanFire(this.getCurrentFirearm().hasMag());
                    if (this.isReloading()) {
                        crosshair.setNeedsReload(false);
                    }
                    else {
                        crosshair.setNeedsReload(this.getCurrentFirearm().needsReload());
                    }
                }
            }
        };
        Character.prototype.updateHUDPerks = function () {
            if (this.isPlayer()) {
                if (this.perks) {
                    var hud = this.getPlayerController().getHUD();
                    hud.playerInfo.setPerks(this.perks);
                }
            }
        };
        Character.prototype.refillAmmo = function () {
            var bNeedsReload = !this.getCurrentFirearm().hasAnyAmmo();
            this.inventory.refillAmmo();
            DinogenArena.SoundManager.PlayWorldSound("wpn_ammo", this.x, this.y);
            this.updateHUDAmmo();
            if (bNeedsReload) {
                this.reload();
            }
        };
        Character.prototype.addAmmoToInventoryItem = function (_index, _ammo) {
            var firearm = this.inventory.getItemAt(_index);
            firearm.addAmmo(_ammo);
            DinogenArena.SoundManager.PlayWorldSound("wpn_ammo", this.x, this.y);
            this.updateHUDAmmo();
        };
        Character.prototype.loadDefaultInventory = function () {
            this.inventory.clearItems();
            //this.inventory.addItem(InventoryManager.GetItemById(InventoryManager.ITEM_MELEE_KNIFE));
            this.currentInventoryIndex = 0;
            this.loadCurrentInventoryItem();
        };
        Character.prototype.loadCurrentInventoryItem = function () {
            var current = this.getCurrentInventoryItem();
            var firearm = current;
            if (!current) {
                return;
            }
            this.speedMultiplier = current.getSpeedMultiplier();
            if (!this.torso) {
                this.torso = this.game.add.sprite(0, 0, "atlas_char");
                this.torso.anchor.set(0, 0.5);
                this.torso.x = -10;
                this.addChild(this.torso);
                var anim = Phaser.Animation.generateFrameNames("knife", 0, 15, "", 4);
                var melee = this.torso.animations.add("melee", anim);
            }
            this.torso.frameName = current.getId();
            if (current.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_RPG) {
                if (!firearm.hasMag()) {
                    this.torso.frameName = current.getId() + "_empty";
                }
            }
            if (this.isPlayer()) {
                DinogenArena.GameUtil.GetGameState().setCameraMouseLookRatioMultiplier(current.getViewMultiplier() * this.modifiers["view_distance"]);
                var crosshairSize = 5;
                crosshairSize = firearm.getAccuracy() * 3;
                var pc = this.getPlayerController();
                if (pc && pc.getHUD()) {
                    pc.getHUD().getCrosshair().setSize(crosshairSize);
                }
            }
            if (this.isReloading()) {
                this.cancelReload();
            }
            if (firearm.getMag() == 0 && firearm.getAmmo() > 0) {
                this.reload();
            }
            if (current.isBow()) {
                DinogenArena.SoundManager.PlayWorldSound("wpn_deploy_bow", this.x, this.y);
            }
            else {
                DinogenArena.SoundManager.PlayWorldSound("wpn_deploy_firearm", this.x, this.y, 3);
            }
            this.onTorsoChanged();
        };
        Character.prototype.onTorsoChanged = function () {
            if (!DinogenArena.GameUtil.GetGameState().gameMode.bSetPawnTeamColour) {
                return;
            }
            var useColour = Phaser.Color.linearInterpolation([0xFFFFFF, DinogenArena.GameModeManager.GetColourForTeam(this.team)], 0.3);
            if (this.torso) {
                this.torso.tint = useColour;
            }
            else if (!this.isAlive()) {
                for (var i = 0; i < this.bodies.length; i++) {
                    var curSprite = this.bodies[i].sprite;
                    curSprite.tint = useColour;
                }
            }
        };
        Character.prototype.getCurrentInventoryItem = function () {
            if (!this.inventory) {
                return null;
            }
            return this.inventory.getItemAt(this.currentInventoryIndex);
        };
        Character.prototype.getCurrentFirearm = function () {
            return this.getCurrentInventoryItem() instanceof DinogenArena.Firearm ? this.getCurrentInventoryItem() : null;
        };
        Character.prototype.getCurrentInventoryIndex = function () {
            return this.currentInventoryIndex;
        };
        Character.prototype.triggerWeapon = function (_bVal) {
            if (!this.isAlive()) {
                return;
            }
            var current = this.getCurrentInventoryItem();
            if (_bVal) {
                if (current instanceof DinogenArena.Firearm) {
                    this.startWeaponFire();
                }
            }
            else {
                this.stopWeaponFire();
            }
        };
        Character.prototype.startWeaponFire = function () {
            this.bWantsToFire = true;
            this.triggerFire();
        };
        Character.prototype.stopWeaponFire = function () {
            this.bWantsToFire = false;
        };
        Character.prototype.fire = function () {
            var firearm = this.getCurrentFirearm();
            var data = {};
            data["firearm"] = firearm;
            var pos = this.getWorldMuzzlePosition();
            var numBullets = firearm.isShotgun() ? 6 : 1;
            if (firearm.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_QUADRA) {
                numBullets = 2;
            }
            for (var i = 0; i < numBullets; i++) {
                if (firearm.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_QUADRA) {
                    var addRot = (i == 0 ? 90 : -90) * DinogenArena.WilkinUtil.TO_RADIANS;
                    var bulletSpacing = 15;
                    pos.x = pos.x + (Math.cos(this.rotation + addRot) * bulletSpacing);
                    pos.y = pos.y + (Math.sin(this.rotation + addRot) * bulletSpacing);
                }
                var useAccuracy = firearm.getAccuracy() * this.modifiers["accuracy"];
                var rot = this.rotation + (DinogenArena.WilkinUtil.GenerateRandomNumber(-useAccuracy, useAccuracy) * DinogenArena.WilkinUtil.TO_RADIANS);
                var projType = firearm.getProjectileType();
                if (projType) {
                    if (projType == ProjectileBase.TYPE_BULLET) {
                        data["damageMultiplier"] = this.modifiers["damage_inflict_bullet"];
                    }
                    else if (projType == ProjectileBase.TYPE_ROCKET) {
                        this.moveBackward(8);
                    }
                    if (this.isPlayer()) {
                        data["speed"] = DinogenArena.WilkinUtil.GetDistance(this.x, this.y, this.game.input.activePointer.x + this.game.camera.x, this.game.input.activePointer.y + this.game.camera.y) * 0.1;
                    }
                    else {
                        data["speed"] = 50;
                    }
                }
                data["bBig"] = this.hasPerk(DinogenArena.PerkManager.PERK_WEAPON_DAMAGE);
                DinogenArena.GameUtil.GetGameState().createProjectile(pos.x, pos.y, rot, projType, this, this.controller, data);
            }
            if (!firearm.isLauncher()) {
                DinogenArena.GameUtil.GetGameState().createMuzzleFlash(pos.x, pos.y, this.rotation);
            }
            if (firearm.ejectsShell()) {
                this.createShell();
            }
            firearm.useMag();
            if (firearm.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_RPG) {
                if (!firearm.hasMag()) {
                    this.torso.frameName = firearm.getId() + "_empty";
                }
            }
            this.addRecoil();
            DinogenArena.SoundManager.PlayWorldSound("wpn_fire_" + firearm.getId(), this.x, this.y);
            this.updateHUDAmmo();
        };
        Character.prototype.createShell = function () {
            var pos = this.getWorldShellPosition();
            return DinogenArena.GameUtil.GetGameState().createShell(pos.x, pos.y, this.rotation, this.getCurrentFirearm().getRoundType());
        };
        Character.prototype.addRecoil = function () {
            var recoil = this.getCurrentFirearm().getRecoil();
            recoil = Math.min(recoil, 25);
            //var weapon: MovieClip = torso.mc_torso.mc_weapon;
            //weapon.x = Math.max(weapon.x - recoil, -4);
            if (this.isPlayer()) {
                this.getPlayerController().getHUD().getCrosshair().addRecoil(recoil * 5);
                DinogenArena.GameUtil.GetGameState().shakeCamera(recoil * 2);
            }
        };
        Character.prototype.triggerFire = function () {
            var cur = this.getCurrentInventoryItem();
            if (cur) {
                if (cur.getMag() > 0) {
                    this.bFireHandler = true;
                }
                else {
                    if (this.isReloading()) {
                        if (cur.isSingleRoundLoaded()) {
                            if (cur.getMag() > 0) {
                                this.cancelReload();
                            }
                        }
                    }
                    else {
                        if (this.canReload()) {
                            this.reload();
                        }
                        else {
                            if (cur.getAmmo() <= 0) {
                                DinogenArena.SoundManager.PlayWorldSound("wpn_empty", this.x, this.y);
                                if (this.otherWeaponHasAmmo()) {
                                    this.switchWeapon();
                                }
                            }
                        }
                    }
                }
            }
        };
        Character.prototype.otherWeaponHasAmmo = function () {
            if (this.inventory.getLength() > 1) {
                if (this.currentInventoryIndex == 0) {
                    return this.inventory.getItemAt(1).hasAnyAmmo();
                }
                else {
                    return this.inventory.getItemAt(0).hasAnyAmmo();
                }
            }
            return false;
        };
        Character.prototype.switchWeaponTo = function (_index) {
            if (this.currentInventoryIndex == _index) {
                return;
            }
            if (_index > this.inventory.getLength() - 1) {
                return;
            }
            if (this.canSwitchWeapon()) {
                this.currentInventoryIndex = _index;
                this.loadCurrentInventoryItem();
                this.updateHUD();
            }
        };
        Character.prototype.switchWeapon = function () {
            if (this.canSwitchWeapon()) {
                this.cancelReload();
                var len = this.inventory.getLength();
                if (len > 1) {
                    var newIndex = this.currentInventoryIndex + 1;
                    if (newIndex >= len) {
                        newIndex = len > 2 ? 1 : 0;
                    }
                    this.currentInventoryIndex = newIndex;
                    this.loadCurrentInventoryItem();
                    this.updateHUD();
                }
            }
        };
        Character.prototype.reload = function (_bAuto) {
            if (_bAuto === void 0) { _bAuto = false; }
            if (!this.canReload()) {
                return;
            }
            var firearm = this.getCurrentFirearm();
            var weaponId = firearm.getId();
            this.bIsReloading = true;
            this.reloadTimerMax = Math.ceil(firearm.getReloadTime() * this.modifiers["reload_speed"]);
            this.reloadTimer = this.reloadTimerMax;
            var crosshair = null;
            if (this.isPlayer()) {
                crosshair = this.getPlayerController().getHUD().getCrosshair();
            }
            if (weaponId == DinogenArena.InventoryManager.ITEM_FIREARM_RPG) {
                this.torso.frameName = DinogenArena.InventoryManager.ITEM_FIREARM_RPG + "_empty";
            }
            else if (firearm.isMagnum()) {
                if (!_bAuto) {
                    var len = (firearm.getMagMax() - firearm.getMag());
                    for (var i = 0; i < len; i++) {
                        this.createShell();
                    }
                }
            }
            if (!firearm.isSingleRoundLoaded()) {
                DinogenArena.SoundManager.PlayWorldSound("wpn_reload_start", this.x, this.y, 0, 1);
                if (crosshair) {
                    crosshair.setReloading(true);
                    crosshair.setCanFire(false);
                }
            }
            else {
                if (crosshair) {
                    crosshair.setReloading(true);
                    crosshair.setCanFire(firearm.getMag() > 0);
                }
            }
        };
        Character.prototype.cancelReload = function () {
            this.bIsReloading = false;
            if (this.isPlayer()) {
                this.getPlayerController().getHUD().getCrosshair().setReloading(false);
            }
        };
        Character.prototype.onReloadComplete = function () {
            this.bIsReloading = false;
            var cur = this.getCurrentInventoryItem();
            this.torso.frameName = cur.getId();
            if (cur.isSingleRoundLoaded()) {
                if (!this.bUnlimitedAmmo) {
                    cur.addAmmo(-1);
                }
                cur.addMag(1);
                DinogenArena.SoundManager.PlayWorldSound("wpn_reload_shell", this.x, this.y, 0, 1);
            }
            else {
                if (cur.getMag() >= cur.getMagMax()) {
                    if (!this.bUnlimitedAmmo) {
                        cur.addAmmo(-(cur.getMagMax() - cur.getMag()));
                    }
                    cur.setMag(cur.getMagMax());
                }
                else if ((cur.getAmmo() + cur.getMag()) > cur.getMagMax()) {
                    if (!this.bUnlimitedAmmo) {
                        cur.addAmmo(-(cur.getMagMax() - cur.getMag()));
                    }
                    cur.addMag((cur.getMagMax() - cur.getMag()));
                }
                else {
                    cur.addMag(cur.getAmmo());
                    if (!this.bUnlimitedAmmo) {
                        cur.addAmmo(-cur.getAmmo());
                    }
                }
                DinogenArena.SoundManager.PlayWorldSound("wpn_reload_end", this.x, this.y, 0, 1);
            }
            if (this.isPlayer()) {
                this.getPlayerController().getHUD().getCrosshair().setReloading(false);
            }
            this.updateHUDAmmo();
            if (cur.isSingleRoundLoaded() && this.canReload()) {
                this.reload(true);
            }
        };
        Character.prototype.canSwitchWeapon = function () {
            return !this.bFireDelay && !this.bIsMeleeAttacking;
        };
        Character.prototype.canMeleeAttack = function () {
            return !this.bFireDelay && !this.bIsMeleeAttacking && this.isAlive();
        };
        Character.prototype.isMeleeAttacking = function () {
            return this.bIsMeleeAttacking;
        };
        Character.prototype.startMeleeAttack = function () {
            if (!this.canMeleeAttack()) {
                return;
            }
            this.bIsMeleeAttacking = true;
            this.moveForward(4);
            var anim = this.torso.animations.play("melee", 60);
            anim.onComplete.addOnce(this.onMeleeComplete, this);
            DinogenArena.SoundManager.PlayWorldSound("wpn_melee", this.x, this.y);
            DinogenArena.GameUtil.GetGameState().checkMeleeAttack(this, this.meleeDamage);
        };
        Character.prototype.setMeleeDamage = function (_val) {
            this.meleeDamage = _val;
        };
        Character.prototype.onMeleeComplete = function () {
            this.bIsMeleeAttacking = false;
            this.loadCurrentInventoryItem();
        };
        Character.prototype.getWorldMuzzlePosition = function () {
            var pos = new Phaser.Point(this.x, this.y);
            var dist = this.torso.width - 10;
            pos.x += Math.cos(this.rotation) * dist;
            pos.y += Math.sin(this.rotation) * dist;
            return pos;
        };
        Character.prototype.getWorldShellPosition = function () {
            var pos = new Phaser.Point(this.x, this.y);
            var add = (90 * DinogenArena.WilkinUtil.TO_RADIANS);
            var dist = 10;
            pos.x += Math.cos(this.rotation) * dist;
            pos.y += Math.sin(this.rotation) * dist;
            return pos;
        };
        Character.prototype.startSprinting = function () {
            this.bWantsToSprint = true;
            this.stepTimerMax = 12;
        };
        Character.prototype.stopSprinting = function () {
            this.bWantsToSprint = false;
            this.stepTimerMax = 18;
        };
        Character.prototype.isSprinting = function () {
            return this.bWantsToSprint; // && (this.body.velocity > 0.5);
        };
        Character.prototype.getSpeed = function () {
            var speed = _super.prototype.getSpeed.call(this);
            return this.isSprinting() ? (speed * 1.5) : speed;
        };
        Character.prototype.onDeath = function (_killingDamage, _instigator, _causer, _damageType) {
            _super.prototype.onDeath.call(this, _killingDamage, _instigator, _causer, _damageType);
            if (this.isPlayer() || DinogenArena.WilkinUtil.GenerateRandomNumber(1, 4) == 1) {
                var invItems = this.inventory.getAll();
                var i = this.currentInventoryIndex;
                if (invItems[i] instanceof DinogenArena.Firearm) {
                    var dropped = this.dropInventoryItem(i);
                    var force = Math.min(_killingDamage * 0.2, 200); //mass
                    var rad = _causer ? (_causer.primaryBody.rotation + (DinogenArena.WilkinUtil.GenerateRandomNumber(-45, 45) * DinogenArena.WilkinUtil.TO_RADIANS)) : 0;
                    var vx = Math.cos(rad) * force;
                    var vy = Math.sin(rad) * force;
                    DinogenArena.GameUtil.ApplyForce(dropped.primaryBody, vx, vy);
                    var rot = DinogenArena.WilkinUtil.GenerateRandomNumber(-force, force) * 0.5;
                    dropped.primaryBody.angularVelocity = (rot);
                }
            }
            this.stopVox();
            DinogenArena.SoundManager.PlayWorldSound("char_death", this.x, this.y, 5);
            if (this.primaryBody && DinogenArena.PlayerManager.CurrentProfile.settings.bGibs) {
                if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_EXPLOSIVE) {
                    if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                        this.gibBody();
                    }
                    else {
                        this.gibHead();
                    }
                    this.gibLeftArm();
                    this.gibRightArm();
                    this.gibLeftLeg();
                    this.gibRightLeg();
                }
                else if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_DINOSAUR) {
                    if (_killingDamage >= 10) {
                        if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                            this.gibLeftArm();
                        }
                        if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                            this.gibRightArm();
                        }
                    }
                    if (_killingDamage >= 35) {
                        if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                            this.gibLeftLeg();
                        }
                        if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                            this.gibRightLeg();
                        }
                    }
                    if (_killingDamage >= 50) {
                        if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                            this.gibBody();
                        }
                        else {
                            this.gibHead();
                        }
                    }
                }
                else {
                    var firearm;
                    if (_causer instanceof ProjectileBase) {
                        firearm = _causer.getFirearm();
                    }
                    var force = 0;
                    var bHeadshot = false;
                    //var bGibArm: boolean = _killingDamage >= this.healthMax;
                    if (firearm) {
                        if (firearm.isSniper()) {
                            force = _killingDamage >= this.healthMax ? 2 : 1;
                            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                                bHeadshot = true;
                            }
                        }
                        if (firearm.isShotgun() || firearm.isLMG()) {
                            force = DinogenArena.WilkinUtil.GenerateRandomNumber(1, 2);
                        }
                        else if (_killingDamage >= 50) {
                            force = 1;
                        }
                    }
                    else if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_MELEE) {
                        force = 1;
                    }
                    if (bHeadshot) {
                        this.gibHead();
                    }
                    else {
                        if (force >= 1) {
                            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                                this.gibLeftArm();
                            }
                            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                                this.gibRightArm();
                            }
                        }
                        if (force >= 2) {
                            this.gibBody();
                            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                                this.gibLeftLeg();
                            }
                            if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                                this.gibRightLeg();
                            }
                        }
                    }
                }
            }
        };
        Character.prototype.gibify = function (_spriteId, _joint) {
            if (_spriteId) {
                var sprite = this.getSprite(_spriteId);
                if (sprite) {
                    sprite.frameName += "_gib";
                    var bod = sprite.body;
                    if (bod) {
                        if (_joint) {
                            DinogenArena.GameUtil.GetGameState().destroyJoint(_joint);
                        }
                        DinogenArena.GameUtil.ApplyForce(bod, DinogenArena.WilkinUtil.GenerateRandomNumber(-24, 24), DinogenArena.WilkinUtil.GenerateRandomNumber(-24, 24));
                        bod.angularVelocity = DinogenArena.WilkinUtil.GenerateRandomNumber(-32, 32);
                    }
                }
            }
        };
        Character.prototype.gibHead = function () {
            this.getSprite("deadHead").destroy();
            DinogenArena.SoundManager.PlayWorldSound("physics_flesh_headshot", this.x, this.y, 3);
            this.onGib();
        };
        Character.prototype.gibBody = function () {
            var sprite = this.getSprite("deadBody");
            if (sprite) {
                if (sprite.frameName.indexOf("_gib") < 0) {
                    sprite.frameName += "_gib";
                }
            }
        };
        Character.prototype.gibLeftArm = function () {
            var rand = DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3);
            if (rand == 1) {
                this.gibify("deadArmUpperL", this.jointUpperArmL);
            }
            else if (rand == 2) {
                this.gibify("deadArmUpperL", this.jointUpperArmL);
                this.gibify("deadArmLowerL", this.jointLowerArmL);
            }
            else {
                this.gibify("deadArmLowerL", this.jointLowerArmL);
            }
            this.onGib();
        };
        Character.prototype.gibRightArm = function () {
            var rand = DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3);
            if (rand == 1) {
                this.gibify("deadArmUpperR", this.jointUpperArmR);
            }
            else if (rand == 2) {
                this.gibify("deadArmUpperR", this.jointUpperArmR);
                this.gibify("deadArmLowerR", this.jointLowerArmR);
            }
            else {
                this.gibify("deadArmLowerR", this.jointLowerArmR);
            }
            this.onGib();
        };
        Character.prototype.gibLeftLeg = function () {
            var rand = DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3);
            if (rand == 1) {
                this.gibify("deadLegUpperL", this.jointUpperLegL);
            }
            else if (rand == 2) {
                this.gibify("deadLegUpperL", this.jointUpperLegL);
                this.gibify("deadLegLowerL", this.jointLowerLegL);
            }
            else {
                this.gibify("deadLegLowerL", this.jointLowerLegL);
            }
            this.onGib();
        };
        Character.prototype.gibRightLeg = function () {
            var rand = DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3);
            if (rand == 1) {
                this.gibify("deadLegUpperR", this.jointUpperLegL);
            }
            else if (rand == 2) {
                this.gibify("deadLegUpperR", this.jointUpperLegL);
                this.gibify("deadLegLowerR", this.jointLowerLegL);
            }
            else {
                this.gibify("deadLegLowerR", this.jointLowerLegL);
            }
            this.onGib();
        };
        Character.prototype.onGib = function () {
            this.gibBody();
            this.createBloodDecal(this);
            DinogenArena.GameUtil.GetGameState().createImpactEffect(this.x, this.y, this.rotation, ImpactEffect.TYPE_GIB);
            DinogenArena.SoundManager.PlayWorldSound("physics_flesh_gib", this.x, this.y, 2);
        };
        Character.prototype.replaceInventoryItem = function (_index, _newItem) {
            if (_index <= this.inventory.getLength()) {
                this.inventory.setItemAt(_index, _newItem);
                this.loadCurrentInventoryItem();
                this.updateHUD();
            }
        };
        Character.prototype.swapInventoryItem = function (_index, _newItem) {
            if (_index <= this.inventory.getLength()) {
                var droppedItem = this.dropInventoryItem(_index);
                this.inventory.addItem(_newItem, this.currentInventoryIndex);
                this.loadCurrentInventoryItem();
                this.updateHUD();
            }
        };
        Character.prototype.dropCurrentInventoryItem = function () {
            return this.dropInventoryItem(this.currentInventoryIndex);
        };
        Character.prototype.dropInventoryItem = function (_index) {
            var droppedItem;
            if (_index <= this.inventory.getLength()) {
                var item = this.inventory.getItemAt(_index);
                if (!this.isAlive()) {
                    var firearm = item;
                    if (firearm) {
                        firearm.setAmmo(Math.ceil(Math.min(firearm.getAmmo(), firearm.getAmmoMax()) * Math.random()));
                    }
                }
                var rad = this.rotation + (DinogenArena.WilkinUtil.GenerateRandomNumber(-45, 45) * DinogenArena.WilkinUtil.TO_RADIANS);
                var offset = 40;
                var vx = Math.cos(rad) * offset;
                var vy = Math.sin(rad) * offset;
                droppedItem = DinogenArena.GameUtil.GetGameState().createDroppedItem(null, this.x + vx, this.y + vy, DinogenArena.WilkinUtil.GenerateRandomNumber(-180, 180), item);
                DinogenArena.GameUtil.ApplyForce(droppedItem.primaryBody, vx * Math.random(), vy * Math.random());
                droppedItem.primaryBody.rotateLeft(DinogenArena.WilkinUtil.GenerateRandomNumber(-12, 12));
                this.inventory.removeItemAt(_index);
            }
            return droppedItem;
        };
        Character.prototype.stopAllActions = function () {
            _super.prototype.stopAllActions.call(this);
            this.triggerWeapon(false);
            this.stopWeaponFire();
            if (this.bIsReloading) {
                this.cancelReload();
            }
        };
        Character.prototype.canReload = function () {
            var firearm = this.getCurrentFirearm();
            return firearm && !this.bIsReloading && !this.bIsMeleeAttacking && firearm.getMag() < firearm.getMagMax() && firearm.getAmmo() > 0;
        };
        Character.prototype.isReloading = function () {
            return this.bIsReloading;
        };
        Character.prototype.canFire = function () {
            var firearm = this.getCurrentFirearm();
            return firearm && !this.isSprinting() && !this.bIsReloading && !this.bFireDelay && firearm.hasMag() && !this.bIsMeleeAttacking;
        };
        return Character;
    }(Pawn));
    DinogenArena.Character = Character;
    var Dinosaur = /** @class */ (function (_super) {
        __extends(Dinosaur, _super);
        function Dinosaur(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.stopAttackTimer = 0;
            _this.attackDamage = 100;
            _this.attackSpeed = 45;
            _this.attackCooldownMax = 15;
            _this.attackCooldown = 0;
            _this.bWantsToAttack = false;
            _this.bIsAttacking = false;
            _this.bAnim = false;
            _this.bCanSideStep = false;
            _this.bSurvivalSavage = false;
            _this.stepSoundId = "dino_step_normal";
            _this.stepTimerMax = 18;
            //this.bCheckFootprints = false;
            if (DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                _this.bPlayStepSound = false;
            }
            if (_this.isPlayer()) {
                if (_this.projectileType) {
                    DinogenArena.GameUtil.GetGameState().setCameraMouseLookRatioMultiplier(2);
                }
                else {
                    DinogenArena.GameUtil.GetGameState().setCameraMouseLookRatioMultiplier(1);
                }
            }
            return _this;
        }
        Dinosaur.prototype.destroy = function () {
            this.deathSoundIds = null;
            this.bodyClip.animations.destroy();
            this.bodyClip = null;
            _super.prototype.destroy.call(this);
        };
        Dinosaur.prototype.tick = function () {
            if (this.isAlive()) {
                if (this.isMoving()) {
                    if (this.bodyClip) {
                        if (!this.bAnim) {
                            var anim = this.bodyClip.animations.play("walk");
                            this.bAnim = true;
                        }
                    }
                }
                else {
                    if (this.bodyClip) {
                        this.bodyClip.animations.stop();
                        this.bAnim = false;
                    }
                }
                if (this.stopAttackTimer > 0) {
                    this.stopAttackTimer--;
                    if (this.stopAttackTimer == 0) {
                        this.stopAttack();
                        this.stopAttackTimer = -1;
                    }
                }
                if (this.attackCooldown > 0) {
                    this.attackCooldown--;
                }
                else {
                    if (this.bWantsToAttack) {
                        this.attack();
                    }
                }
            }
            _super.prototype.tick.call(this);
        };
        Dinosaur.prototype.onTakeDamage = function (_damageAmount, _instigator, _causer, _damageType) {
            _super.prototype.onTakeDamage.call(this, _damageAmount, _instigator, _causer, _damageType);
            if (this.isAlive()) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) == 1) {
                    this.playDeathSound(0.75);
                }
            }
        };
        Dinosaur.prototype.pushBack = function () {
            if (!this.primaryBody) {
                return;
            }
            var speed = DinogenArena.WilkinUtil.GenerateRandomNumber(5, 20) / (this.primaryBody.mass);
            var rad = this.rotation;
            var vx = Math.cos(rad) * -speed;
            var vy = Math.sin(rad) * -speed;
            DinogenArena.GameUtil.ApplyForce(this.primaryBody, vx, vy);
        };
        Dinosaur.prototype.setAsSurvivalSavage = function () {
            this.bSurvivalSavage = true;
            this.setBodiesAsSavage();
        };
        Dinosaur.prototype.setBodiesAsSavage = function () {
            if (this.bodies) {
                for (var i = 0; i < this.bodies.length; i++) {
                    var body = this.bodies[i];
                    if (body.sprite) {
                        body.sprite.tint = DinogenArena.GameUtil.COLOUR_THEME;
                    }
                }
            }
        };
        Dinosaur.prototype.setState = function (_val) {
            _super.prototype.setState.call(this, _val);
            if (this.bSurvivalSavage) {
                this.setBodiesAsSavage();
            }
        };
        Dinosaur.prototype.hasProjectileAttack = function () {
            return this.projectileType != null;
        };
        Dinosaur.prototype.getProjectileType = function () {
            return this.projectileType;
        };
        Dinosaur.prototype.canSideStep = function () {
            return this.bCanSideStep;
        };
        Dinosaur.prototype.onGamePaused = function () {
            _super.prototype.onGamePaused.call(this);
            if (this.bodyClip) {
                this.bodyClip.animations.stop();
                this.bAnim = false;
            }
        };
        Dinosaur.prototype.onGameResumed = function () {
            _super.prototype.onGameResumed.call(this);
        };
        Dinosaur.prototype.triggerAttack = function (_bVal) {
            if (!this.isAlive()) {
                return;
            }
            if (_bVal) {
                this.startAttack();
            }
            else {
                if (this.isPlayer() && !this.hasProjectileAttack()) {
                    this.queueStopAttack();
                }
                else {
                    this.stopAttack();
                }
            }
        };
        Dinosaur.prototype.queueStopAttack = function () {
            this.stopAttackTimer = Math.min(this.attackCooldownMax - 1, 20);
        };
        Dinosaur.prototype.startAttack = function () {
            this.bWantsToAttack = true;
        };
        Dinosaur.prototype.stopAttack = function () {
            this.bWantsToAttack = false;
            this.bIsAttacking = false;
        };
        Dinosaur.prototype.attack = function () {
            if (this.projectileType) {
                var projectileData = {
                    damage: this.attackDamage,
                    damageMultiplier: 1
                };
                if (this.projectileType == ProjectileBase.TYPE_VENOM) {
                    var venomRotationTarget = this.rotation;
                    var venomStartX = this.x + (Math.cos(venomRotationTarget) * 50);
                    var venomStartY = this.y + (Math.sin(venomRotationTarget) * 50);
                    DinogenArena.GameUtil.GetGameState().createProjectile(venomStartX, venomStartY, venomRotationTarget, this.projectileType, this, this.controller, projectileData);
                    DinogenArena.GameUtil.GetGameState().createImpactEffect(venomStartX, venomStartY, this.rotation, ImpactEffect.TYPE_VENOM);
                }
                else if (this.projectileType == ProjectileBase.TYPE_NEEDLE) {
                    var accuracy = 8;
                    for (var i = 0; i < DinogenArena.WilkinUtil.GenerateRandomNumber(2, 3); i++) {
                        var useRotation = this.rotation + DinogenArena.WilkinUtil.GenerateRandomNumber(-accuracy, accuracy) * DinogenArena.WilkinUtil.TO_RADIANS;
                        DinogenArena.GameUtil.GetGameState().createProjectile(this.x + (Math.cos(useRotation) * 70), this.y + (Math.sin(useRotation) * 70), useRotation, this.projectileType, this, this.controller, projectileData);
                    }
                }
            }
            else {
                var rad = this.rotation;
                var realAttackSpeed = this.attackSpeed / this.primaryBody.mass;
                var vx = Math.cos(rad) * realAttackSpeed;
                var vy = Math.sin(rad) * realAttackSpeed;
                DinogenArena.GameUtil.ApplyForce(this.primaryBody, vx, vy);
            }
            this.attackCooldown = this.attackCooldownMax;
            this.bIsAttacking = true;
            this.playAttackSound();
            if (this.isPlayer()) {
                var recoil = this.attackDamage * 0.2;
                this.getPlayerController().getHUD().getCrosshair().addRecoil(this.attackDamage * 0.5);
                DinogenArena.GameUtil.GetGameState().shakeCamera(recoil);
            }
        };
        Dinosaur.prototype.playAttackSound = function () {
            DinogenArena.SoundManager.PlayWorldSound(this.attackSoundId, this.x, this.y, 3);
        };
        Dinosaur.prototype.getAttackSoundId = function () {
            return this.attackSoundId;
        };
        Dinosaur.prototype.playDeathSound = function (_volumeMultiplier) {
            if (_volumeMultiplier === void 0) { _volumeMultiplier = 1; }
            if (this.deathSoundIds) {
                DinogenArena.SoundManager.PlayWorldSound(this.deathSoundIds[DinogenArena.WilkinUtil.GenerateRandomNumber(0, this.deathSoundIds.length - 1)], this.x, this.y, 0, _volumeMultiplier);
            }
        };
        Dinosaur.prototype.onHit = function (_obj) {
            if (_obj instanceof Actor) {
                if (this.bIsAttacking) {
                    var actor = _obj;
                    var pawn = actor instanceof Pawn ? actor : null;
                    if (pawn) {
                        if (this.team != pawn.getTeam()) {
                            if (pawn.isAlive()) {
                                pawn.takeDamage(this.attackDamage * this.modifiers["damage_inflict_dino"], this.controller, this, DinogenArena.DamageType.DAMAGE_TYPE_DINOSAUR);
                                this.controller.onEnemyHit();
                                DinogenArena.SoundManager.PlayWorldSound("physics_flesh_break", this.x, this.y, 3);
                            }
                        }
                    }
                    else if (actor) {
                        actor.takeDamage(this.attackDamage * this.modifiers["damage_inflict_dino"], this.controller, this, DinogenArena.DamageType.DAMAGE_TYPE_DINOSAUR);
                        //this.controller.onEnemyHit();
                        DinogenArena.SoundManager.PlayWorldSound("physics_flesh_break", this.x, this.y, 3);
                    }
                }
            }
            else {
                DinogenArena.SoundManager.PlayWorldSound("physics_body_hit", this.x, this.y, 3, DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) * 0.1);
            }
        };
        Dinosaur.prototype.onDeath = function (_killingDamage, _instigator, _causer, _damageType) {
            _super.prototype.onDeath.call(this, _killingDamage, _instigator, _causer, _damageType);
            if (this.bIsAttacking) {
                this.stopAttack();
            }
            this.playDeathSound();
            if (this.bSurvivalSavage) {
                //GameUtil.GetGameState().createDroppedItem(null, this.x, this.y, this.rotation, InventoryManager.GetRandomItem());
                var totalMoney = DinogenArena.WilkinUtil.GenerateRandomNumber(3, 8);
                var moneyMult = 1 + (DinogenArena.GameUtil.GetGameState().gameMode.getSurvival().getCurrentWave() * 0.1);
                for (var i = 0; i < totalMoney; i++) {
                    var money = DinogenArena.GameUtil.GetGameState().createMoneyDrop(null, this.x, this.y, this.rotation, Math.ceil((this.getKillReward() * Math.random()) * moneyMult));
                    DinogenArena.GameUtil.ApplyForce(money.primaryBody, DinogenArena.WilkinUtil.GenerateRandomNumber(-32, 32), DinogenArena.WilkinUtil.GenerateRandomNumber(-32, 32));
                    money.primaryBody.angularVelocity = DinogenArena.WilkinUtil.GenerateRandomNumber(-32, 32);
                }
                DinogenArena.SoundManager.PlayWorldSound("ui_equip_perk", this.x, this.y);
            }
        };
        Dinosaur.prototype.stopAllActions = function () {
            _super.prototype.stopAllActions.call(this);
            this.triggerAttack(false);
            this.stopAttack();
        };
        Dinosaur.prototype.isAttacking = function () {
            return this.bIsAttacking;
        };
        Dinosaur.TYPE_RAPTOR = "TYPE_RAPTOR";
        Dinosaur.TYPE_COMPY = "TYPE_COMPY";
        Dinosaur.TYPE_DILO = "TYPE_DILO";
        Dinosaur.TYPE_SPINOSAURUS = "TYPE_SPINOSAURUS";
        Dinosaur.TYPE_ALLOSAURUS = "TYPE_ALLOSAURUS";
        Dinosaur.TYPE_NEEDLER = "TYPE_NEEDLER";
        Dinosaur.TYPE_TREX = "TYPE_TREX";
        return Dinosaur;
    }(Pawn));
    DinogenArena.Dinosaur = Dinosaur;
    var Allosaurus = /** @class */ (function (_super) {
        __extends(Allosaurus, _super);
        function Allosaurus(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.referenceScale = 1;
            _this.footprintKey = "footprint_blood_allo";
            _this.attackSoundId = "dino_allosaurus_attack";
            _this.deathSoundIds = [
                "dino_allosaurus_death_1",
                "dino_allosaurus_death_2",
                "dino_allosaurus_death_3"
            ];
            _this.stepSoundId = "dino_step_big";
            _this.stepTimerMax = 28;
            _this.speed = 95;
            _this.attackSpeed = 300;
            _this.attackDamage = 100;
            _this.attackCooldownMax = 45;
            _this.setHealthMax(750);
            _this.createBody();
            _this.setHitSpriteSize(40);
            return _this;
        }
        Allosaurus.prototype.getKillReward = function () {
            return 500;
        };
        Allosaurus.prototype.createBody = function () {
            var atlasId = "atlas_allosaurus";
            this.bodyClip = this.game.add.sprite(this.x, this.y, atlasId, "mc_base0000");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.bodyClip, DinogenArena.GameState.INDEX_TOP);
            var anim = Phaser.Animation.generateFrameNames("mc_base", 0, 25, "", 4);
            var walk = this.bodyClip.animations.add("walk", anim, 30, true, false);
            this.game.physics.box2d.enable(this.bodyClip);
            this.bodyClip.body.setRectangle(100, 32);
            var neck = this.game.add.sprite(this.x + 8, this.y, atlasId, "neck");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(neck);
            var head = this.game.add.sprite(this.x + 25, this.y, atlasId, "head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(head);
            this.primaryBody = head.body;
            var tail1 = this.game.add.sprite(this.x - 30, this.y, atlasId, "tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(tail1.x - 20, this.y, atlasId, "tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(tail2.x - 20, this.y, atlasId, "tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail3);
            //Joints
            var jointOffset = 3;
            this.joints = [
                this.game.physics.box2d.revoluteJoint(head, neck, (-head.width * 0.5) + 2, 0, (neck.width * 0.5) - 2, 0, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck, this.bodyClip, -10, 0, 44, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(this.bodyClip, tail1, -4, 0, 30, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, (-tail1.width * 0.5) + jointOffset, 0, (tail2.width * 0.5) - jointOffset, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, (-tail2.width * 0.5) + jointOffset, 0, (tail3.width * 0.5) - jointOffset, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(neck.body);
            this.addBody(this.bodyClip.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.healthBarBody = this.bodyClip.body;
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.linearDamping = 8;
                body.angularDamping = 8;
                body.restitution = 0;
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
                if (body.sprite == head) {
                    body.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
                    body.setCollisionMask(DinogenArena.GameState.MASK_PAWN); //MASK_PAWN_DINO
                    body.angularDamping = 8;
                }
                else if (body.sprite == this.bodyClip) {
                    body.setCollisionMask(DinogenArena.GameState.MASK_PAWN);
                }
                else {
                    body.setCollisionMask(0); //body.setCollisionMask(GameState.MASK_PAWN_DINO);
                }
            }
        };
        Allosaurus.prototype.createDeathBody = function () {
            _super.prototype.createDeathBody.call(this);
            var atlasId = "atlas_allosaurus";
            var startX = this.x;
            var startY = this.y;
            var torso = this.game.add.sprite(startX, startY, atlasId, "dead_torso");
            DinogenArena.GameUtil.GetGameState().addToWorld(torso, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(torso);
            torso.body.setRectangle(torso.width, 40);
            var neck = this.game.add.sprite(startX + 43.5, startY - 5.65, atlasId, "dead_neck");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(neck);
            neck.body.setRectangle(neck.width, 16);
            var tail1 = this.game.add.sprite(startX - 47.05, startY, atlasId, "dead_tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(startX - 71.3, startY, atlasId, "dead_tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(startX - 92.75, startY, atlasId, "dead_tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail3);
            var legUpper = this.game.add.sprite(startX - 13.05, startY + 13.25, atlasId, "dead_leg_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(legUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legUpper);
            var legMid = this.game.add.sprite(startX - 10.75, startY + 35.9, atlasId, "dead_leg_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(legMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legMid);
            var legLower = this.game.add.sprite(startX - 3, startY + 51, atlasId, "dead_leg_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(legLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legLower);
            var armUpper = this.game.add.sprite(startX + 24.95, startY + 11.7, atlasId, "dead_arm_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(armUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armUpper);
            var armMid = this.game.add.sprite(startX + 22.75, startY + 23.55, atlasId, "dead_arm_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(armMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armMid);
            var armLower = this.game.add.sprite(startX + 20.75, startY + 36.1, atlasId, "dead_arm_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(armLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armLower);
            var head = this.game.add.sprite(startX + 63.65, startY - 9.05, atlasId, "dead_head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(head);
            var jaw = this.game.add.sprite(startX + 61.55, startY - 5.45, atlasId, "dead_jaw");
            DinogenArena.GameUtil.GetGameState().addToWorld(jaw, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(jaw);
            //Joints
            var jointPadding = 2;
            var tailPadding = 3;
            this.joints = [
                this.game.physics.box2d.revoluteJoint(neck, head, 4, -4, (-head.width * 0.5), 0, 0, 0, 0, -5, 0, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck, jaw, 8, 2, -5, -2, 0, 0, 0, 0, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, neck, 30, -4, (-neck.width * 0.5), 4, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, armUpper, 24, 7, 0, -8, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armUpper, armMid, 0, (armUpper.height * 0.4) - jointPadding, 0, (-armMid.height * 0.4) + jointPadding, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armMid, armLower, 0, (armMid.height * 0.4) - jointPadding, 0, (-armLower.height * 0.4) + jointPadding, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, legUpper, -10, 8, 0, -10, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legUpper, legMid, 0, 12, 0, -12, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legMid, legLower, 0, 8, -8, -8, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, tail1, (-torso.width * 0.5) + 8, 0, (tail1.width * 0.5) - tailPadding, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, (-tail1.width * 0.5) + tailPadding, 0, (tail2.width * 0.5) - tailPadding, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, (-tail2.width * 0.5) + tailPadding, 0, (tail3.width * 0.5) - tailPadding, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(jaw.body);
            this.addBody(neck.body);
            this.addBody(torso.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.addBody(legUpper.body);
            this.addBody(legMid.body);
            this.addBody(legLower.body);
            this.addBody(armUpper.body);
            this.addBody(armMid.body);
            this.addBody(armLower.body);
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
                body.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
                body.linearDamping = 5;
                body.angularDamping = 5;
            }
            this.primaryBody = torso.body;
            this.rotateAroundPoint(this.primaryBody.x, this.primaryBody.y, this.rotation, this.bodies);
        };
        return Allosaurus;
    }(Dinosaur));
    DinogenArena.Allosaurus = Allosaurus;
    var TRex = /** @class */ (function (_super) {
        __extends(TRex, _super);
        function TRex(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.referenceScale = 1;
            _this.footprintKey = "footprint_blood_trex";
            _this.attackSoundId = "dino_trex_attack";
            _this.deathSoundIds = [
                "dino_trex_death_1",
                "dino_trex_death_2",
                "dino_trex_death_3"
            ];
            _this.stepSoundId = "dino_step_big";
            _this.stepTimerMax = 30;
            _this.speed = 180;
            _this.attackSpeed = 1000;
            _this.attackDamage = 500;
            _this.attackCooldownMax = 60;
            _this.setRegenTimerMax(1);
            _this.setHealthMax(2500);
            _this.createBody();
            _this.setHitSpriteSize(50);
            return _this;
        }
        TRex.prototype.getKillReward = function () {
            return 5000;
        };
        TRex.prototype.createBody = function () {
            this.bodyClip = this.game.add.sprite(this.x, this.y, "atlas_trex", "mc_base0000");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.bodyClip, DinogenArena.GameState.INDEX_TOP);
            var anim = Phaser.Animation.generateFrameNames("mc_base", 0, 25, "", 4);
            var walk = this.bodyClip.animations.add("walk", anim, 30, true, false);
            this.game.physics.box2d.enable(this.bodyClip);
            this.bodyClip.body.setRectangle(100, 32);
            var neck1 = this.game.add.sprite(this.x + 8, this.y, "atlas_trex", "neck_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck1, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(neck1);
            var neck2 = this.game.add.sprite(this.x + 15, this.y, "atlas_trex", "neck_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck2, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(neck2);
            var head = this.game.add.sprite(this.x + 25, this.y, "atlas_trex", "head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(head);
            this.primaryBody = head.body;
            var tail1 = this.game.add.sprite(this.x - 20, this.y, "atlas_trex", "tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(tail1.x - 20, this.y, "atlas_trex", "tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(tail2.x - 20, this.y, "atlas_trex", "tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail3);
            var tail4 = this.game.add.sprite(tail3.x - 20, this.y, "atlas_trex", "tail_4");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail4, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail4);
            //Joints
            var jointOffset = 3;
            this.joints = [
                this.game.physics.box2d.revoluteJoint(head, neck1, -8, 0, 12, 0, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck1, neck2, (-neck1.width * 0.5) + jointOffset, 0, (neck2.width * 0.5) - jointOffset, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck2, this.bodyClip, -20, 0, 52, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(this.bodyClip, tail1, -12, 0, 10, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, (-tail1.width * 0.5) + jointOffset, 0, (tail2.width * 0.5) - jointOffset, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, (-tail2.width * 0.5) + jointOffset, 0, (tail3.width * 0.5) - jointOffset, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail3, tail4, (-tail3.width * 0.5) + jointOffset, 0, (tail4.width * 0.5) - jointOffset, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(neck1.body);
            this.addBody(neck2.body);
            this.addBody(this.bodyClip.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.addBody(tail4.body);
            this.healthBarBody = this.bodyClip.body;
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.linearDamping = 8;
                body.angularDamping = 8;
                body.restitution = 0;
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
                if (body.sprite == head) {
                    body.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
                    body.setCollisionMask(DinogenArena.GameState.MASK_PAWN); //MASK_PAWN_DINO
                    body.angularDamping = 8;
                }
                else if (body.sprite == this.bodyClip) {
                    body.setCollisionMask(DinogenArena.GameState.MASK_PAWN);
                }
                else {
                    body.setCollisionMask(0); //body.setCollisionMask(GameState.MASK_PAWN_DINO);
                }
            }
        };
        TRex.prototype.createDeathBody = function () {
            _super.prototype.createDeathBody.call(this);
            var startX = this.x;
            var startY = this.y;
            var torso = this.game.add.sprite(startX, startY, "atlas_trex", "dead_torso");
            DinogenArena.GameUtil.GetGameState().addToWorld(torso, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(torso);
            //torso.body.setRectangle(torso.width, 40);
            var neck = this.game.add.sprite(startX + 64.5, startY - 17.9, "atlas_trex", "dead_neck");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(neck);
            neck.body.setRectangle(neck.width, 24);
            var head = this.game.add.sprite(startX + 93.6, startY - 23.2, "atlas_trex", "dead_head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(head);
            head.body.setRectangle(head.width, 12);
            var jaw = this.game.add.sprite(startX + 90.45, startY - 10, "atlas_trex", "dead_jaw");
            DinogenArena.GameUtil.GetGameState().addToWorld(jaw, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(jaw);
            jaw.body.setRectangle(jaw.width, 8);
            var tail1 = this.game.add.sprite(startX - 65, startY + 1, "atlas_trex", "dead_tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(startX - 100, startY + 1, "atlas_trex", "dead_tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(startX - 130, startY + 1, "atlas_trex", "dead_tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail3);
            var tail4 = this.game.add.sprite(startX - 165, startY + 1, "atlas_trex", "dead_tail_4");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail4, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail4);
            var legUpper = this.game.add.sprite(startX - 9.15, startY + 10, "atlas_trex", "dead_leg_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(legUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legUpper);
            var legMid = this.game.add.sprite(startX + 1.25, startY + 28, "atlas_trex", "dead_leg_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(legMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legMid);
            var legLower = this.game.add.sprite(startX, startY + 40, "atlas_trex", "dead_leg_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(legLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legLower);
            var armUpper = this.game.add.sprite(startX + 28.95, startY + 16.35, "atlas_trex", "dead_arm_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(armUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armUpper);
            var armMid = this.game.add.sprite(startX + 29, startY + 30, "atlas_trex", "dead_arm_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(armMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armMid);
            var armLower = this.game.add.sprite(startX + 29.4, startY + 38.45, "atlas_trex", "dead_arm_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(armLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armLower);
            //Joints
            var jointPadding = 2;
            var tailPadding = 3;
            this.joints = [
                this.game.physics.box2d.revoluteJoint(neck, head, 18, -4, -10, 0, 0, 0, 0, -5, 0, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck, jaw, 10, 0, -16, -4, 0, 0, 0, 0, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, neck, 42, -2, -20, 12, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, armUpper, 23, 12, 0, -8, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armUpper, armMid, 0, (armUpper.height * 0.4) - jointPadding, 0, (-armMid.height * 0.4) + jointPadding, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armMid, armLower, 0, (armMid.height * 0.4) - jointPadding, 0, (-armLower.height * 0.4) + jointPadding, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, legUpper, -10, 10, 0, -10, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legUpper, legMid, 4, (legUpper.height * 0.4), -4, (-legMid.height * 0.4) + jointPadding, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legMid, legLower, 0, (legMid.height * 0.4), 0, (-legLower.height * 0.4) + jointPadding, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, tail1, (-torso.width * 0.5) + 8, 0, (tail1.width * 0.5) - tailPadding, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, (-tail1.width * 0.5) + tailPadding, 0, (tail2.width * 0.5) - tailPadding, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, (-tail2.width * 0.5) + tailPadding, 0, (tail3.width * 0.5) - tailPadding, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail3, tail4, (-tail3.width * 0.5) + tailPadding, 0, (tail4.width * 0.5) - tailPadding, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(jaw.body);
            this.addBody(neck.body);
            this.addBody(torso.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.addBody(tail4.body);
            this.addBody(legUpper.body);
            this.addBody(legMid.body);
            this.addBody(legLower.body);
            this.addBody(armUpper.body);
            this.addBody(armMid.body);
            this.addBody(armLower.body);
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
                body.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
                body.linearDamping = 6;
                body.angularDamping = 4;
            }
            this.primaryBody = torso.body;
            this.rotateAroundPoint(this.primaryBody.x, this.primaryBody.y, this.rotation, this.bodies);
            jaw.body.rotateLeft(DinogenArena.WilkinUtil.GenerateRandomNumber(50, 100));
        };
        return TRex;
    }(Dinosaur));
    DinogenArena.TRex = TRex;
    var Spinosaurus = /** @class */ (function (_super) {
        __extends(Spinosaurus, _super);
        function Spinosaurus(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.referenceScale = 1;
            _this.footprintKey = "footprint_blood_spino";
            _this.attackSoundId = "dino_spinosaurus_attack";
            _this.deathSoundIds = [
                "dino_spinosaurus_death_1",
                "dino_spinosaurus_death_2",
                "dino_spinosaurus_death_3"
            ];
            _this.stepSoundId = "dino_step_big";
            _this.stepTimerMax = 30;
            _this.speed = 65;
            _this.attackSpeed = 340;
            _this.attackDamage = 200;
            _this.attackCooldownMax = 45;
            _this.setHealthMax(1200);
            _this.createBody();
            _this.setHitSpriteSize(50);
            return _this;
        }
        Spinosaurus.prototype.getKillReward = function () {
            return 1000;
        };
        Spinosaurus.prototype.createBody = function () {
            this.bodyClip = this.game.add.sprite(this.x, this.y, "atlas_spinosaurus", "mc_base0000");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.bodyClip, DinogenArena.GameState.INDEX_TOP);
            var anim = Phaser.Animation.generateFrameNames("mc_base", 0, 25, "", 4);
            var walk = this.bodyClip.animations.add("walk", anim, 30, true, false);
            this.game.physics.box2d.enable(this.bodyClip);
            this.bodyClip.body.setRectangle(70, 32);
            var neck = this.game.add.sprite(this.x + 8, this.y, "atlas_spinosaurus", "neck");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(neck);
            var head = this.game.add.sprite(this.x + 25, this.y, "atlas_spinosaurus", "head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(head);
            this.primaryBody = head.body;
            var tail1 = this.game.add.sprite(this.x - 20, this.y, "atlas_spinosaurus", "tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(tail1.x - 20, this.y, "atlas_spinosaurus", "tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(tail2.x - 20, this.y, "atlas_spinosaurus", "tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(tail3);
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(head, neck, -11, 0, 11, 0, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck, this.bodyClip, -13, 0, 42, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(this.bodyClip, tail1, -28, 0, 32, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -32, 0, 14, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -13, 0, 10, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(neck.body);
            this.addBody(this.bodyClip.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.healthBarBody = this.bodyClip.body;
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.linearDamping = 8;
                body.angularDamping = 6;
                body.restitution = 0;
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
                if (body.sprite == head) {
                    body.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
                    body.setCollisionMask(DinogenArena.GameState.MASK_PAWN);
                    body.angularDamping = 2;
                }
                else if (body.sprite == this.bodyClip) {
                    body.setCollisionMask(DinogenArena.GameState.MASK_PAWN);
                }
                else {
                    body.setCollisionMask(0);
                }
            }
        };
        Spinosaurus.prototype.createDeathBody = function () {
            _super.prototype.createDeathBody.call(this);
            var startX = this.x;
            var startY = this.y;
            var torso = this.game.add.sprite(startX + 20, startY - 6, "atlas_spinosaurus", "dead_torso");
            DinogenArena.GameUtil.GetGameState().addToWorld(torso, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(torso);
            torso.body.setRectangle(torso.width, 40);
            var neck = this.game.add.sprite(startX + 37, startY - 14.6, "atlas_spinosaurus", "dead_neck");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(neck);
            neck.body.setRectangle(neck.width, 16);
            var tail1 = this.game.add.sprite(startX - 55, startY, "atlas_spinosaurus", "dead_tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(startX - 75, startY, "atlas_spinosaurus", "dead_tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(startX - 90, startY, "atlas_spinosaurus", "dead_tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail3);
            var legUpper = this.game.add.sprite(startX + 15, startY - 2, "atlas_spinosaurus", "dead_leg_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(legUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legUpper);
            var legMid = this.game.add.sprite(startX + 16.8, startY + 11, "atlas_spinosaurus", "dead_leg_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(legMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legMid);
            var legLower = this.game.add.sprite(startX + 18.2, startY + 25, "atlas_spinosaurus", "dead_leg_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(legLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legLower);
            var armUpper = this.game.add.sprite(startX + 29.7, startY - 3.25, "atlas_spinosaurus", "dead_arm_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(armUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armUpper);
            var armMid = this.game.add.sprite(startX + 29.7, startY + 4.1, "atlas_spinosaurus", "dead_arm_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(armMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armMid);
            var armLower = this.game.add.sprite(startX + 30.5, startY + 11.4, "atlas_spinosaurus", "dead_arm_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(armLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armLower);
            var head = this.game.add.sprite(startX + 46.9, startY - 18.45, "atlas_spinosaurus", "dead_head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(head);
            var jaw = this.game.add.sprite(startX + 46.5, startY - 16, "atlas_spinosaurus", "dead_jaw");
            DinogenArena.GameUtil.GetGameState().addToWorld(jaw, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(jaw);
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(neck, head, 20, 4, 0, -8, 0, 0, 0, -5, 0, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck, jaw, 14, 4, 0, -8, 0, 0, 0, 0, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, neck, 40, 18, -12, 6, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, armUpper, 24, 16, 0, -12, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armUpper, armMid, 0, 7, 0, -7, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armMid, armLower, 0, 7, 0, -7, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, legUpper, -8, 18, 0, -8, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legUpper, legMid, 0, 12, 0, -12, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legMid, legLower, 0, 8, -8, -8, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, tail1, -38, 2, 34, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -34, 0, 18, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -12, 0, 11, -0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(jaw.body);
            this.addBody(neck.body);
            this.addBody(torso.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.addBody(legUpper.body);
            this.addBody(legMid.body);
            this.addBody(legLower.body);
            this.addBody(armUpper.body);
            this.addBody(armMid.body);
            this.addBody(armLower.body);
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
                body.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
                body.linearDamping = 5;
                body.angularDamping = 5;
            }
            this.primaryBody = torso.body;
            this.rotateAroundPoint(this.primaryBody.x, this.primaryBody.y, this.rotation, this.bodies);
        };
        return Spinosaurus;
    }(Dinosaur));
    DinogenArena.Spinosaurus = Spinosaurus;
    var Raptor = /** @class */ (function (_super) {
        __extends(Raptor, _super);
        function Raptor(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.referenceScale = 0.75;
            _this.footprintKey = "footprint_blood_raptor";
            _this.attackSoundId = "dino_raptor_attack";
            _this.deathSoundIds = [
                "dino_raptor_death_1",
                "dino_raptor_death_2",
                "dino_raptor_death_3"
            ];
            _this.speed = 28;
            _this.attackSpeed = 200;
            _this.attackDamage = 80;
            _this.attackCooldownMax = 30;
            _this.setHealthMax(200);
            _this.createBody();
            _this.setHitSpriteSize(64);
            return _this;
        }
        Raptor.prototype.getKillReward = function () {
            return 250;
        };
        Raptor.prototype.createBody = function () {
            this.bodyClip = this.game.add.sprite(this.x, this.y, "atlas_raptor", "mc_base0000");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.bodyClip);
            var anim = Phaser.Animation.generateFrameNames("mc_base", 0, 25, "", 4);
            var walk = this.bodyClip.animations.add("walk", anim, DinogenArena.GameUtil.frameRate, true, false);
            this.game.physics.box2d.enable(this.bodyClip);
            this.primaryBody = this.bodyClip.body;
            this.primaryBody.linearDamping = 5;
            this.primaryBody.angularDamping = 2;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_PAWN); //MASK_PAWN_DINO
            var tail1 = this.game.add.sprite(this.x - 20, this.y, "atlas_raptor", "tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(tail1.x - 20, this.y, "atlas_raptor", "tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(tail2.x - 20, this.y, "atlas_raptor", "tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3);
            this.game.physics.box2d.enable(tail3);
            var tailDamping = 10;
            var tails = [tail1, tail2, tail3];
            for (var i = 0; i < tails.length; i++) {
                var tailBody = tails[i].body;
                tailBody.restitution = 1;
                tailBody.linearDamping = tailDamping;
                tailBody.angularDamping = tailDamping;
                tailBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
                tailBody.setCollisionMask(0);
            }
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(this.bodyClip, tail1, -10, 0, 12, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -10, 0, 10, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -10, 0, 10, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(this.bodyClip.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
        };
        Raptor.prototype.createDeathBody = function () {
            _super.prototype.createDeathBody.call(this);
            var startX = this.x;
            var startY = this.y;
            var neck = this.game.add.sprite(startX + 37.5, startY - 14.6, "atlas_raptor", "dead_neck");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(neck);
            neck.body.setRectangle(6, neck.height);
            var tail1 = this.game.add.sprite(startX + 2.4, startY - 6.75, "atlas_raptor", "dead_tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(startX - 14.9, startY - 7.7, "atlas_raptor", "dead_tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(startX - 33.8, startY - 7, "atlas_raptor", "dead_tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail3);
            var torso = this.game.add.sprite(startX + 20.2, startY - 6, "atlas_raptor", "dead_torso");
            DinogenArena.GameUtil.GetGameState().addToWorld(torso, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(torso);
            var legUpper = this.game.add.sprite(startX + 15, startY - 2, "atlas_raptor", "dead_leg_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(legUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legUpper);
            var legMid = this.game.add.sprite(startX + 16.8, startY + 11, "atlas_raptor", "dead_leg_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(legMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legMid);
            var legLower = this.game.add.sprite(startX + 18.2, startY + 25, "atlas_raptor", "dead_leg_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(legLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legLower);
            var armUpper = this.game.add.sprite(startX + 29.7, startY - 3.25, "atlas_raptor", "dead_arm_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(armUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armUpper);
            var armLower = this.game.add.sprite(startX + 30.5, startY + 11.4, "atlas_raptor", "dead_arm_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(armLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armLower);
            var head = this.game.add.sprite(startX + 46.9, startY - 20.45, "atlas_raptor", "dead_head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(head);
            var jaw = this.game.add.sprite(startX + 46.5, startY - 18, "atlas_raptor", "dead_jaw");
            DinogenArena.GameUtil.GetGameState().addToWorld(jaw, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(jaw);
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(neck, head, 2, -5, -7, 0, 0, 0, 0, -5, 0, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck, jaw, 1, -4, -7, 0, 0, 0, 0, 0, 60, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, neck, 10, -4, -6, 6, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, armUpper, 10, 0, 0, -6, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armUpper, armLower, 0, 8, 0, -4, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, legUpper, -4, 2, 0, -6, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legUpper, legMid, 2, 4, 0, -6, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legMid, legLower, 0, 6, 0, -6, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, tail1, -(torso.width * 0.5) + 3, 0, (tail1.width * 0.5) - 3, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -9, 0, 9, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -8, 0, 8, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(jaw.body);
            this.addBody(neck.body);
            this.addBody(torso.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.addBody(legUpper.body);
            this.addBody(legMid.body);
            this.addBody(legLower.body);
            this.addBody(armUpper.body);
            this.addBody(armLower.body);
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
                body.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
                body.linearDamping = 4;
                body.angularDamping = 3;
            }
            this.primaryBody = torso.body;
            this.rotateAroundPoint(this.primaryBody.x, this.primaryBody.y, this.rotation, this.bodies);
        };
        return Raptor;
    }(Dinosaur));
    DinogenArena.Raptor = Raptor;
    var Needler = /** @class */ (function (_super) {
        __extends(Needler, _super);
        function Needler(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.referenceScale = 0.75;
            _this.footprintKey = "footprint_blood_raptor";
            _this.attackSoundId = "dino_needler_attack";
            _this.deathSoundIds = [
                "dino_needler_death_1",
                "dino_needler_death_2",
                "dino_needler_death_3"
            ];
            _this.speed = 27;
            _this.attackSpeed = 1;
            _this.attackDamage = 20;
            _this.attackCooldownMax = 8;
            _this.projectileType = ProjectileBase.TYPE_NEEDLE;
            _this.bCanSideStep = true;
            _this.setHealthMax(200);
            _this.createBody();
            _this.setHitSpriteSize(64);
            return _this;
        }
        Needler.prototype.getKillReward = function () {
            return 100;
        };
        Needler.prototype.createBody = function () {
            var atlasId = "atlas_needler";
            this.bodyClip = this.game.add.sprite(this.x, this.y, atlasId, "mc_base0000");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.bodyClip);
            var anim = Phaser.Animation.generateFrameNames("mc_base", 0, 25, "", 4);
            var walk = this.bodyClip.animations.add("walk", anim, DinogenArena.GameUtil.frameRate, true, false);
            this.game.physics.box2d.enable(this.bodyClip);
            this.primaryBody = this.bodyClip.body;
            this.primaryBody.linearDamping = 5;
            this.primaryBody.angularDamping = 2;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_PAWN); //MASK_PAWN_DINO
            var tail1 = this.game.add.sprite(this.x - 20, this.y, atlasId, "tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(tail1.x - 20, this.y, atlasId, "tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(tail2.x - 20, this.y, atlasId, "tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3);
            this.game.physics.box2d.enable(tail3);
            var tailDamping = 10;
            var tails = [tail1, tail2, tail3];
            for (var i = 0; i < tails.length; i++) {
                var tailBody = tails[i].body;
                tailBody.linearDamping = tailDamping;
                tailBody.angularDamping = tailDamping;
                tailBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
                tailBody.setCollisionMask(0);
            }
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(this.bodyClip, tail1, -10, 0, 12, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -10, 0, 10, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -10, 0, 10, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(this.bodyClip.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
        };
        Needler.prototype.createDeathBody = function () {
            _super.prototype.createDeathBody.call(this);
            var atlasId = "atlas_needler";
            var startX = this.x;
            var startY = this.y;
            var neck = this.game.add.sprite(startX + 37.5, startY - 14.6, atlasId, "dead_neck");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(neck);
            neck.body.setRectangle(6, neck.height);
            var tail1 = this.game.add.sprite(startX + 2.4, startY - 6.75, atlasId, "dead_tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(startX - 14.9, startY - 7.7, atlasId, "dead_tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(startX - 33.8, startY - 7, atlasId, "dead_tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail3);
            var torso = this.game.add.sprite(startX + 20.2, startY - 6, atlasId, "dead_torso");
            DinogenArena.GameUtil.GetGameState().addToWorld(torso, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(torso);
            var legUpper = this.game.add.sprite(startX + 15, startY - 2, atlasId, "dead_leg_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(legUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legUpper);
            var legMid = this.game.add.sprite(startX + 16.8, startY + 11, atlasId, "dead_leg_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(legMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legMid);
            var legLower = this.game.add.sprite(startX + 18.2, startY + 25, atlasId, "dead_leg_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(legLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legLower);
            var armUpper = this.game.add.sprite(startX + 29.7, startY - 3.25, atlasId, "dead_arm_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(armUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armUpper);
            var armLower = this.game.add.sprite(startX + 30.5, startY + 11.4, atlasId, "dead_arm_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(armLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armLower);
            var head = this.game.add.sprite(startX + 46.9, startY - 20.45, atlasId, "dead_head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(head);
            var jaw = this.game.add.sprite(startX + 46.5, startY - 18, atlasId, "dead_jaw");
            DinogenArena.GameUtil.GetGameState().addToWorld(jaw, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(jaw);
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(neck, head, 4, -5, -8, 0, 0, 0, 0, 5, 0, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck, jaw, 4, 0, -8, 0, 0, 0, 0, 15, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, neck, 8, -4, -4, 6, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, armUpper, 10, 0, 0, -6, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armUpper, armLower, 0, 8, 0, -4, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, legUpper, -4, 2, 0, -6, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legUpper, legMid, 2, 4, 0, -6, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legMid, legLower, 0, 6, 0, -6, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, tail1, -(torso.width * 0.5) + 3, 0, (tail1.width * 0.5) - 3, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -9, 0, 9, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -8, 0, 11, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(jaw.body);
            this.addBody(neck.body);
            this.addBody(torso.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.addBody(legUpper.body);
            this.addBody(legMid.body);
            this.addBody(legLower.body);
            this.addBody(armUpper.body);
            this.addBody(armLower.body);
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
                body.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
                body.linearDamping = 4;
                body.angularDamping = 3;
            }
            this.primaryBody = torso.body;
            this.rotateAroundPoint(this.primaryBody.x, this.primaryBody.y, this.rotation, this.bodies);
        };
        return Needler;
    }(Dinosaur));
    DinogenArena.Needler = Needler;
    var Dilo = /** @class */ (function (_super) {
        __extends(Dilo, _super);
        function Dilo(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.referenceScale = 0.75;
            _this.footprintKey = "footprint_blood_dilo";
            _this.attackSoundId = "dino_dilo_attack";
            _this.deathSoundIds = [
                "dino_dilo_death_1",
                "dino_dilo_death_2",
                "dino_dilo_death_3"
            ];
            _this.speed = 19;
            _this.attackSpeed = 1;
            _this.attackDamage = 45;
            _this.attackCooldownMax = 15;
            _this.projectileType = ProjectileBase.TYPE_VENOM;
            _this.bCanSideStep = true;
            _this.setHealthMax(125);
            _this.createBody();
            _this.setHitSpriteSize(42);
            return _this;
        }
        Dilo.prototype.getKillReward = function () {
            return 50;
        };
        Dilo.prototype.createBody = function () {
            var atlasId = "atlas_dilo";
            this.bodyClip = this.game.add.sprite(this.x, this.y, atlasId, "mc_base0000");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.bodyClip);
            var anim = Phaser.Animation.generateFrameNames("mc_base", 0, 25, "", 4);
            var walk = this.bodyClip.animations.add("walk", anim, DinogenArena.GameUtil.frameRate, true, false);
            this.game.physics.box2d.enable(this.bodyClip);
            this.primaryBody = this.bodyClip.body;
            this.primaryBody.linearDamping = 5;
            this.primaryBody.angularDamping = 2;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_PAWN); //MASK_PAWN_DINO
            var tail1 = this.game.add.sprite(this.x - 20, this.y, atlasId, "tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(tail1.x - 20, this.y, atlasId, "tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(tail2.x - 20, this.y, atlasId, "tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3);
            this.game.physics.box2d.enable(tail3);
            var tailDamping = 10;
            var tails = [tail1, tail2, tail3];
            for (var i = 0; i < tails.length; i++) {
                var tailBody = tails[i].body;
                tailBody.linearDamping = tailDamping;
                tailBody.angularDamping = tailDamping;
                tailBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
                tailBody.setCollisionMask(0);
            }
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(this.bodyClip, tail1, -9, 0, 11, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -8, 0, 8, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -9, 0, 8, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(this.bodyClip.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
        };
        Dilo.prototype.createDeathBody = function () {
            _super.prototype.createDeathBody.call(this);
            var atlasId = "atlas_dilo";
            var startX = this.x;
            var startY = this.y;
            var neck = this.game.add.sprite(startX + 37.5, startY - 14.6, atlasId, "dead_neck");
            DinogenArena.GameUtil.GetGameState().addToWorld(neck, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(neck);
            neck.body.setRectangle(6, neck.height);
            var tail1 = this.game.add.sprite(startX + 5, startY - 6.75, atlasId, "dead_tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(startX - 11, startY - 7.7, atlasId, "dead_tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(startX - 29, startY - 7, atlasId, "dead_tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail3);
            var torso = this.game.add.sprite(startX + 20.2, startY - 6, atlasId, "dead_torso");
            DinogenArena.GameUtil.GetGameState().addToWorld(torso, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(torso);
            var legUpper = this.game.add.sprite(startX + 15, startY - 2, atlasId, "dead_leg_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(legUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legUpper);
            var legMid = this.game.add.sprite(startX + 16.8, startY + 11, atlasId, "dead_leg_mid");
            DinogenArena.GameUtil.GetGameState().addToWorld(legMid, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legMid);
            var legLower = this.game.add.sprite(startX + 18.2, startY + 25, atlasId, "dead_leg_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(legLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legLower);
            var armUpper = this.game.add.sprite(startX + 29.7, startY - 3.25, atlasId, "dead_arm_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(armUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armUpper);
            var armLower = this.game.add.sprite(startX + 30.5, startY + 11.4, atlasId, "dead_arm_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(armLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armLower);
            var head = this.game.add.sprite(startX + 46.9, startY - 20.45, atlasId, "dead_head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(head);
            var jaw = this.game.add.sprite(startX + 46.5, startY - 18, atlasId, "dead_jaw");
            DinogenArena.GameUtil.GetGameState().addToWorld(jaw, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(jaw);
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(neck, head, 2, -5, -7, 0, 0, 0, 0, -5, 0, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(neck, jaw, 1, -4, -7, 0, 0, 0, 0, 0, 60, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, neck, 8, -4, -5, 5, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, armUpper, 9, 0, 0, -6, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armUpper, armLower, 0, 8, 0, -4, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, legUpper, -3, 2, 0, -4, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legUpper, legMid, 2, 4, 0, -5, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legMid, legLower, 0, 6, 0, -6, 0, 0, 0, -30, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, tail1, -7, 0, 7, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -8, 0, 8, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -8, 0, 8, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(jaw.body);
            this.addBody(neck.body);
            this.addBody(torso.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.addBody(legUpper.body);
            this.addBody(legMid.body);
            this.addBody(legLower.body);
            this.addBody(armUpper.body);
            this.addBody(armLower.body);
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
                body.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
                body.linearDamping = 5;
                body.angularDamping = 4;
            }
            this.primaryBody = torso.body;
            this.rotateAroundPoint(this.primaryBody.x, this.primaryBody.y, this.rotation, this.bodies);
        };
        return Dilo;
    }(Dinosaur));
    DinogenArena.Dilo = Dilo;
    var Compy = /** @class */ (function (_super) {
        __extends(Compy, _super);
        function Compy(_id, _x, _y, _rotation, _controller) {
            var _this = _super.call(this, _id, _x, _y, _rotation, _controller) || this;
            _this.footprintKey = "footprint_blood_compy";
            _this.attackSoundId = "dino_compy_attack";
            _this.deathSoundIds = [
                "dino_compy_attack_1",
                "dino_compy_attack_2",
                "dino_compy_attack_3"
            ];
            _this.speed = 14;
            _this.attackSpeed = 12;
            _this.attackDamage = 25;
            _this.attackCooldownMax = 20;
            _this.setHealthMax(100);
            _this.setRegenTimerMax(1);
            _this.createBody();
            return _this;
        }
        Compy.prototype.getKillReward = function () {
            return 10;
        };
        Compy.prototype.createBody = function () {
            this.bodyClip = this.game.add.sprite(this.x, this.y, "atlas_compy", "mc_base0000");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.bodyClip);
            var anim = Phaser.Animation.generateFrameNames("mc_base", 0, 21, "", 4);
            var walk = this.bodyClip.animations.add("walk", anim, DinogenArena.GameUtil.frameRate, true, false);
            this.game.physics.box2d.enable(this.bodyClip);
            this.primaryBody = this.bodyClip.body;
            this.primaryBody.linearDamping = 5;
            this.primaryBody.angularDamping = 2;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_PAWN); //MASK_PAWN_DINO
            var tail1 = this.game.add.sprite(this.x - 10, this.y, "atlas_compy", "tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(tail1.x - 10, this.y, "atlas_compy", "tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(tail2.x - 10, this.y, "atlas_compy", "tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3);
            this.game.physics.box2d.enable(tail3);
            var tails = [tail1, tail2, tail3];
            for (var i = 0; i < tails.length; i++) {
                var tailBody = tails[i].body;
                tailBody.linearDamping = 20;
                tailBody.angularDamping = 20;
                tailBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
                tailBody.setCollisionMask(0);
            }
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(this.bodyClip, tail1, -6, 0, tail1.width * 0.4, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -tail1.width * 0.4, 0, tail2.width * 0.4, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -tail2.width * 0.4, 0, tail3.width * 0.4, 0, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
            ];
            this.addBody(this.bodyClip.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
        };
        Compy.prototype.createDeathBody = function () {
            _super.prototype.createDeathBody.call(this);
            var startX = this.x;
            var startY = this.y;
            var torso = this.game.add.sprite(startX + 2, startY + 2, "atlas_compy", "dead_torso");
            DinogenArena.GameUtil.GetGameState().addToWorld(torso, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(torso);
            var tail1 = this.game.add.sprite(startX + 2, startY - 4, "atlas_compy", "dead_tail_1");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail1, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail1);
            var tail2 = this.game.add.sprite(startX - 7, startY - 4, "atlas_compy", "dead_tail_2");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail2, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail2);
            var tail3 = this.game.add.sprite(startX - 8, startY - 3, "atlas_compy", "dead_tail_3");
            DinogenArena.GameUtil.GetGameState().addToWorld(tail3, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(tail3);
            var legUpper = this.game.add.sprite(startX + 7, startY - 1, "atlas_compy", "dead_leg_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(legUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legUpper);
            var legLower = this.game.add.sprite(startX + 5, startY + 6, "atlas_compy", "dead_leg_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(legLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(legLower);
            var armUpper = this.game.add.sprite(startX + 2, startY - 5, "atlas_compy", "dead_arm_upper");
            DinogenArena.GameUtil.GetGameState().addToWorld(armUpper, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armUpper);
            var armLower = this.game.add.sprite(startX + 3, startY + 8, "atlas_compy", "dead_arm_lower");
            DinogenArena.GameUtil.GetGameState().addToWorld(armLower, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(armLower);
            var head = this.game.add.sprite(startX + 11, startY - 5, "atlas_compy", "dead_head");
            DinogenArena.GameUtil.GetGameState().addToWorld(head, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(head);
            //Joints
            this.joints = [
                this.game.physics.box2d.revoluteJoint(torso, head, 4, -2, -4, 4, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, armUpper, 5, 1, 0, -3, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(armUpper, armLower, 0, 3, 0, -3, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, legUpper, -2, 2, 0, -2, 0, 0, 0, -15, 15, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(legUpper, legLower, 1, 3, 0, -3, 0, 0, 0, -5, 5, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(torso, tail1, -4, -2, 4, 0, 0, 0, 0, -45, 45, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail1, tail2, -5, 0, 5, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled),
                this.game.physics.box2d.revoluteJoint(tail2, tail3, -5, 0, 5, 0, 0, 0, 0, -30, 30, this.bJointLimitsEnabled)
            ];
            this.addBody(head.body);
            this.addBody(torso.body);
            this.addBody(tail1.body);
            this.addBody(tail2.body);
            this.addBody(tail3.body);
            this.addBody(legUpper.body);
            this.addBody(legLower.body);
            this.addBody(armUpper.body);
            this.addBody(armLower.body);
            for (var i = 0; i < this.bodies.length; i++) {
                var body = this.bodies[i];
                body.setCollisionCategory(DinogenArena.GameState.CATEGORY_DEAD);
                body.setCollisionMask(DinogenArena.GameUtil.GetGameState().getDeadPawnMask());
                body.linearDamping = 5;
                body.angularDamping = 3;
            }
            this.primaryBody = torso.body;
            this.rotateAroundPoint(this.primaryBody.x, this.primaryBody.y, this.rotation, this.bodies);
        };
        return Compy;
    }(Dinosaur));
    DinogenArena.Compy = Compy;
    var Target = /** @class */ (function (_super) {
        __extends(Target, _super);
        function Target(_id, _x, _y, _rotation) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.rotation = 90 * DinogenArena.WilkinUtil.TO_RADIANS;
            _this.bCanDamage = true;
            _this.setHealthMax(50);
            _this.createBody();
            return _this;
        }
        Target.prototype.createBody = function () {
            _super.prototype.createBody.call(this);
            this.hitSprite = this.game.add.sprite(this.x, this.y, "atlas_objects", "target_dummy");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.hitSprite);
            this.game.physics.box2d.enable(this.hitSprite);
            this.primaryBody = this.hitSprite.body;
            this.primaryBody.dynamic = true;
            this.primaryBody.angle = this.rotation;
            this.primaryBody.friction = 1;
            this.primaryBody.linearDamping = 4;
            this.primaryBody.angularDamping = 4;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_PAWN);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
            this.addBody(this.primaryBody);
        };
        Target.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            DinogenArena.SoundManager.PlayWorldSound("physics_body_hit", this.x, this.y, 3, DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) * 0.1);
        };
        Target.prototype.onDeath = function (_killingDamage, _instigator, _causer, _damageType) {
            _super.prototype.onDeath.call(this, _killingDamage, _instigator, _causer, _damageType);
            this.hitSprite.tint = 0x00FF00;
            DinogenArena.SoundManager.PlayWorldSound("physics_flesh_gib", this.x, this.y, 2);
        };
        Target.prototype.onRevive = function () {
            this.hitSprite.tint = 0xFFFFFF;
        };
        Target.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        return Target;
    }(Actor));
    DinogenArena.Target = Target;
    var Interactable = /** @class */ (function (_super) {
        __extends(Interactable, _super);
        function Interactable(_id, _x, _y, _rotation) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.interactMessage = "Interact";
            _this.bEnabled = true;
            _this.bShowInteractMessage = true;
            _this.bCanBeDestroyed = true;
            return _this;
        }
        Interactable.prototype.canBeDestroyed = function () {
            return this.bCanBeDestroyed;
        };
        Interactable.prototype.setEnabled = function (_bVal) {
            this.bEnabled = _bVal;
        };
        Interactable.prototype.isEnabled = function () {
            return this.bEnabled;
        };
        Interactable.prototype.onHit = function (_obj) {
            if (_obj instanceof Pawn) {
                var pawn = _obj;
                if (pawn.isAlive()) {
                    //onInteract(pawn);
                }
            }
        };
        Interactable.prototype.setOnInteractTriggerId = function (_val) {
            this.onInteractTriggerId = _val;
        };
        Interactable.prototype.setOnTouchTriggerId = function (_val) {
            this.onTouchTriggerId = _val;
        };
        Interactable.prototype.onInteract = function (_pawn) {
            if (this.onInteractTriggerId) {
                var campaign = DinogenArena.GameUtil.GetGameState().gameMode.getCampaign();
                if (campaign) {
                    campaign.dispatchTrigger({ id: this.onInteractTriggerId });
                }
            }
        };
        Interactable.prototype.onTouch = function (_pawn) {
            if (_pawn instanceof Character) {
                if (_pawn.isAlive()) {
                    if (_pawn.isPlayer()) {
                        if (this.bShowInteractMessage) {
                            var pc = _pawn.getPlayerController();
                            var pos = new Phaser.Point(this.x, this.y);
                            pc.getHUD().setInteractTooltip(pos.x, pos.y, this.interactMessage);
                        }
                    }
                    else {
                        var ai = _pawn.getAIController();
                        ai.onTouch(this);
                    }
                }
            }
            if (this.onTouchTriggerId) {
                var campaign = DinogenArena.GameUtil.GetGameState().gameMode.getCampaign();
                if (campaign) {
                    campaign.dispatchTrigger({ id: this.onTouchTriggerId });
                }
            }
        };
        Interactable.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        return Interactable;
    }(WorldObject));
    DinogenArena.Interactable = Interactable;
    var AutoTurretBase = /** @class */ (function (_super) {
        __extends(AutoTurretBase, _super);
        function AutoTurretBase(_id, _x, _y, _rotation, _turret) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.bCanBeDestroyed = false;
            _this.createBody();
            _this.interactMessage = "Buy Auto Turret: $" + DinogenArena.WilkinUtil.FormatNum(AutoTurret.COST_BASE);
            _this.setTurret(_turret);
            return _this;
        }
        AutoTurretBase.prototype.destroy = function () {
            this.turret = null;
            _super.prototype.destroy.call(this);
        };
        AutoTurretBase.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            DinogenArena.SoundManager.PlayWorldSound("physics_crate_fall", this.x, this.y, 0, DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3) * 0.1);
        };
        AutoTurretBase.prototype.setTurret = function (_turret) {
            this.turret = _turret;
            if (this.turret) {
                this.interactMessage = "Upgrade Auto Turret: $" + DinogenArena.WilkinUtil.FormatNum(this.turret.getCostToUpgrade());
                if (this.turret.isMaximumLevel()) {
                    this.bEnabled = false;
                }
            }
            else {
                this.bShowInteractMessage = true;
                this.bEnabled = true;
            }
        };
        AutoTurretBase.prototype.hasTurret = function () {
            return this.turret != null;
        };
        AutoTurretBase.prototype.createBody = function () {
            this.hitSprite = this.game.add.sprite(this.x, this.y, "atlas_objects", "turret_base");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.hitSprite, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(this.hitSprite);
            this.primaryBody = this.hitSprite.body;
            this.primaryBody.angle = this.rotation;
            this.primaryBody.static = true;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_ITEMS);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_ITEMS);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.addBody(this.primaryBody);
        };
        AutoTurretBase.prototype.onInteract = function (_pawn) {
            _super.prototype.onInteract.call(this, _pawn);
            var char = _pawn;
            if (char) {
                if (char.isPlayer()) {
                    var hud = char.getPlayerController().getHUD();
                    var survival = DinogenArena.GameUtil.GetGameState().gameMode.getSurvival();
                    var realCost = this.turret ? this.turret.getCostToUpgrade() : AutoTurret.COST_BASE;
                    if (survival.getSurvivalMoney() >= realCost) {
                        if (!this.turret) {
                            var turret = survival.addAutoTurret(null, this.x, this.y);
                            this.setTurret(turret);
                            DinogenArena.SoundManager.PlayWorldSound("ui_turret", this.x, this.y);
                            hud.addToFeed({ type: "default", text: "Auto turret deployed!" });
                        }
                        else {
                            this.turret.upgrade();
                            this.setTurret(this.turret);
                            DinogenArena.SoundManager.PlayWorldSound("ui_turret_upgrade", this.x, this.y);
                            hud.addToFeed({ type: "default", text: "Auto turret upgraded! [" + this.turret.getLevel() + "/" + AutoTurret.LEVEL_MAX + "]" });
                        }
                        survival.useSurvivalMoney(realCost);
                    }
                    else {
                        //SoundManager.PlayWorldSound("ui_interact", this.x, this.y);
                    }
                }
            }
        };
        return AutoTurretBase;
    }(Interactable));
    DinogenArena.AutoTurretBase = AutoTurretBase;
    var WorldButton = /** @class */ (function (_super) {
        __extends(WorldButton, _super);
        function WorldButton(_id, _x, _y, _rotation, _type) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.createBody();
            _this.interactMessage = "Press button";
            return _this;
        }
        WorldButton.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        WorldButton.prototype.onInteract = function (_pawn) {
            _super.prototype.onInteract.call(this, _pawn);
            DinogenArena.SoundManager.PlayWorldSound("physics_button_press", this.x, this.y);
        };
        WorldButton.prototype.createBody = function () {
            this.hitSprite = this.game.add.sprite(this.x, this.y, "atlas_objects", "button_generic");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.hitSprite, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(this.hitSprite);
            this.primaryBody = this.hitSprite.body;
            this.primaryBody.angle = this.rotation;
            this.primaryBody.static = true;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_PAWN);
            this.addBody(this.primaryBody);
        };
        return WorldButton;
    }(Interactable));
    DinogenArena.WorldButton = WorldButton;
    var HillZone = /** @class */ (function (_super) {
        __extends(HillZone, _super);
        function HillZone(_id, _x, _y) {
            var _this = _super.call(this, _id, _x, _y, 0) || this;
            _this.minimapIconId = "indicator_crown";
            _this.referenceScale = 0.75;
            _this.createBody();
            return _this;
        }
        HillZone.prototype.destroy = function () {
            this.zonePawns = null;
            _super.prototype.destroy.call(this);
        };
        HillZone.prototype.tick = function () {
            _super.prototype.tick.call(this);
            this.zonePawns = [];
            if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                var pawns = DinogenArena.GameUtil.GetGameState().pawns;
                for (var i = 0; i < pawns.length; i++) {
                    var pawn = pawns[i];
                    if (pawn.isAlive()) {
                        if (DinogenArena.GameUtil.GetGameState().checkOverlap(pawn.hitSprite, this.hitSprite)) {
                            this.onPawnTouch(pawn);
                        }
                    }
                }
                if (this.zonePawns.length == 1) {
                    var zonePawn = this.zonePawns[0];
                    zonePawn.setInHillZone();
                    this.hitSprite.tint = DinogenArena.GameModeManager.GetColourForTeam(zonePawn.getTeam());
                    var gmp = zonePawn.getController().getGameModePlayer();
                    gmp.addHillPoint(zonePawn.isPlayer() ? 1 : 2);
                    DinogenArena.GameUtil.GetGameState().gameMode.getKOTH().onPawnAddHillPoint(gmp);
                    if (zonePawn.isPlayer()) {
                        if (DinogenArena.GameUtil.GetGameState().gameMode.timeRemaining % DinogenArena.GameUtil.frameRate == 0) {
                            //SoundManager.PlayUISound("ui_point");
                            zonePawn.getPlayerController().addXP(5);
                        }
                    }
                }
                else {
                    this.hitSprite.tint = 0xFFFFFF;
                }
            }
        };
        HillZone.prototype.createBody = function () {
            var gfx = this.game.add.graphics(0, 0);
            gfx.lineStyle(1, 0xFFFFFF, 0.6);
            gfx.beginFill(0xFFFFFF, 0.1);
            gfx.drawRoundedRect(0, 0, 400, 400, 12);
            this.add(gfx);
            this.hitSprite = this.game.add.sprite(this.x, this.y, gfx.generateTexture());
            gfx.destroy();
            DinogenArena.GameUtil.GetGameState().addToWorld(this.hitSprite, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(this.hitSprite);
            this.primaryBody = this.hitSprite.body;
            this.primaryBody.static = true;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCollisionMask(0);
            this.addBody(this.primaryBody);
        };
        HillZone.prototype.onPawnTouch = function (_pawn) {
            this.zonePawns.push(_pawn);
            _pawn.setInHillZone();
        };
        return HillZone;
    }(WorldObject));
    DinogenArena.HillZone = HillZone;
    var Flag = /** @class */ (function (_super) {
        __extends(Flag, _super);
        function Flag(_id, _x, _y, _team) {
            var _this = _super.call(this, _id, _x, _y, 0) || this;
            _this.bBeingCarried = false;
            _this.bAwayFromHome = false;
            _this.bCanBeDestroyed = false;
            _this.minimapIconId = "indicator_flag";
            _this.bRotateMinimapIcon = false;
            _this.referenceScale = 1;
            _this.bShowInteractMessage = false;
            _this.team = _team;
            _this.createBody();
            _this.onReturned();
            return _this;
        }
        Flag.prototype.destroy = function () {
            this.carrier = null;
            this.joint = null;
            _super.prototype.destroy.call(this);
        };
        Flag.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.carrier) {
                if (!this.carrier.isAlive()) {
                    var ctf = DinogenArena.GameUtil.GetGameState().gameMode.getCTF();
                    ctf.onFlagDropped(this.carrier);
                }
            }
        };
        Flag.prototype.createBody = function () {
            this.hitSprite = this.game.add.sprite(this.x, this.y, "atlas_objects", "flag_base");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.hitSprite, DinogenArena.GameState.INDEX_TOP);
            this.game.physics.box2d.enable(this.hitSprite);
            this.primaryBody = this.hitSprite.body;
            this.primaryBody.setCircle(8);
            this.primaryBody.static = true;
            this.primaryBody.angle = this.rotation;
            this.primaryBody.angularDamping = 4;
            this.primaryBody.linearDamping = 1;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_CRATES);
            this.addBody(this.primaryBody);
        };
        Flag.prototype.onTouch = function (_pawn) {
            _super.prototype.onTouch.call(this, _pawn);
            if (!_pawn.isPlayer()) {
                //return;
            }
            if (!this.isBeingCarried()) {
                var ctf = DinogenArena.GameUtil.GetGameState().gameMode;
                if (_pawn.getTeam() != this.team) {
                    ctf.onFlagPickedUp(_pawn, this);
                }
                else {
                    if (this.isAwayFromHome()) {
                        ctf.onFlagReturned(_pawn);
                    }
                    else {
                        var otherFlag = ctf.getOpposingFlag(this.getTeam());
                        if (otherFlag.carrier == _pawn) {
                            ctf.onFlagCaptured(_pawn);
                        }
                    }
                }
            }
        };
        Flag.prototype.getTeam = function () {
            return this.team;
        };
        Flag.prototype.isBeingCarried = function () {
            return this.bBeingCarried;
        };
        Flag.prototype.getCarrier = function () {
            return this.carrier;
        };
        Flag.prototype.isAwayFromHome = function () {
            return this.bAwayFromHome;
        };
        Flag.prototype.onPickedUp = function (_pawn) {
            this.carrier = _pawn;
            this.bBeingCarried = true;
            this.bAwayFromHome = true;
            if (this.primaryBody) {
                this.primaryBody.setZeroVelocity();
                this.primaryBody.setZeroRotation();
                this.primaryBody.static = false;
                this.primaryBody.dynamic = true;
                this.primaryBody.friction = 0;
                if (this.joint) {
                    this.clearJoint();
                }
                var jointDist = 5;
                this.joint = this.game.physics.box2d.revoluteJoint(this.primaryBody, _pawn.primaryBody, -jointDist, 0, jointDist, 0, 0, 0, 0);
            }
            this.setEnabled(false);
        };
        Flag.prototype.onReturned = function () {
            this.clearJoint();
            this.carrier = null;
            this.bBeingCarried = false;
            this.bAwayFromHome = false;
            if (this.primaryBody) {
                this.primaryBody.angle = 0;
                this.primaryBody.setZeroVelocity();
                this.primaryBody.setZeroRotation();
                this.primaryBody.static = true;
                this.primaryBody.dynamic = false;
                this.primaryBody.friction = 1;
            }
            this.setEnabled(true);
        };
        Flag.prototype.onCaptured = function () {
            this.onReturned();
        };
        Flag.prototype.onDropped = function () {
            this.clearJoint();
            this.carrier = null;
            this.bBeingCarried = false;
            this.bAwayFromHome = true;
            if (this.primaryBody) {
                DinogenArena.GameUtil.ApplyForce(this.primaryBody, DinogenArena.WilkinUtil.GenerateRandomNumber(-12, 12), DinogenArena.WilkinUtil.GenerateRandomNumber(-12, 12));
                this.primaryBody.angularVelocity = DinogenArena.WilkinUtil.GenerateRandomNumber(-32, 32);
            }
            this.setEnabled(true);
        };
        Flag.prototype.clearJoint = function () {
            if (this.joint) {
                this.game.physics.box2d.world.DestroyJoint(this.joint);
                this.joint = null;
            }
        };
        return Flag;
    }(Interactable));
    DinogenArena.Flag = Flag;
    var MoneyDrop = /** @class */ (function (_super) {
        __extends(MoneyDrop, _super);
        function MoneyDrop(_id, _x, _y, _rotation, _value) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.value = 1;
            _this.bShowInteractMessage = false;
            _this.value = _value;
            _this.createBody();
            _this.setDestroyTimer(30);
            _this.enableDestroyTimer();
            return _this;
        }
        MoneyDrop.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        MoneyDrop.prototype.createBody = function () {
            this.hitSprite = this.game.add.sprite(this.x, this.y, "atlas_objects", "money_bill");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.hitSprite, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(this.hitSprite);
            this.primaryBody = this.hitSprite.body;
            this.primaryBody.angle = this.rotation;
            this.primaryBody.friction = 1;
            this.primaryBody.restitution = 1;
            this.primaryBody.linearDamping = 4;
            this.primaryBody.angularDamping = 4;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_CRATES);
            this.addBody(this.primaryBody);
        };
        MoneyDrop.prototype.getValue = function () {
            return this.value;
        };
        MoneyDrop.prototype.onTouch = function (_pawn) {
            _super.prototype.onTouch.call(this, _pawn);
            if (_pawn instanceof Character) {
                var char = _pawn;
                if (char.isPlayer()) {
                    if (DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                        DinogenArena.GameUtil.GetGameState().gameMode.getSurvival().addSurvivalMoney(this.value);
                    }
                    else {
                        var hud = char.getPlayerController().getHUD();
                        hud.addToFeed({ type: "default", text: "Picked up $" + this.value });
                        DinogenArena.GameUtil.GetGameState().gameMode.getCampaign().addStoryMoney(this.value);
                    }
                    DinogenArena.SoundManager.PlayWorldSound("ui_interact", this.x, this.y, 0, 0.5);
                }
                this.triggerDestroy();
            }
        };
        return MoneyDrop;
    }(Interactable));
    DinogenArena.MoneyDrop = MoneyDrop;
    var ArrowAmmo = /** @class */ (function (_super) {
        __extends(ArrowAmmo, _super);
        function ArrowAmmo(_id, _x, _y, _rotation) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.bShowInteractMessage = false;
            _this.hitSprite = _this.game.add.sprite(_this.x, _this.y, "atlas_objects", "ammo_arrow");
            _this.hitSprite.anchor.set(0.5, 0.5);
            _this.hitSprite.rotation = _this.rotation;
            DinogenArena.GameUtil.GetGameState().addToWorld(_this.hitSprite, DinogenArena.GameState.INDEX_BOTTOM);
            _this.setDestroyTimer(15);
            _this.enableDestroyTimer();
            return _this;
        }
        ArrowAmmo.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        ArrowAmmo.prototype.onTouch = function (_pawn) {
            _super.prototype.onTouch.call(this, _pawn);
            if (_pawn instanceof Character) {
                var char = _pawn;
                if (char.hasBow()) {
                    char.addAmmoToInventoryItem(char.getBowInventoryIndex(), 1);
                    if (char.isPlayer()) {
                        //char.getPlayerController().getHUD().addToFeed({ type: "default", text: "Picked up arrow" });
                    }
                    this.triggerDestroy();
                }
            }
        };
        return ArrowAmmo;
    }(Interactable));
    DinogenArena.ArrowAmmo = ArrowAmmo;
    var TriggerArea = /** @class */ (function (_super) {
        __extends(TriggerArea, _super);
        function TriggerArea(_id, _x, _y, _rotation) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.bShowInteractMessage = false;
            _this.bShowOnMinimap = false;
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 0);
            graphics.drawRoundedRect(0, 0, 100, 100, 8);
            _this.hitSprite = _this.game.add.sprite(_this.x, _this.y, graphics.generateTexture());
            graphics.destroy();
            _this.hitSprite.anchor.set(0.5, 0.5);
            DinogenArena.GameUtil.GetGameState().addToWorld(_this.hitSprite);
            return _this;
            //this.setRect(64, 64);
        }
        TriggerArea.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        TriggerArea.prototype.setRect = function (_w, _h) {
            this.hitSprite.width = _w;
            this.hitSprite.height = _h;
        };
        TriggerArea.prototype.onTouch = function (_pawn) {
            if (_pawn.isPlayer()) {
                _super.prototype.onTouch.call(this, _pawn);
                this.triggerDestroy();
            }
        };
        return TriggerArea;
    }(Interactable));
    DinogenArena.TriggerArea = TriggerArea;
    var Crate = /** @class */ (function (_super) {
        __extends(Crate, _super);
        function Crate(_id, _x, _y, _rotation, _contents) {
            if (_contents === void 0) { _contents = null; }
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.uses = 1;
            _this.referenceScale = 0.75;
            _this.minimapIconId = "indicator_objective";
            _this.bRotateMinimapIcon = false;
            _this.contents = _contents;
            _this.createBody();
            return _this;
        }
        Crate.prototype.destroy = function () {
            this.contents = null;
            _super.prototype.destroy.call(this);
        };
        Crate.prototype.setUses = function (_val) {
            this.uses = _val;
        };
        Crate.prototype.setContents = function (_contents) {
            this.contents = _contents;
        };
        Crate.prototype.getContents = function () {
            return this.contents;
        };
        Crate.prototype.createBody = function () {
            this.hitSprite = this.game.add.sprite(this.x, this.y, "atlas_objects", "crate_generic");
            DinogenArena.GameUtil.GetGameState().addToWorld(this.hitSprite, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(this.hitSprite);
            this.primaryBody = this.hitSprite.body;
            this.primaryBody.angle = this.rotation;
            this.primaryBody.friction = 1;
            this.primaryBody.restitution = 0;
            this.primaryBody.linearDamping = 8;
            this.primaryBody.angularDamping = 12;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_OBJECTS);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_CRATES);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
            this.addBody(this.primaryBody);
        };
        Crate.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            DinogenArena.SoundManager.PlayWorldSound("physics_crate_fall", this.x, this.y, 0, DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3) * 0.1);
        };
        Crate.TYPE_SURVIVAL_CRATE = "TYPE_SURVIVAL_CRATE";
        Crate.TYPE_GENERIC_CRATE = "TYPE_GENERIC_CRATE";
        return Crate;
    }(Interactable));
    DinogenArena.Crate = Crate;
    var GenericCrate = /** @class */ (function (_super) {
        __extends(GenericCrate, _super);
        function GenericCrate(_id, _x, _y, _rotation, _contents) {
            if (_contents === void 0) { _contents = null; }
            var _this = _super.call(this, _id, _x, _y, _rotation, _contents) || this;
            _this.interactMessage = "Open";
            if (_this.contents) {
                if (_this.contents["type"] == "ammo") {
                    _this.minimapIconId = "indicator_ammo";
                    _this.interactMessage = "Get Ammo";
                }
                else if (_this.contents["type"] == "weapon") {
                    _this.minimapIconId = "indicator_weapon";
                }
            }
            return _this;
        }
        GenericCrate.prototype.onInteract = function (_pawn) {
            _super.prototype.onInteract.call(this, _pawn);
            var char = _pawn;
            if (char) {
                if (this.contents["type"] == "ammo") {
                    char.refillAmmo();
                }
                else if (this.contents["type"] == "weapon") {
                    var firearm = this.contents["firearm"];
                    if (firearm) {
                        var dropped = DinogenArena.GameUtil.GetGameState().createDroppedItem(null, this.x, this.y, this.rotation, firearm);
                        /*
                        dropped.primaryBody.applyForce(WilkinUtil.GenerateRandomNumber(-32, 32), WilkinUtil.GenerateRandomNumber(-32, 32));
                        dropped.primaryBody.angularVelocity = WilkinUtil.GenerateRandomNumber(-32, 32);
                        */
                    }
                }
            }
            this.uses--;
            if (this.uses <= 0) {
                DinogenArena.SoundManager.PlayWorldSound("physics_crate_open", this.x, this.y, 2);
                this.triggerDestroy();
            }
        };
        return GenericCrate;
    }(Crate));
    DinogenArena.GenericCrate = GenericCrate;
    var SurvivalCrate = /** @class */ (function (_super) {
        __extends(SurvivalCrate, _super);
        function SurvivalCrate(_id, _x, _y, _rotation) {
            var _this = _super.call(this, _id, _x, _y, _rotation, null) || this;
            _this.bCanBeDestroyed = false;
            _this.interactMessage = "Armory";
            _this.minimapIconId = "indicator_armory";
            _this.primaryBody.static = true;
            _this.primaryBody.dynamic = false;
            return _this;
        }
        SurvivalCrate.prototype.onInteract = function (_pawn) {
            _super.prototype.onInteract.call(this, _pawn);
            var char = _pawn;
            if (char) {
                if (char.isPlayer()) {
                    DinogenArena.GameUtil.GetGameState().gameMode.showSurvivalMenu();
                }
            }
        };
        return SurvivalCrate;
    }(Crate));
    DinogenArena.SurvivalCrate = SurvivalCrate;
    var DroppedItem = /** @class */ (function (_super) {
        __extends(DroppedItem, _super);
        function DroppedItem(_id, _x, _y, _rotation, _data) {
            var _this = _super.call(this, _id, _x, _y, _rotation) || this;
            _this.value = 0;
            _this.data = _data;
            if (_this.data) {
                var item;
                if (_this.data instanceof DinogenArena.Firearm) {
                    item = _this.data;
                }
                else {
                    item = DinogenArena.InventoryManager.GetItemById(_this.data["weaponId"]);
                }
                _this.interactMessage = item.getName();
                _this.value = item.getValue();
                var firearm = item;
                if (firearm) {
                    if (!firearm.hasAnyAmmo()) {
                        _this.enableDestroyTimer();
                    }
                }
            }
            _this.createBody();
            DinogenArena.SoundManager.PlayWorldSound("physics_weapon_drop", _this.x, _this.y, 3);
            return _this;
        }
        DroppedItem.prototype.getData = function () {
            return this.data;
        };
        DroppedItem.prototype.getInventoryItem = function () {
            return this.data;
        };
        DroppedItem.prototype.createBody = function () {
            var item = this.data;
            this.hitSprite = this.game.add.sprite(this.x, this.y, "atlas_weapons_world", item.getId());
            DinogenArena.GameUtil.GetGameState().addToWorld(this.hitSprite, DinogenArena.GameState.INDEX_BOTTOM);
            this.game.physics.box2d.enable(this.hitSprite);
            this.primaryBody = this.hitSprite.body;
            this.primaryBody.angle = this.rotation;
            this.primaryBody.linearDamping = 4;
            this.primaryBody.angularDamping = 4;
            this.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_ITEMS);
            this.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_ITEMS);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_OBJECTS, this.bodyCallback, this);
            this.primaryBody.setCategoryContactCallback(DinogenArena.GameState.CATEGORY_WALLS, this.bodyCallback, this);
            this.addBody(this.primaryBody);
        };
        DroppedItem.prototype.onHit = function (_obj) {
            _super.prototype.onHit.call(this, _obj);
            DinogenArena.SoundManager.PlayWorldSound("physics_weapon_drop", this.x, this.y, 3, DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) * 0.1);
        };
        DroppedItem.prototype.onTouch = function (_pawn) {
            _super.prototype.onTouch.call(this, _pawn);
            if (this.bPendingDestroy) {
                return;
            }
            var char = _pawn instanceof Character ? _pawn : null;
            if (char) {
                if (char.isAlive()) {
                    var item = this.data;
                    var index = char.getInventoryItemIndex(item.getId());
                    if (index >= 0) {
                        var firearm = item;
                        if (firearm) {
                            var ammo = firearm.getAmmo() + firearm.getMag();
                            char.addAmmoToInventoryItem(index, ammo);
                            if (char.isPlayer()) {
                                var feedData = {};
                                feedData["type"] = "default";
                                feedData["text"] = "Picked up " + ammo + " rounds for " + item.getName();
                                char.getPlayerController().getHUD().addToFeed(feedData);
                            }
                            this.triggerDestroy();
                        }
                    }
                    else if (char.hasInventorySpace()) {
                        this.onInteract(_pawn);
                    }
                }
            }
        };
        DroppedItem.prototype.onInteract = function (_pawn) {
            _super.prototype.onInteract.call(this, _pawn);
            var char = _pawn;
            if (char) {
                var item = this.data;
                if (item) {
                    if (!char.hasInventoryItem(item.getId())) {
                        if (char.isPlayer()) {
                            var feedData = {};
                            feedData["type"] = "default";
                            feedData["text"] = "Picked up " + item.getName();
                            char.getPlayerController().getHUD().addToFeed(feedData);
                        }
                        if (char.hasInventorySpace()) {
                            char.addInventoryItem(item);
                            this.triggerDestroy();
                        }
                        else {
                            char.swapInventoryItem(char.getCurrentInventoryIndex(), item);
                            this.triggerDestroy();
                        }
                    }
                }
            }
        };
        DroppedItem.prototype.destroy = function () {
            this.value = -1;
            delete this.data;
            this.data = null;
            _super.prototype.destroy.call(this);
        };
        return DroppedItem;
    }(Interactable));
    DinogenArena.DroppedItem = DroppedItem;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var Controller = /** @class */ (function () {
        function Controller() {
            this.followTargetDistanceThreshold = 150;
            this.ticker = 0;
            this.bCanInteract = true;
            this.bScriptMode = false;
        }
        Controller.prototype.possess = function (_pawn) {
            if (this.pawn) {
                this.unPossess();
            }
            this.pawn = _pawn;
            this.character = this.pawn instanceof DinogenArena.Character ? _pawn : null;
            this.dinosaur = this.pawn instanceof DinogenArena.Dinosaur ? _pawn : null;
            this.helicopter = this.pawn instanceof DinogenArena.Helicopter ? _pawn : null;
            this.turret = this.pawn instanceof DinogenArena.AutoTurret ? _pawn : null;
            if (this.dinosaur) {
                this.bCanInteract = false;
            }
            this.pawn.onPossess(this);
        };
        Controller.prototype.destroy = function () {
            if (this.pawn) {
                if (this.pawn.isAlive()) {
                    DinogenArena.GameUtil.GetGameState().flagObjectForDestruction(this.pawn);
                }
            }
            this.unPossess();
            this.pawn = null;
            this.character = null;
            this.dinosaur = null;
            this.helicopter = null;
            this.turret = null;
            this.gameModePlayer = null;
            this.currentInteractable = null;
            this.lastKilledBy = null;
            this.followTarget = null;
        };
        Controller.prototype.tick = function () {
            if (this.pawn) {
                this.pawn.setWantsToMove(false);
                if (this.bCanInteract) {
                    if (this.ticker % 10 == 0) {
                        this.currentInteractable = null;
                        var interactables = DinogenArena.GameUtil.GetGameState().interactables;
                        for (var i = 0; i < interactables.length; i++) {
                            var cur = interactables[i];
                            if (cur.isEnabled()) {
                                if (cur.hitSprite && this.checkOverlap(this.pawn.hitSprite, cur.hitSprite)) {
                                    this.currentInteractable = cur;
                                    this.currentInteractable.onTouch(this.pawn);
                                    break;
                                }
                            }
                        }
                    }
                }
                if (this.followTarget) {
                    if (this.followTarget.isPendingDestroy()) {
                        this.followTarget = null;
                    }
                }
            }
        };
        Controller.prototype.setScriptMode = function (_bVal) {
            this.bScriptMode = _bVal;
        };
        Controller.prototype.isScriptMode = function () {
            return this.bScriptMode;
        };
        Controller.prototype.setFollowTargetDistanceThreshold = function (_val) {
            if (_val === void 0) { _val = 150; }
            this.followTargetDistanceThreshold = _val;
        };
        Controller.prototype.setFollowTarget = function (_obj) {
            this.followTarget = _obj;
        };
        Controller.prototype.getClosestEnemy = function (_bUseLineOfSight, _maxDistance) {
            if (_maxDistance === void 0) { _maxDistance = 0; }
            return DinogenArena.GameUtil.GetGameState().getClosestPawnFor(this.pawn, true, _bUseLineOfSight, _maxDistance);
        };
        Controller.prototype.getClosestAlly = function () {
            return DinogenArena.GameUtil.GetGameState().getClosestPawnFor(this.pawn, false);
        };
        Controller.prototype.checkOverlap = function (spriteA, spriteB) {
            if (!spriteA || !spriteB) {
                return false;
            }
            var boundsA = spriteA.getBounds();
            var boundsB = spriteB.getBounds();
            return Phaser.Rectangle.intersects(boundsA, boundsB);
        };
        Controller.prototype.unPossess = function () {
            this.pawn = null;
            this.character = null;
            this.dinosaur = null;
            this.helicopter = null;
            this.turret = null;
        };
        Controller.prototype.onPawnTakeDamage = function (_damageAmount, _causer) {
            return;
        };
        Controller.prototype.onPawnDeath = function (_instigator, _causer, _damageType) {
            if (DinogenArena.GameUtil.GetGameState().gameMode) {
                DinogenArena.GameUtil.GetGameState().gameMode.onPawnDeath(this.pawn, _instigator, _causer, _damageType);
            }
            this.lastKilledBy = _instigator;
        };
        Controller.prototype.onPawnKill = function (_killed, _causer, _damageType) {
            if (DinogenArena.GameUtil.GetGameState().gameMode) {
                if (_killed != this) {
                    DinogenArena.GameUtil.GetGameState().gameMode.onPawnKill(this.pawn);
                }
            }
        };
        Controller.prototype.onPawnFlagCaptured = function () {
            if (this.gameModePlayer) {
                this.gameModePlayer.addFlagCaptures(1);
            }
        };
        Controller.prototype.onPawnFlagReturned = function () {
            if (this.gameModePlayer) {
                this.gameModePlayer.addFlagReturns(1);
            }
        };
        Controller.prototype.onPawnFlagDropped = function () {
        };
        Controller.prototype.onPawnFlagPickedUp = function () {
        };
        Controller.prototype.onPawnSetTeam = function (_team) {
            return;
        };
        Controller.prototype.onEnemyHit = function () {
            return;
        };
        Controller.prototype.onDestinationReached = function () {
            this.dispatchOnDestinationReachedTrigger();
        };
        Controller.prototype.dispatchOnDestinationReachedTrigger = function () {
            if (this.onDestinationReachedTriggerId) {
                var campaign = DinogenArena.GameUtil.GetGameState().gameMode.getCampaign();
                if (campaign) {
                    campaign.dispatchTrigger({ id: this.onDestinationReachedTriggerId });
                }
                this.onDestinationReachedTriggerId = null;
            }
        };
        Controller.prototype.setOnDestinationReachedTriggerId = function (_val) {
            if (this.onDestinationReachedTriggerId) {
                console.warn("Overwriting onDestinationReachedTriggerId: " + this.onDestinationReachedTriggerId);
            }
            this.onDestinationReachedTriggerId = _val;
        };
        Controller.prototype.getPawn = function () {
            return this.pawn;
        };
        Controller.prototype.setGameModePlayer = function (_player) {
            this.gameModePlayer = _player;
        };
        Controller.prototype.getGameModePlayer = function () {
            return this.gameModePlayer;
        };
        return Controller;
    }());
    DinogenArena.Controller = Controller;
    var PlayerController = /** @class */ (function (_super) {
        __extends(PlayerController, _super);
        function PlayerController() {
            var _this = _super.call(this) || this;
            _this.bInputEnabled = false;
            _this.bKeySwitchWeapon = true;
            _this.bKeyInteract = true;
            _this.multiKillThreshold = 60;
            _this.multiKillTimer = -1;
            _this.bMultiKillEnabled = true;
            _this.profile = DinogenArena.PlayerManager.CurrentProfile;
            _this.controls = _this.profile.controls;
            _this.hud = new DinogenArena.HUD();
            _this.setInputEnabled(true);
            _this.lookPos = new Phaser.Point();
            DinogenArena.GameUtil.game.input.onDown.add(_this.onMouseDown, _this);
            DinogenArena.GameUtil.game.input.onUp.add(_this.onMouseUp, _this);
            _this.updateGameModeKey();
            return _this;
        }
        PlayerController.prototype.initKeys = function () {
        };
        PlayerController.prototype.tick = function () {
            this.hud.tick();
            _super.prototype.tick.call(this);
            if (this.canInput()) {
                if (this.pawn) {
                    if (this.pawn.isAlive()) {
                        this.hud.getCrosshair().setArrowRotation(this.pawn.rotation);
                        if (!DinogenArena.GameUtil.GetGameState().gameMode.matchHasEnded()) {
                            this.pawn.lookAt(this.lookPos.x, this.lookPos.y);
                        }
                        var bLookAtMouse = true;
                        var mouseX = DinogenArena.GameUtil.game.input.activePointer.worldX;
                        var mouseY = DinogenArena.GameUtil.game.input.activePointer.worldY;
                        if (this.dinosaur) {
                            var distToMouse = DinogenArena.WilkinUtil.GetDistance(this.pawn.primaryBody.x, this.pawn.primaryBody.y, mouseX, mouseY);
                            if (distToMouse < 8) {
                                bLookAtMouse = false;
                            }
                        }
                        if (bLookAtMouse) {
                            this.lookPos.x = mouseX;
                            this.lookPos.y = mouseY;
                        }
                        if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                            var speed = this.pawn.getSpeed();
                            var keyboard = DinogenArena.GameUtil.game.input.keyboard;
                            var bKeyLeft = keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_LEFT)).isDown || keyboard.addKey(Phaser.Keyboard.LEFT).isDown;
                            var bKeyRight = keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_RIGHT)).isDown || keyboard.addKey(Phaser.Keyboard.RIGHT).isDown;
                            var bKeyUp = keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_UP)).isDown || keyboard.addKey(Phaser.Keyboard.UP).isDown;
                            var bKeyDown = keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_DOWN)).isDown || keyboard.addKey(Phaser.Keyboard.DOWN).isDown;
                            if (this.dinosaur) {
                                if (DinogenArena.GameUtil.game.input.keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_MELEE)).isDown) {
                                    //this.dinosaur.triggerAttack(true);
                                }
                                if (bKeyUp) {
                                    this.pawn.moveForward();
                                }
                                if (bKeyDown) {
                                    this.pawn.moveBackward(0.5);
                                }
                                if (this.dinosaur.canSideStep()) {
                                    if (bKeyLeft) {
                                        this.pawn.moveLeft(0.5);
                                    }
                                    if (bKeyRight) {
                                        this.pawn.moveRight(0.5);
                                    }
                                }
                                if (this.dinosaur.isAttacking()) {
                                    var enemy = this.getClosestEnemy(false);
                                    if (enemy && DinogenArena.GameUtil.GetGameState().getDistance(this.pawn, enemy) < 80) {
                                        this.lookPos.x = enemy.x;
                                        this.lookPos.y = enemy.y;
                                    }
                                }
                            }
                            else if (this.character) {
                                var bAbsoluteMovement = DinogenArena.PlayerManager.CurrentProfile.settings.bAbsoluteMovement;
                                if (bAbsoluteMovement) {
                                    if (bKeyLeft) {
                                        this.pawn.move(-speed, 0);
                                    }
                                    if (bKeyRight) {
                                        this.pawn.move(speed, 0);
                                    }
                                    if (bKeyUp) {
                                        this.pawn.move(0, -speed);
                                    }
                                    if (bKeyDown) {
                                        this.pawn.move(0, speed);
                                    }
                                }
                                else {
                                    if (bKeyLeft) {
                                        this.pawn.moveLeft();
                                    }
                                    if (bKeyRight) {
                                        this.pawn.moveRight();
                                    }
                                    if (bKeyUp) {
                                        this.pawn.moveForward();
                                    }
                                    if (bKeyDown) {
                                        this.pawn.moveBackward();
                                    }
                                }
                                if (keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_SPRINT)).isDown) {
                                    this.character.startSprinting();
                                }
                                else {
                                    this.character.stopSprinting();
                                }
                                if (keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_MELEE)).isDown) {
                                    this.character.startMeleeAttack();
                                }
                                if (keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_RELOAD)).isDown) {
                                    this.character.reload();
                                }
                                if (keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_SWITCH_WEAPON)).isDown) {
                                    if (this.bKeySwitchWeapon) {
                                        this.bKeySwitchWeapon = false;
                                        this.character.switchWeapon();
                                    }
                                }
                                else {
                                    this.bKeySwitchWeapon = true;
                                }
                                if (keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_INTERACT)).isDown) {
                                    if (this.bKeyInteract) {
                                        this.bKeyInteract = false;
                                        if (this.currentInteractable) {
                                            this.currentInteractable.onInteract(this.pawn);
                                        }
                                    }
                                }
                                else {
                                    this.bKeyInteract = true;
                                }
                                if (keyboard.addKey(Phaser.Keyboard.ONE).isDown) {
                                    this.character.switchWeaponTo(0);
                                }
                                else if (keyboard.addKey(Phaser.Keyboard.TWO).isDown) {
                                    this.character.switchWeaponTo(1);
                                }
                            }
                            if (this.bMultiKillEnabled) {
                                if (this.multiKillTimer > 0) {
                                    this.multiKillTimer--;
                                }
                                else if (this.multiKillTimer == 0) {
                                    var multiKill = this.gameModePlayer.getCurrentMultiKill();
                                    if (multiKill >= 2) {
                                        var xp = 50;
                                        var label = "Double Kill!";
                                        if (multiKill == 3) {
                                            label = "Triple Kill!";
                                            xp = 100;
                                        }
                                        else if (multiKill == 4) {
                                            label = "Quad Kill!";
                                            xp = 200;
                                        }
                                        else if (multiKill >= 5) {
                                            label = "Multi Kill!";
                                            xp = 300;
                                        }
                                        this.hud.addToNotifier({
                                            labelText: label,
                                            xpText: "+" + xp + "XP",
                                            sound: "ui_bonus"
                                        });
                                        if (DinogenArena.PlayerManager.CurrentProfile.isCustomPrestiged()) {
                                            var challenges = DinogenArena.PlayerManager.CurrentProfile.challenges;
                                            var multiKills = this.profile.challenges.addMultiKill();
                                            var tier = challenges.getTierFor(DinogenArena.Challenges.TIER_KILLS, multiKills);
                                            if (tier > 0) {
                                                var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                                                xp += tierXP;
                                                this.hud.addToNotifier({
                                                    labelText: "Multi-Kills: Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier),
                                                    xpText: "+" + tierXP + "XP",
                                                    descText: "Get " + multiKills + " multi-kills",
                                                    icon: "icon_challenge_complete",
                                                    sound: "ui_challenge_complete",
                                                    timer: DinogenArena.HUDElement_Notifier.TIMER_CHALLENGES
                                                });
                                            }
                                        }
                                        //this.profile.addCustomXP(xp);
                                        this.addXP(xp);
                                    }
                                    this.gameModePlayer.resetCurrentMultiKill();
                                    this.multiKillTimer = -1;
                                }
                            }
                        }
                    }
                    else {
                        if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                            var timer = this.gameModePlayer.getRespawnTimer();
                            if (timer > 0) {
                                var killedStr = "";
                                if (this.lastKilledBy) {
                                    //killedStr = "Killed by " + this.lastKilledBy.getGameModePlayer().getName() + "\n";
                                }
                                this.hud.setMessageText(killedStr + "Respawning in " + Math.ceil(timer / DinogenArena.GameUtil.frameRate) + "...");
                                this.hud.setDeadIconVisible(true);
                            }
                            else {
                                this.hud.setMessageText(null);
                                this.hud.setDeadIconVisible(false);
                            }
                        }
                        else {
                            this.hud.setMessageText(null);
                        }
                    }
                }
                if (DinogenArena.GameUtil.GetGameState().gameMode.hasScoreboard() && !DinogenArena.GameUtil.GetGameState().gameMode.matchHasEnded()) {
                    var bGameModeKeyDown = DinogenArena.GameUtil.game.input.keyboard.addKey(this.controls.getKey(DinogenArena.PlayerControls.KEY_SCOREBOARD)).isDown;
                    if (bGameModeKeyDown) {
                        DinogenArena.GameUtil.GetGameState().gameMode.showScoreboard();
                    }
                    else {
                        DinogenArena.GameUtil.GetGameState().gameMode.hideScoreboard();
                    }
                }
            }
        };
        PlayerController.prototype.onEnemyHit = function () {
            if (this.dinosaur) {
                if (!this.dinosaur.hasProjectileAttack()) {
                    if (this.dinosaur.primaryBody) {
                        this.dinosaur.pushBack();
                    }
                }
            }
        };
        PlayerController.prototype.updateGameModeKey = function () {
            var key = DinogenArena.GameUtil.game.input.keyboard.addKey(DinogenArena.PlayerManager.CurrentProfile.controls.getKey(DinogenArena.PlayerControls.KEY_SCOREBOARD));
            key.onDown.add(this.onGameModeKeyPressed, this);
        };
        PlayerController.prototype.onGameModeKeyPressed = function () {
            if (DinogenArena.GameUtil.GetGameState().bGamePaused) {
                return;
            }
            if (DinogenArena.GameUtil.GetGameState().hasCinematic()) {
                return;
            }
        };
        PlayerController.prototype.canInput = function () {
            return this.bInputEnabled && !DinogenArena.GameUtil.GetGameState().hasCinematic() && !DinogenArena.GameUtil.GetGameState().bGamePaused;
        };
        PlayerController.prototype.possess = function (_pawn) {
            _super.prototype.possess.call(this, _pawn);
            if (this.hud) {
                this.hud.setHasPawn(true);
            }
            if (this.pawn) {
                var lookX = DinogenArena.GameUtil.game.input.activePointer.worldX;
                var lookY = DinogenArena.GameUtil.game.input.activePointer.worldY;
                this.pawn.lookAt(lookX, lookY);
                this.hud.getCrosshair().setArrowVisible(true);
                this.hud.getCrosshair().setCanFire(true);
                if (this.dinosaur) {
                    this.hud.getCrosshair().setReloading(false);
                    this.hud.getCrosshair().setNeedsReload(false);
                }
            }
            this.updateHUD();
        };
        PlayerController.prototype.onPawnSetTeam = function (_team) {
            this.hud.playerInfo.setPawnTeam(_team);
        };
        PlayerController.prototype.onPawnTakeDamage = function (_damageAmount, _causer) {
            _super.prototype.onPawnTakeDamage.call(this, _damageAmount, _causer);
            if (this.hud) {
                var angle;
                var origin;
                var projectile = _causer instanceof DinogenArena.ProjectileBase ? _causer : null;
                if (projectile != null) {
                    origin = projectile.getOrigin();
                }
                else {
                    origin = new Phaser.Point(_causer.x, _causer.y);
                }
                //console.log("origin=" + origin + ", pawn=" + this.pawn);
                var distX = origin.x - this.pawn.x;
                var distY = origin.y - this.pawn.y;
                angle = Math.atan2(distY, distX);
                this.hud.onTakeDamage(_causer, angle);
            }
            DinogenArena.GameUtil.GetGameState().shakeCamera(_damageAmount * 0.15);
        };
        PlayerController.prototype.onGameModeStarted = function () {
            if (this.character) {
                if (DinogenArena.GameUtil.GetGameState().gameMode.isTeamGame()) {
                    this.character.sayVox("vox_char_start", 5, true);
                }
            }
        };
        PlayerController.prototype.onGameModeWin = function () {
            var xp = 0;
            var challenges = DinogenArena.PlayerManager.CurrentProfile.challenges;
            var challengeWins = this.profile.challenges.addWin();
            var tier = challenges.getTierFor("generic", challengeWins);
            if (tier > 0) {
                var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                xp += tierXP;
                this.addXP(xp);
            }
            if (DinogenArena.GameUtil.GetGameState().gameMode.isCustom()) {
                if (DinogenArena.GameUtil.GetGameState().gameMode instanceof DinogenArena.GameMode_TeamDeathmatch) {
                    var tdm = DinogenArena.GameUtil.GetGameState().gameMode;
                    var playerPlacement = tdm.getPlaceForPlayer(this.gameModePlayer);
                    if (playerPlacement == 1) {
                        if (DinogenArena.PlayerManager.CurrentProfile.isCustomPrestiged()) {
                            var challenges = DinogenArena.PlayerManager.CurrentProfile.challenges;
                            var mvps = this.profile.challenges.addMVPs();
                            var tier = challenges.getTierFor(DinogenArena.Challenges.TIER_GENERIC, mvps);
                            if (tier > 0) {
                                var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                                this.addXP(tierXP);
                            }
                        }
                        DinogenArena.PlayerManager.CurrentProfile.unlockAchievement(DinogenArena.Achievements.ACH_TDM_MVP);
                    }
                }
            }
        };
        PlayerController.prototype.onGameModeLoss = function () {
            //...
        };
        PlayerController.prototype.onPawnFlagCaptured = function () {
            _super.prototype.onPawnFlagCaptured.call(this);
            var xp = 250;
            this.hud.addToNotifier({
                labelText: "Flag Captured!",
                xpText: "+" + xp + "XP",
                descText: "You captured the enemy flag",
                sound: "ui_bonus",
                icon: "icon_ctf_captured"
            });
            var challenges = DinogenArena.PlayerManager.CurrentProfile.challenges;
            var challengeCaptures = this.profile.challenges.addCapture();
            var tier = challenges.getTierFor("generic", challengeCaptures);
            if (tier > 0) {
                var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                xp += tierXP;
                this.hud.addToNotifier({
                    labelText: "Flag Captures: Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier),
                    xpText: "+" + tierXP + "XP",
                    descText: "Get " + challengeCaptures + " flag captures",
                    icon: "icon_challenge_complete",
                    sound: "ui_challenge_complete",
                    timer: DinogenArena.HUDElement_Notifier.TIMER_CHALLENGES
                });
            }
            this.addXP(xp);
            DinogenArena.PlayerManager.CurrentProfile.unlockAchievement(DinogenArena.Achievements.ACH_CTF_CAPTURE);
        };
        PlayerController.prototype.onPawnFlagReturned = function () {
            _super.prototype.onPawnFlagReturned.call(this);
            var xp = 50;
            this.hud.addToNotifier({
                labelText: "Flag Returned!",
                xpText: "+" + xp + "XP",
                descText: "You returned your flag",
                sound: "ui_bonus",
                icon: "icon_ctf_returned"
            });
            this.addXP(xp);
        };
        PlayerController.prototype.onPawnFlagDropped = function () {
            _super.prototype.onPawnFlagDropped.call(this);
            this.hud.addToNotifier({
                labelText: "Flag Dropped!",
                descText: "You dropped the enemy flag",
                sound: "ui_killstreak_end"
            });
        };
        PlayerController.prototype.onPawnFlagPickedUp = function () {
            _super.prototype.onPawnFlagPickedUp.call(this);
            var xp = 50;
            this.hud.addToNotifier({
                labelText: "Flag Picked Up!",
                xpText: "+" + xp + "XP",
                descText: "You have the enemy flag",
                sound: "ui_bonus",
                icon: "icon_ctf_returned"
            });
            this.addXP(xp);
        };
        PlayerController.prototype.onPawnKill = function (_killed, _causer, _damageType) {
            _super.prototype.onPawnKill.call(this, _killed, _causer, _damageType);
            var profile = DinogenArena.PlayerManager.CurrentProfile;
            var bSuicide = _killed == this;
            if (bSuicide) {
                this.hud.addToNotifier({
                    labelText: "Suicide!",
                    descText: "Mistakes were made",
                    sound: "ui_killstreak_end"
                });
            }
            else {
                profile.addTotalKills(1);
                if (DinogenArena.GameUtil.GetGameState().gameMode.isCustom()) {
                    var xp = 50;
                    var challenges = DinogenArena.PlayerManager.CurrentProfile.challenges;
                    if (DinogenArena.GameUtil.GetGameState().gameMode.totalKills == 1) {
                        xp += 50;
                        this.hud.addToNotifier({
                            labelText: "First Blood!",
                            xpText: "+" + 50 + "XP",
                            descText: "You got the first kill",
                            sound: "ui_bonus"
                        });
                        var firstBloods = this.profile.challenges.addFirstBlood();
                        var tier = challenges.getTierFor("generic", firstBloods); //Challenges.GetGenericTier(firstBloods);
                        if (tier > 0) {
                            var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                            xp += tierXP;
                            this.hud.addToNotifier({
                                labelText: "First Blood: Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier),
                                xpText: "+" + DinogenArena.WilkinUtil.FormatNum(tierXP) + "XP",
                                descText: "Get " + firstBloods + " first bloods",
                                icon: "icon_challenge_complete",
                                sound: "ui_challenge_complete",
                                timer: DinogenArena.HUDElement_Notifier.TIMER_CHALLENGES
                            });
                        }
                        DinogenArena.PlayerManager.CurrentProfile.unlockAchievement(DinogenArena.Achievements.ACH_FIRST_BLOOD);
                    }
                    if (this.bMultiKillEnabled) {
                        this.multiKillTimer = this.multiKillThreshold;
                    }
                    if (this.gameModePlayer.currentKillStreak > 0 && this.gameModePlayer.currentKillStreak % 5 == 0) {
                        xp += 50;
                        this.hud.addToNotifier({
                            labelText: this.gameModePlayer.currentKillStreak + " Kill Streak!",
                            xpText: "+" + 50 + "XP",
                            sound: "ui_bonus"
                        });
                    }
                    var revengePlayer = this.gameModePlayer.wantsRevengeFor(_killed.getGameModePlayer());
                    if (revengePlayer) {
                        xp += 25;
                        this.hud.addToNotifier({
                            labelText: "Revenge!",
                            xpText: "+" + 25 + "XP",
                            descText: "You killed a player who killed you",
                            sound: "ui_bonus"
                        });
                        this.gameModePlayer.removeRevengePlayer(revengePlayer);
                    }
                    if (_causer instanceof DinogenArena.ProjectileBase) {
                        var projectile = _causer;
                        var firearm = projectile.getFirearm();
                        if (firearm) {
                            var weaponKills = this.profile.challenges.addWeaponKill(firearm.getId());
                            var tier = challenges.getTierFor("weapon_kills", weaponKills);
                            if (tier > 0) {
                                var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                                xp += tierXP;
                                this.hud.addToNotifier({
                                    labelText: firearm.getName() + ": Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier),
                                    xpText: "+" + DinogenArena.WilkinUtil.FormatNum(tierXP) + "XP",
                                    descText: "Get " + weaponKills + " kills with the " + firearm.getName(),
                                    //icon: "icon_challenge_complete",
                                    icon: firearm.getId(),
                                    atlasId: "atlas_weapons",
                                    sound: "ui_challenge_complete",
                                    timer: DinogenArena.HUDElement_Notifier.TIMER_CHALLENGES
                                });
                            }
                        }
                    }
                    else if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_MELEE) {
                        profile.addTotalMeleeKills(1);
                        xp += 50;
                        this.hud.addToNotifier({
                            labelText: "Melee Kill!",
                            xpText: "+" + 50 + "XP",
                            sound: "ui_bonus"
                        });
                        var meleeKills = this.profile.challenges.addMeleeKill();
                        var tier = challenges.getTierFor("kills", meleeKills);
                        if (tier > 0) {
                            var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                            xp += tierXP;
                            this.hud.addToNotifier({
                                labelText: "Melee Kills: Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier),
                                xpText: "+" + DinogenArena.WilkinUtil.FormatNum(tierXP) + "XP",
                                descText: "Get " + meleeKills + " kills with your knife",
                                icon: "icon_challenge_complete",
                                sound: "ui_challenge_complete",
                                timer: DinogenArena.HUDElement_Notifier.TIMER_CHALLENGES
                            });
                        }
                    }
                    if (this.dinosaur) {
                        DinogenArena.PlayerManager.CurrentProfile.unlockAchievement(DinogenArena.Achievements.ACH_DINO_KILL);
                        var challengeKills = this.profile.challenges.addKillAsDino();
                        var tier = challenges.getTierFor("kills", challengeKills);
                        if (tier > 0) {
                            var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                            xp += tierXP;
                            this.hud.addToNotifier({
                                labelText: "Dinosaur Kills: Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier),
                                xpText: "+" + DinogenArena.WilkinUtil.FormatNum(tierXP) + "XP",
                                descText: "Get " + challengeKills + " kills as a dinosaur",
                                icon: "icon_challenge_complete",
                                sound: "ui_challenge_complete",
                                timer: DinogenArena.HUDElement_Notifier.TIMER_CHALLENGES
                            });
                        }
                    }
                    var challengeKills = this.profile.challenges.addKill();
                    var tier = challenges.getTierFor("kills", challengeKills);
                    if (tier > 0) {
                        var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                        xp += tierXP;
                        this.hud.addToNotifier({
                            labelText: "Kills: Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier),
                            xpText: "+" + DinogenArena.WilkinUtil.FormatNum(tierXP) + "XP",
                            descText: "Get " + challengeKills + " kills",
                            icon: "icon_challenge_complete",
                            sound: "ui_challenge_complete",
                            timer: DinogenArena.HUDElement_Notifier.TIMER_CHALLENGES
                        });
                    }
                    if (this.pawn.isInHillZone()) {
                        var challengeKills = this.profile.challenges.addKingKill();
                        var tier = challenges.getTierFor("kills", challengeKills);
                        if (tier > 0) {
                            var tierXP = DinogenArena.Challenges.XP_BONUS * tier;
                            xp += tierXP;
                            this.hud.addToNotifier({
                                labelText: "King of the Hill Zone Kills: Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier),
                                xpText: "+" + DinogenArena.WilkinUtil.FormatNum(tierXP) + "XP",
                                descText: "Get " + challengeKills + " zone kills",
                                icon: "icon_challenge_complete",
                                sound: "ui_challenge_complete",
                                timer: DinogenArena.HUDElement_Notifier.TIMER_CHALLENGES
                            });
                        }
                    }
                    this.addXP(xp);
                }
                else if (DinogenArena.GameUtil.GetGameState().gameMode.isCampaign()) {
                    var xpReward = _killed.getPawn().getKillReward();
                    this.addXP(xpReward);
                }
                if (this.character) {
                    if (this.character.isInHillZone()) {
                    }
                }
            }
        };
        PlayerController.prototype.addXP = function (_val) {
            var bCustom = DinogenArena.GameUtil.GetGameState().gameMode.isCustom();
            var profile = DinogenArena.PlayerManager.CurrentProfile;
            var xpMult = 2;
            var realVal = _val * profile.getXPMultiplier();
            if (bCustom) {
                profile.addCustomXP(realVal);
            }
            this.hud.addToXP(realVal);
            DinogenArena.SoundManager.PlayUISound("ui_point");
        };
        PlayerController.prototype.onPawnDeath = function (_instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _instigator, _causer, _damageType);
            if (this.hud) {
                //GameUtil.GetGameState().cameraTarget = _instigator.getPawn();
                DinogenArena.GameUtil.game.time.events.add(Phaser.Timer.SECOND, this.followKiller, this, _instigator);
                this.updateHUD();
                this.hud.setHasPawn(false);
                if (DinogenArena.GameUtil.GetGameState().gameMode instanceof DinogenArena.CustomGameMode) {
                    var prevKillStreak = this.gameModePlayer.currentKillStreak;
                    if (prevKillStreak >= 5) {
                        this.hud.addToNotifier({
                            labelText: "Kill Streak Ended!",
                            descText: _instigator.getGameModePlayer().getName() + " ended your " + prevKillStreak + " kill streak",
                            sound: "ui_killstreak_end"
                        });
                    }
                }
            }
            if (this.pawn) {
                this.pawn.setId(this.pawn.getId() + "_dead");
            }
            var profile = DinogenArena.PlayerManager.CurrentProfile;
            profile.addTotalDeaths(1);
            this.gameModePlayer.addRevengePlayer(_instigator.getGameModePlayer());
            DinogenArena.SoundManager.PlayUISound("ui_player_killed", 1);
        };
        PlayerController.prototype.followKiller = function (_instigator) {
            DinogenArena.GameUtil.GetGameState().cameraTarget = _instigator.getPawn();
        };
        PlayerController.prototype.onMouseDown = function () {
            if (!DinogenArena.GameUtil.GetGameState().gameMode.matchHasStarted()) {
                return;
            }
            if (!this.canInput()) {
                return;
            }
            if (this.character) {
                if (this.character.isAlive()) {
                    this.character.triggerWeapon(true);
                }
            }
            else if (this.dinosaur) {
                if (this.dinosaur.isAlive()) {
                    this.dinosaur.triggerAttack(true);
                    //this.dinosaur.suicide();
                }
            }
        };
        PlayerController.prototype.onMouseUp = function () {
            if (!DinogenArena.GameUtil.GetGameState().gameMode || !DinogenArena.GameUtil.GetGameState().gameMode.matchHasStarted()) {
                return;
            }
            if (this.character) {
                if (this.character.isAlive()) {
                    this.character.triggerWeapon(false);
                }
            }
            else if (this.dinosaur) {
                if (this.dinosaur.isAlive()) {
                    this.dinosaur.triggerAttack(false);
                }
            }
        };
        PlayerController.prototype.setInputEnabled = function (_bVal) {
            this.bInputEnabled = _bVal;
        };
        PlayerController.prototype.updateHUD = function () {
            if (this.hud != null) {
                this.hud.updatePlayerController(this);
            }
        };
        PlayerController.prototype.getHUD = function () {
            return this.hud;
        };
        PlayerController.prototype.setGameModePlayer = function (_player) {
            _super.prototype.setGameModePlayer.call(this, _player);
            this.hud.getMiniMap().setTeam(this.gameModePlayer.getTeam());
        };
        PlayerController.prototype.destroy = function () {
            DinogenArena.GameUtil.game.input.onDown.remove(this.onMouseDown, this);
            DinogenArena.GameUtil.game.input.onUp.remove(this.onMouseUp, this);
            this.profile = null;
            this.controls = null;
            this.hud.destroy();
            this.hud = null;
            this.lookPos = null;
            _super.prototype.destroy.call(this);
        };
        return PlayerController;
    }(Controller));
    DinogenArena.PlayerController = PlayerController;
    var AIController = /** @class */ (function (_super) {
        __extends(AIController, _super);
        function AIController() {
            var _this = _super.call(this) || this;
            _this.skillLevel = 0;
            _this.bWantsToAttack = false;
            _this.bUseSightRange = false;
            _this.bHasLineOfSightToEnemy = false;
            _this.currentPath = [];
            _this.lookPosition = new Phaser.Point(0, 0);
            _this.setSkillLevel(0);
            if (DinogenArena.GameUtil.GetGameState().gameMode.isCampaign()) {
                _this.bCanInteract = false;
                _this.bUseSightRange = true;
            }
            return _this;
        }
        AIController.prototype.setUseSightRange = function (_bVal) {
            this.bUseSightRange = _bVal;
        };
        AIController.prototype.setScriptMode = function (_bVal) {
            _super.prototype.setScriptMode.call(this, _bVal);
            if (this.bScriptMode) {
                this.currentEnemy = null;
                this.currentInteractable = null;
                this.currentPath = [];
            }
        };
        AIController.prototype.possess = function (_pawn) {
            _super.prototype.possess.call(this, _pawn);
            this.ticker = 0;
        };
        AIController.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                this.ticker++;
                if (this.ticker > 180) {
                    this.ticker = 0;
                }
            }
        };
        AIController.prototype.setClosestEnemyAsCurrent = function () {
            if (!this.bScriptMode) {
                this.setCurrentEnemy(this.getClosestEnemy(this.bUseSightRange, this.bUseSightRange ? 900 : 0));
                if (!this.currentEnemy) {
                    //this.setDestination(this.pawn.x, this.pawn.y);
                    /* Stop pawn */
                }
            }
            else {
            }
        };
        AIController.prototype.setCurrentEnemy = function (_pawn) {
            var prevEnemy = this.currentEnemy;
            this.currentEnemy = _pawn;
            if (this.currentEnemy) {
                if (this.currentEnemy != prevEnemy) {
                    //this.bHasLineOfSightToEnemy = false;
                    this.onGetCurrentEnemy(this.currentEnemy);
                }
            }
            else {
                this.bHasLineOfSightToEnemy = false;
                if (prevEnemy && prevEnemy.isAlive()) {
                    this.onEnemyLost();
                }
            }
        };
        AIController.prototype.onGetCurrentEnemy = function (_pawn) {
            return;
        };
        AIController.prototype.onEnemySeen = function (_pawn) {
            return;
        };
        AIController.prototype.onEnemyLost = function () {
            return;
        };
        AIController.prototype.setSkillLevel = function (_val) {
            this.skillLevel = _val;
        };
        AIController.prototype.updatePath = function () {
            if (!this.pawn || !this.destination) {
                return;
            }
            this.currentPath = DinogenArena.GameUtil.GetGameState().getPath(this.pawn.x, this.pawn.y, this.destination.x, this.destination.y);
        };
        AIController.prototype.setDestination = function (_x, _y) {
            var bInit = this.destination != null;
            if (!bInit) {
                this.destination = new Phaser.Point();
            }
            this.destination.set(_x, _y);
            if (!bInit) {
                this.updatePath();
            }
        };
        AIController.prototype.setLookPosition = function (_x, _y) {
            this.lookPosition.set(_x, _y);
        };
        AIController.prototype.destroy = function () {
            this.currentEnemy = null;
            this.destination = null;
            this.currentPath = null;
            this.lookPosition = null;
            _super.prototype.destroy.call(this);
        };
        return AIController;
    }(Controller));
    DinogenArena.AIController = AIController;
    var AIController_AutoTurret = /** @class */ (function (_super) {
        __extends(AIController_AutoTurret, _super);
        function AIController_AutoTurret() {
            var _this = _super.call(this) || this;
            _this.lookPos = new Phaser.Point(0, 0);
            return _this;
        }
        AIController_AutoTurret.prototype.destroy = function () {
            this.lookPos = null;
            _super.prototype.destroy.call(this);
        };
        AIController_AutoTurret.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.pawn) {
                if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                    if (this.ticker % 30 == 0) {
                        if (this.turret.hasAmmo()) {
                            var player = DinogenArena.GameUtil.GetGameState().player;
                            if (this.turret.canAttack()) {
                                this.setClosestEnemyAsCurrent();
                                if (!this.currentEnemy) {
                                    this.bWantsToAttack = false;
                                }
                            }
                        }
                    }
                    if (this.currentEnemy) {
                        this.turret.lookAt(this.currentEnemy.x, this.currentEnemy.y);
                        var attackRange = this.turret.getRange();
                        var distToEnemy = DinogenArena.WilkinUtil.GetDistance(this.currentEnemy.x, this.currentEnemy.y, this.pawn.x, this.pawn.y);
                        if (distToEnemy < attackRange) {
                            this.bWantsToAttack = true;
                        }
                        else {
                            this.bWantsToAttack = false;
                        }
                    }
                    this.turret.triggerWeapon(this.bWantsToAttack);
                }
                else {
                    this.turret.triggerWeapon(false);
                }
            }
        };
        return AIController_AutoTurret;
    }(AIController));
    DinogenArena.AIController_AutoTurret = AIController_AutoTurret;
    var AIController_Helicopter = /** @class */ (function (_super) {
        __extends(AIController_Helicopter, _super);
        function AIController_Helicopter() {
            var _this = _super.call(this) || this;
            _this.lookPos = new Phaser.Point(0, 0);
            _this.movePos = new Phaser.Point(1000, 1000);
            return _this;
        }
        AIController_Helicopter.prototype.destroy = function () {
            this.lookPos = null;
            this.movePos = null;
            _super.prototype.destroy.call(this);
        };
        AIController_Helicopter.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.pawn) {
                if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                    if (this.ticker % 15 == 0) {
                        if (this.helicopter.hasAmmo()) {
                            var player = DinogenArena.GameUtil.GetGameState().player;
                            if (this.helicopter.canAttack()) {
                                //this.setCurrentEnemy(this.getClosestEnemy());
                                this.setClosestEnemyAsCurrent();
                                if (this.currentEnemy) {
                                    this.lookPos.set(this.currentEnemy.x, this.currentEnemy.y);
                                }
                                else {
                                    this.bWantsToAttack = false;
                                    this.lookPos.set(player.x, player.y);
                                }
                            }
                            this.lookPos.set(player.x, player.y);
                            this.movePos.set(player.x, player.y);
                        }
                        else {
                            this.currentEnemy = null;
                            if (!this.helicopter.destroyTimerIsEnabled()) {
                                this.helicopter.enableDestroyTimer();
                                this.movePos.set(-500, DinogenArena.GameUtil.game.world.height * 0.5);
                                this.lookPos.set(this.movePos.x, this.movePos.y);
                            }
                        }
                    }
                    var dist = DinogenArena.WilkinUtil.GetDistance(this.helicopter.x, this.helicopter.y, this.movePos.x, this.movePos.y);
                    var mult = this.helicopter.hasAmmo() ? Math.min(1, dist / 360) : 2;
                    if (dist > 200) {
                        if (!this.helicopter.isDropping()) {
                            this.helicopter.moveToPoint(this.movePos.x, this.movePos.y, mult);
                        }
                    }
                    else {
                        if (this.helicopter.hasItems()) {
                            this.helicopter.setDropping(true);
                        }
                    }
                    this.helicopter.lookAt(this.lookPos.x, this.lookPos.y);
                    if (this.currentEnemy) {
                        var attackRange = 720;
                        var distToEnemy = DinogenArena.WilkinUtil.GetDistance(this.currentEnemy.x, this.currentEnemy.y, this.pawn.x, this.pawn.y);
                        if (distToEnemy < attackRange) {
                            this.helicopter.setDesiredWeaponAngle(DinogenArena.WilkinUtil.GetAngle(this.helicopter.x, this.helicopter.y, this.currentEnemy.x, this.currentEnemy.y));
                            this.bWantsToAttack = true;
                        }
                        else {
                            this.bWantsToAttack = false;
                        }
                    }
                    this.helicopter.triggerWeapon(this.bWantsToAttack);
                }
                else {
                    this.helicopter.triggerWeapon(false);
                }
            }
        };
        return AIController_Helicopter;
    }(AIController));
    DinogenArena.AIController_Helicopter = AIController_Helicopter;
    var AIController_Character = /** @class */ (function (_super) {
        __extends(AIController_Character, _super);
        function AIController_Character() {
            var _this = _super.call(this) || this;
            _this.burstTimerMax = 30;
            _this.burstTimer = 0;
            _this.attackTimerMax = 30;
            _this.attackTimer = 0;
            _this.engageDistMin = 250;
            _this.engageDistMax = 500;
            _this.fireRateHandicap = 1;
            _this.bWantsAmmo = false;
            _this.bWantsWeapon = false;
            return _this;
        }
        AIController_Character.prototype.possess = function (_pawn) {
            _super.prototype.possess.call(this, _pawn);
            this.resetAttackTimer();
            this.attackTimer = 1;
        };
        AIController_Character.prototype.onGetCurrentEnemy = function (_pawn) {
            _super.prototype.onGetCurrentEnemy.call(this, _pawn);
        };
        AIController_Character.prototype.onEnemySeen = function (_pawn) {
            _super.prototype.onEnemySeen.call(this, _pawn);
            if (_pawn instanceof DinogenArena.Character) {
                var enemyChar = _pawn;
                if (enemyChar.isSniper()) {
                    this.character.sayVox("vox_char_sniper", 3, true);
                }
                else {
                    if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                        this.character.sayVox("vox_char_enemy_seen_dino", 5, true);
                    }
                    else {
                        this.character.sayVox("vox_char_enemy_seen", 5, true);
                    }
                }
            }
            else {
                if (DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                    var bSay = DinogenArena.WilkinUtil.GenerateRandomNumber(1, 20) == 1;
                    if (bSay) {
                        if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                            this.character.sayVox("vox_char_enemy_seen_dino", 5, true);
                        }
                        else {
                            this.character.sayVox("vox_char_enemy_seen", 5, true);
                        }
                    }
                }
                else {
                    if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                        if (DinogenArena.WilkinUtil.GenerateRandomBoolean()) {
                            this.character.sayVox("vox_char_enemy_seen_dino", 5, true);
                        }
                        else {
                            this.character.sayVox("vox_char_enemy_seen", 5, true);
                        }
                    }
                }
            }
        };
        AIController_Character.prototype.onEnemyLost = function () {
            _super.prototype.onEnemyLost.call(this);
            if (!DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 4) == 1) {
                    this.character.sayVox("vox_char_enemy_lost", 3);
                }
            }
        };
        AIController_Character.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.pawn) {
                if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                    if (this.pawn.isAlive()) {
                        if (this.ticker == 0 || this.ticker % 15 == 0) {
                            //this.setCurrentEnemy(this.getClosestEnemy());
                            this.setClosestEnemyAsCurrent();
                        }
                        if (this.currentEnemy) {
                            var distToEnemy = DinogenArena.GameUtil.GetGameState().getDistance(this.pawn, this.currentEnemy);
                            this.setLookPosition(this.currentEnemy.x, this.currentEnemy.y);
                            if (distToEnemy > this.engageDistMax) {
                                if (this.currentPath.length > 0) {
                                    this.setLookPosition(this.currentPath[0].x, this.currentPath[0].y);
                                }
                                this.bWantsToAttack = false;
                            }
                            else {
                                if (this.attackTimer > 0) {
                                    this.attackTimer--;
                                }
                                else {
                                    if (this.burstTimer > 0) {
                                        this.burstTimer--;
                                        this.bWantsToAttack = true;
                                    }
                                    else {
                                        this.resetAttackTimer();
                                    }
                                }
                            }
                        }
                        else {
                            if (this.followTarget) {
                                this.setLookPosition(this.followTarget.x, this.followTarget.y);
                            }
                            this.bWantsToAttack = false;
                        }
                        if (this.bWantsToAttack) {
                            var raycastOutput = DinogenArena.GameUtil.game.physics.box2d.raycast(this.pawn.x, this.pawn.y, this.currentEnemy.x, this.currentEnemy.y, true, DinogenArena.GameState.FilterRaycastHit);
                            if (raycastOutput.length > 0) {
                                if (this.currentEnemy && this.bHasLineOfSightToEnemy) {
                                    this.onEnemyLost();
                                }
                                this.bWantsToAttack = false;
                                this.bHasLineOfSightToEnemy = false;
                            }
                            else {
                                if (!this.bHasLineOfSightToEnemy) {
                                    this.onEnemySeen(this.currentEnemy);
                                }
                                this.bHasLineOfSightToEnemy = true;
                            }
                        }
                        if (this.bWantsToAttack) {
                            var mod = 1;
                            var firearm = this.character.getCurrentFirearm();
                            if (firearm) {
                                mod = firearm.getFireRate();
                                if (firearm.getFireMode() == DinogenArena.Firearm.FIRE_MODE_SEMI) {
                                    mod *= DinogenArena.WilkinUtil.GenerateRandomNumber(5 - this.skillLevel, this.fireRateHandicap);
                                }
                                mod = Math.max(mod, 4);
                                mod = Math.min(mod, 40);
                            }
                            if (this.burstTimer % mod == 0) {
                                if (this.character.getCurrentFirearm().hasAnyAmmo()) {
                                    this.character.triggerWeapon(true);
                                }
                                else {
                                    this.character.triggerWeapon(false);
                                }
                            }
                        }
                        else {
                            this.character.triggerWeapon(false);
                        }
                        this.bWantsWeapon = this.checkWantsWeapon();
                        if (this.bWantsWeapon) {
                            this.desiredItem = null; //this.getBestDroppedItem();
                        }
                        else {
                            this.desiredItem = null;
                        }
                        this.bWantsAmmo = this.checkWantsAmmo();
                        if (this.bWantsAmmo) {
                            //this.character.dropCurrentInventoryItem();
                            if (this.character.hasAnyAmmo()) {
                                this.character.switchWeapon();
                            }
                        }
                        /* Set the destination based on priority */
                        if (this.followTarget) {
                            this.setDestination(this.followTarget.x, this.followTarget.y);
                        }
                        else if (this.desiredItem) {
                            this.setDestination(this.desiredItem.x, this.desiredItem.y);
                        }
                        else if (this.currentEnemy) {
                            this.setDestination(this.currentEnemy.x, this.currentEnemy.y);
                        }
                        if (this.ticker % 30 == 0) {
                            var bUpdatePath = true;
                            if (this.followTarget) {
                                var distToFollowTarget = DinogenArena.WilkinUtil.GetDistance(this.pawn.x, this.pawn.y, this.followTarget.x, this.followTarget.y);
                                if (distToFollowTarget < this.followTargetDistanceThreshold) {
                                    bUpdatePath = false;
                                    this.currentPath = [];
                                    this.onDestinationReached();
                                }
                                else if (distToFollowTarget > this.engageDistMax) {
                                    //this.character.startSprinting();
                                }
                                else {
                                    //this.character.stopSprinting();
                                }
                            }
                            if (bUpdatePath) {
                                this.updatePath();
                            }
                        }
                        if (this.currentEnemy && distToEnemy < 40) {
                            if (this.ticker % (65 - (this.skillLevel * 20)) == 0) {
                                this.character.startMeleeAttack();
                            }
                        }
                        /* Execute look and move */
                        this.pawn.lookAt(this.lookPosition.x, this.lookPosition.y);
                        if (this.currentPath.length > 0) {
                            var bMove = true;
                            var bMoveBack = false;
                            var distPathX = this.currentPath[0].x - this.pawn.x;
                            var distPathY = this.currentPath[0].y - this.pawn.y;
                            var distToPath = DinogenArena.WilkinUtil.GetDistance(this.currentPath[0].x, this.currentPath[0].y, this.pawn.x, this.pawn.y);
                            var distThreshold = 8;
                            if (distToPath < distThreshold) {
                                this.currentPath.splice(0, 1);
                            }
                            var rad = Math.atan2(distPathY, distPathX);
                            var pawnSpeed = this.pawn.getSpeed();
                            if (!this.followTarget) {
                                if (this.currentEnemy) {
                                    if (this.bHasLineOfSightToEnemy) {
                                        if (distToEnemy > this.engageDistMin) {
                                            this.setDestination(this.currentEnemy.x, this.currentEnemy.y);
                                        }
                                        else {
                                            bMove = false;
                                            if (distToEnemy < this.engageDistMin * 0.8) {
                                                bMoveBack = true;
                                            }
                                        }
                                    }
                                    else {
                                        this.setDestination(this.currentEnemy.x, this.currentEnemy.y);
                                    }
                                }
                            }
                            if (bMove) {
                                this.pawn.move(Math.cos(rad) * pawnSpeed, Math.sin(rad) * pawnSpeed);
                            }
                            else if (bMoveBack) {
                                var backSpeed = this.skillLevel > 0 ? 1 : 0.5;
                                this.pawn.move(Math.cos(rad) * -backSpeed, Math.sin(rad) * -backSpeed);
                            }
                        }
                    }
                }
                else {
                    var player = DinogenArena.GameUtil.GetGameState().player;
                    if (player) {
                        this.setLookPosition(player.x, player.y);
                        this.pawn.lookAt(this.lookPosition.x, this.lookPosition.y);
                    }
                }
            }
        };
        AIController_Character.prototype.onPawnTakeDamage = function (_damageAmount, _causer) {
            _super.prototype.onPawnTakeDamage.call(this, _damageAmount, _causer);
            if (this.pawn.getHealthPercent() <= 0.5) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3) == 1) {
                    this.character.sayVox("vox_char_need_help", 5, true);
                }
            }
        };
        AIController_Character.prototype.onPawnKill = function (_killed, _causer, _damageType) {
            _super.prototype.onPawnKill.call(this, _killed, _causer, _damageType);
            if (this.character) {
                if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_MELEE || DinogenArena.WilkinUtil.GenerateRandomNumber(1, 10) == 1) {
                    this.character.sayVox("vox_char_celebrate", 5);
                }
                else if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 4) > 1) {
                    var bSay = true;
                    if (DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                        bSay = DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) == 1;
                    }
                    if (bSay) {
                        this.character.sayVox("vox_char_enemy_killed", 5);
                    }
                }
            }
        };
        AIController_Character.prototype.onPawnFlagCaptured = function () {
            _super.prototype.onPawnFlagCaptured.call(this);
            this.character.sayVox("vox_char_celebrate", 5);
        };
        AIController_Character.prototype.onPawnFlagPickedUp = function () {
            _super.prototype.onPawnFlagPickedUp.call(this);
            this.character.sayVox("vox_char_cover", 3, true);
        };
        AIController_Character.prototype.checkWantsAmmo = function () {
            if (!this.character.getCurrentFirearm()) {
                return false;
            }
            return !this.character.getCurrentFirearm().hasAnyAmmo();
        };
        AIController_Character.prototype.checkWantsWeapon = function () {
            if (DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                return false;
            }
            if (this.character) {
                return this.character.hasInventorySpace();
            }
            return false;
        };
        AIController_Character.prototype.setSkillLevel = function (_val) {
            _super.prototype.setSkillLevel.call(this, _val);
            this.engageDistMax = 400 + (100 * _val);
            this.engageDistMin = 200 + (100 * _val);
            this.fireRateHandicap = Math.max(1, 15 - _val);
            this.burstTimerMax = 15 + (_val * 10);
            this.attackTimerMax = 60 - (_val * 15);
            if (this.character) {
                this.character.setLookSpeed(0.1 + (0.2 * _val));
            }
            if (DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                this.fireRateHandicap = 1;
                this.burstTimerMax = 180;
                this.attackTimerMax = 1;
            }
        };
        AIController_Character.prototype.resetAttackTimer = function () {
            this.bWantsToAttack = false;
            this.attackTimer = this.attackTimerMax; // * (WilkinUtil.GenerateRandomNumber(8, 12) * 0.1);
            this.burstTimer = this.burstTimerMax; // * (WilkinUtil.GenerateRandomNumber(8, 12) * 0.1);
        };
        AIController_Character.prototype.getBestDroppedItem = function () {
            var interactables = DinogenArena.GameUtil.GetGameState().interactables;
            var items;
            for (var i = 0; i < interactables.length; i++) {
                var item = interactables[i];
                if (DinogenArena.GameUtil.GetGameState().getDistance(item, this.pawn) < this.engageDistMax) {
                    if (item instanceof DinogenArena.DroppedItem) {
                        var firearm = item.getData();
                        if (firearm) {
                            if (!this.character.hasInventoryItem(firearm.getId()) && firearm.hasAnyAmmo()) {
                                if (!items) {
                                    items = [];
                                }
                                items.push(item);
                            }
                        }
                    }
                }
            }
            if (items) {
                return this.sortDroppedItems(items)[0];
            }
            return null;
        };
        AIController_Character.prototype.sortDroppedItems = function (_items) {
            console.log("BEFORE");
            console.log(_items);
            var arr = _items.sort(this.compareDroppedItems);
            console.log("AFTER");
            console.log(arr);
            return arr;
        };
        AIController_Character.prototype.compareDroppedItems = function (_a, _b) {
            if (_a.value < _b.value) {
                return 1;
            }
            if (_a.value > _b.value) {
                return -1;
            }
            return 0;
        };
        AIController_Character.prototype.onTouch = function (_interactable) {
            if (_interactable == this.desiredItem) {
                this.desiredItem.onInteract(this.pawn);
            }
        };
        AIController_Character.prototype.onPawnDeath = function (_instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _instigator, _causer, _damageType);
            this.resetAttackTimer();
        };
        AIController_Character.prototype.destroy = function () {
            this.desiredItem = null;
            _super.prototype.destroy.call(this);
        };
        return AIController_Character;
    }(AIController));
    DinogenArena.AIController_Character = AIController_Character;
    var AIController_Dinosaur = /** @class */ (function (_super) {
        __extends(AIController_Dinosaur, _super);
        function AIController_Dinosaur() {
            var _this = _super.call(this) || this;
            _this.enemyHits = 0;
            _this.enemyHitsMax = 1;
            _this.postAttackCooldown = 0;
            _this.postAttackCooldownMax = 15;
            _this.bCanInteract = false;
            return _this;
        }
        AIController_Dinosaur.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.pawn) {
                if (DinogenArena.GameUtil.GetGameState().gameMode.matchIsInProgress()) {
                    if (this.pawn.isAlive()) {
                        if (this.ticker == 0 || this.ticker % 15 == 0) {
                            //this.setCurrentEnemy(this.getClosestEnemy());
                            this.setClosestEnemyAsCurrent();
                        }
                        if (this.currentEnemy) {
                            var distToEnemy = DinogenArena.GameUtil.GetGameState().getDistance(this.pawn, this.currentEnemy);
                            if (distToEnemy > 5) {
                                this.setLookPosition(this.currentEnemy.x, this.currentEnemy.y);
                            }
                            var distToAttack = (this.dinosaur.hasProjectileAttack() ? 280 : 100) + (this.skillLevel * 30);
                            if (distToEnemy < distToAttack) {
                                if (this.postAttackCooldown > 0) {
                                    this.postAttackCooldown--;
                                    this.bWantsToAttack = false;
                                }
                                else {
                                    if (!this.bWantsToAttack) {
                                        this.dinosaur.pushBack();
                                    }
                                    this.bWantsToAttack = true;
                                }
                            }
                            else {
                                this.bWantsToAttack = false;
                            }
                        }
                        else {
                            if (this.followTarget) {
                                this.setLookPosition(this.followTarget.x, this.followTarget.y);
                            }
                            this.bWantsToAttack = false;
                        }
                        if (this.bWantsToAttack) {
                            var raycastOutput = DinogenArena.GameUtil.game.physics.box2d.raycast(this.pawn.x, this.pawn.y, this.currentEnemy.x, this.currentEnemy.y, true, DinogenArena.GameState.FilterRaycastHit);
                            if (raycastOutput.length > 0) {
                                this.bWantsToAttack = false;
                                this.bHasLineOfSightToEnemy = false;
                            }
                            else {
                                this.bHasLineOfSightToEnemy = true;
                            }
                        }
                        if (this.bWantsToAttack) {
                            this.dinosaur.triggerAttack(true);
                        }
                        else {
                            this.dinosaur.triggerAttack(false);
                        }
                        /* Set the destination based on priority */
                        if (this.followTarget) {
                            this.setDestination(this.followTarget.x, this.followTarget.y);
                        }
                        else if (this.currentEnemy) {
                            this.setDestination(this.currentEnemy.x, this.currentEnemy.y);
                        }
                        if (this.ticker % 30 == 0) {
                            this.updatePath();
                        }
                        /* Execute look and move */
                        if (this.currentPath.length > 0) {
                            var distX = this.currentPath[0].x - this.pawn.x;
                            var distY = this.currentPath[0].y - this.pawn.y;
                            if (this.currentPath.length > 0) {
                                if (this.currentEnemy) {
                                    var distToEnemyLook = (this.dinosaur.hasProjectileAttack() ? 250 : 100) + (this.skillLevel * 30);
                                    if (distToEnemy > distToEnemyLook) {
                                        this.setLookPosition(this.currentPath[0].x, this.currentPath[0].y);
                                    }
                                }
                                var check = 10;
                                if (Math.abs(distX) < check || Math.abs(distY) < check) {
                                    this.currentPath.splice(0, 1);
                                }
                            }
                            var rad = Math.atan2(distY, distX);
                            var pawnSpeed = this.pawn.getSpeed();
                            var minDist = this.dinosaur.hasProjectileAttack() ? 250 + (this.skillLevel * 20) : 1;
                            if (distToEnemy > minDist) {
                                this.pawn.move(Math.cos(rad) * pawnSpeed, Math.sin(rad) * pawnSpeed);
                            }
                            else if (this.dinosaur.hasProjectileAttack() && distToEnemy < (minDist * 0.6)) {
                                this.pawn.moveBackward(1);
                            }
                        }
                        else if (this.destination) {
                            var distX = this.destination.x - this.pawn.x;
                            var distY = this.destination.y - this.pawn.y;
                            var rad = Math.atan2(distY, distX);
                            var pawnSpeed = this.pawn.getSpeed();
                            if (this.postAttackCooldown <= 0) {
                                this.pawn.move(Math.cos(rad) * pawnSpeed, Math.sin(rad) * pawnSpeed);
                            }
                        }
                        this.pawn.lookAt(this.lookPosition.x, this.lookPosition.y);
                    }
                }
                else {
                    var player = DinogenArena.GameUtil.GetGameState().player;
                    if (player) {
                        this.setLookPosition(player.x, player.y);
                        this.pawn.lookAt(this.lookPosition.x, this.lookPosition.y);
                    }
                }
            }
        };
        AIController_Dinosaur.prototype.onEnemySeen = function (_pawn) {
            _super.prototype.onEnemySeen.call(this, _pawn);
            this.dinosaur.playAttackSound();
        };
        AIController_Dinosaur.prototype.onEnemyHit = function () {
            if (!this.dinosaur) {
                return;
            }
            this.enemyHits++;
            var realMax = this.enemyHitsMax;
            if (this.dinosaur instanceof DinogenArena.Dilo) {
                realMax *= 2;
            }
            else if (this.dinosaur instanceof DinogenArena.Needler) {
                realMax *= 8;
            }
            realMax += (this.skillLevel * 2);
            if (this.enemyHits >= realMax) {
                this.resetPostAttackCooldown();
                this.dinosaur.triggerAttack(false);
            }
            if (!this.dinosaur.hasProjectileAttack()) {
                if (this.dinosaur.primaryBody) {
                    if (this.dinosaur.primaryBody) {
                        this.dinosaur.pushBack();
                    }
                }
            }
        };
        AIController_Dinosaur.prototype.resetPostAttackCooldown = function () {
            this.enemyHits = 0;
            this.postAttackCooldown = this.postAttackCooldownMax;
        };
        AIController_Dinosaur.prototype.setSkillLevel = function (_val) {
            _super.prototype.setSkillLevel.call(this, _val);
            this.postAttackCooldownMax = Math.max(0, 30 - (_val * 10));
            if (this.dinosaur) {
                this.enemyHitsMax = Math.ceil(1 + _val);
            }
        };
        AIController_Dinosaur.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        return AIController_Dinosaur;
    }(AIController));
    DinogenArena.AIController_Dinosaur = AIController_Dinosaur;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var GameMode = /** @class */ (function () {
        function GameMode(_id) {
            this.timeRemaining = 0;
            this.preMatchTimer = 0;
            this.playerDamageMultiplier = 0.5;
            this.totalKills = 0;
            this.bIsTimeLimited = true;
            this.bUseKillFeed = true;
            this.bUseSpawnProtection = true;
            this.bPlayerHasSpawned = false;
            this.bShowInstructions = true;
            this.bSetPawnTeamColour = true;
            this.bFriendlyFire = true;
            this.bTeamGame = false;
            this.defaultRespawnTime = 180;
            this.info = DinogenArena.GameModeManager.GetGameMode(_id);
            var profile = DinogenArena.PlayerManager.CurrentProfile;
            if (profile.getCustomPrestige() > 0) {
                this.playerDamageMultiplier = 0.65;
            }
            else {
                this.playerDamageMultiplier = 0.45;
            }
            this.playerInitialData = ({
                customLevel: profile.getCustomLevel(),
                customXP: profile.getCustomXP()
            });
            this.gamePlayers = [];
            this.playersToRemove = [];
            this.setPreMatchTimer(3);
        }
        GameMode.prototype.destroy = function () {
            DinogenArena.SoundManager.StopVox();
            this.info = null;
            this.data = null;
            this.playerInitialData = null;
            this.clearPlayers();
            this.gamePlayers = null;
            this.playersToRemove = null;
            this.scoreboard = null;
            this.teamSelectMenu = null;
            this.spawnMenu = null;
            this.destroyPostGameMenu();
        };
        GameMode.prototype.triggerInterstitialAd = function () {
            if (DinogenArena.GameUtil.IsDebugging() || DinogenArena.GameUtil.AdsEnabled()) {
                this.destroyInterstitialAd();
                this.ad = new DinogenArena.InterstitialAd();
            }
        };
        GameMode.prototype.destroyInterstitialAd = function () {
            if (this.ad) {
                this.ad.destroy();
                this.ad = null;
            }
        };
        GameMode.prototype.getNumPlayersWantingToRespawn = function () {
            if (this.gamePlayers && !this.matchHasEnded()) {
                var count = 0;
                for (var i = 0; i < this.gamePlayers.length; i++) {
                    if (this.gamePlayers[i].wantsToRespawn()) {
                        count++;
                    }
                }
                return count;
            }
            return 0;
        };
        GameMode.prototype.isTeamGame = function () {
            return this.bTeamGame;
        };
        GameMode.prototype.getId = function () {
            if (this.info) {
                return this.info["id"];
            }
            return null;
        };
        GameMode.prototype.friendlyFireIsEnabled = function () {
            return this.bFriendlyFire;
        };
        GameMode.prototype.getPlaceForPlayer = function (_player) {
            return this.gamePlayers.indexOf(_player) + 1;
        };
        GameMode.prototype.sortPlayers = function () {
            this.gamePlayers.sort(this.comparePlayers);
        };
        GameMode.prototype.comparePlayers = function (_a, _b) {
            if (_a.kills < _b.kills) {
                return 1;
            }
            if (_a.kills > _b.kills) {
                return -1;
            }
            return 0;
        };
        GameMode.prototype.getCampaign = function () {
            var campaign = this instanceof GameMode_Campaign ? this : null;
            return campaign;
        };
        GameMode.prototype.getSurvival = function () {
            var survival = this instanceof GameMode_Survival ? this : null;
            return survival;
        };
        GameMode.prototype.getCTF = function () {
            var ctf = this instanceof GameMode_CaptureTheFlag ? this : null;
            return ctf;
        };
        GameMode.prototype.getKOTH = function () {
            var koth = this instanceof GameMode_KingOfTheHill ? this : null;
            return koth;
        };
        GameMode.prototype.isCampaign = function () {
            return this.getId() == DinogenArena.GameModeManager.GAME_MODE_CAMPAIGN;
        };
        GameMode.prototype.isTutorial = function () {
            var gameId = DinogenArena.GameUtil.GetGameState().data["gameId"];
            return gameId == "tutorial";
        };
        GameMode.prototype.isSurvival = function () {
            return this.getId() == DinogenArena.GameModeManager.GAME_MODE_SURVIVAL;
        };
        GameMode.prototype.isCustom = function () {
            return (this instanceof CustomGameMode);
        };
        GameMode.prototype.getSpawnPosition = function (_player) {
            var pos;
            pos = new Phaser.Point(DinogenArena.GameUtil.game.world.bounds.halfWidth, DinogenArena.GameUtil.game.world.bounds.halfHeight + 200);
            if (!_player.isUserPlayer()) {
                pos.x += DinogenArena.WilkinUtil.GenerateRandomNumber(-300, 300);
            }
            return pos;
        };
        GameMode.prototype.createTeamSelectMenu = function (_data) {
            this.destroyTeamSelectMenu();
            this.teamSelectMenu = new DinogenArena.TeamSelectMenu(_data);
            DinogenArena.GameUtil.game.showMouse(true);
        };
        GameMode.prototype.destroyTeamSelectMenu = function () {
            if (this.teamSelectMenu != null) {
                this.teamSelectMenu.destroy();
            }
            this.teamSelectMenu = null;
        };
        GameMode.prototype.createSpawnMenu = function (_data) {
            this.destroySpawnMenu();
            this.spawnMenu = new DinogenArena.SpawnMenu(_data);
            DinogenArena.GameUtil.game.showMouse(true);
        };
        GameMode.prototype.destroySpawnMenu = function () {
            if (this.spawnMenu != null) {
                this.spawnMenu.destroy();
            }
            this.spawnMenu = null;
        };
        GameMode.prototype.createPostGameMenu = function () {
            if (this.postGameMenu) {
                this.postGameMenu.destroy();
            }
            this.destroySpawnMenu();
            if (this.teamSelectMenu) {
                this.teamSelectMenu.destroy();
            }
            this.postGameMenu = new DinogenArena.PostGameMenu(this);
            this.postGameMenu.onCloseCallback = this.destroyPostGameMenu;
            this.postGameMenu.onCloseCallbackContext = this;
            DinogenArena.SoundManager.PlayUISound("ui_match_end");
            //GameUtil.GetGameState().setPaused(true, false);
        };
        GameMode.prototype.destroyPostGameMenu = function () {
            if (this.postGameMenu) {
                this.postGameMenu.destroy();
                this.postGameMenu = null;
            }
        };
        GameMode.prototype.tick = function () {
            if (this.state == GameMode.STATE_WAITING_PRE_MATCH) {
                if (this.preMatchTimer > 0) {
                    if (this.preMatchTimer % DinogenArena.GameUtil.frameRate == 0) {
                        DinogenArena.SoundManager.PlayUISound("ui_beep");
                    }
                    this.preMatchTimer--;
                }
                else {
                    this.startMatch();
                }
            }
            else if (this.state == GameMode.STATE_IN_PROGRESS) {
                if (this.bIsTimeLimited) {
                    if (this.timeRemaining > 0) {
                        if (this.timeRemaining <= 600 && this.timeRemaining % DinogenArena.GameUtil.frameRate == 0) {
                            DinogenArena.SoundManager.PlayUISound("ui_beep");
                        }
                        this.timeRemaining--;
                    }
                    else {
                        this.endMatch(GameMode.END_MATCH_CONDITION_TIME);
                    }
                }
            }
            if (!this.matchHasEnded()) {
                for (var i = 0; i < this.gamePlayers.length; i++) {
                    this.gamePlayers[i].tick();
                }
            }
            if (this.scoreboard) {
                this.scoreboard.tick();
            }
            if (this.playersToRemove) {
                while (this.playersToRemove.length > 0) {
                    this.removePlayer(this.playersToRemove[0]);
                    this.playersToRemove.splice(0, 1);
                }
            }
        };
        GameMode.prototype.setPreMatchTimer = function (_sec) {
            this.preMatchTimer = _sec * 60;
        };
        GameMode.prototype.setMatchIsWaitingToStart = function () {
            //GameUtil.GetGameState().setWorldGray(true);
            this.state = GameMode.STATE_WAITING_TO_START;
            //Create player controller
            this.handleMatchIsWaitingToStart();
        };
        GameMode.prototype.startMatch = function () {
            //GameUtil.GetGameState().setWorldGray(true);
            DinogenArena.GameUtil.game.showMouse(false);
            this.handleMatchHasStarted();
        };
        GameMode.prototype.endMatch = function (_condition) {
            //GameUtil.GetGameState().setWorldGray(true);
            this.endMatchCondition = _condition;
            this.handleMatchHasEnded();
            DinogenArena.SoundManager.PlayUISound("ui_match_stop");
            DinogenArena.Engine.SaveProfileData();
        };
        GameMode.prototype.handleMatchIsWaitingToStart = function () {
            DinogenArena.GameUtil.GetGameState().setWorldGray(true);
            return;
        };
        GameMode.prototype.handleMatchHasStarted = function () {
            this.state = GameMode.STATE_IN_PROGRESS;
            if (this.bShowInstructions) {
                this.showInstructions();
            }
            DinogenArena.GameUtil.GetGameState().setWorldGray(false);
            DinogenArena.GameUtil.GetGameState().playerController.onGameModeStarted();
        };
        GameMode.prototype.handleMatchHasEnded = function () {
            this.state = GameMode.STATE_WAITING_POST_MATCH;
            this.sortPlayers();
            var pawns = DinogenArena.GameUtil.GetGameState().pawns;
            for (var i = 0; i < pawns.length; i++) {
                var pawn = pawns[i];
                if (pawn.isAlive()) {
                    pawn.stopAllActions();
                }
            }
            var pc = DinogenArena.GameUtil.GetGameState().playerController;
            pc.setInputEnabled(false);
            pc.getHUD().getCrosshair().hide();
            if (this.spawnMenu) {
                this.spawnMenu.destroy();
                this.spawnMenu = null;
            }
            this.getMatchResult();
            if (this.hasScoreboard()) {
                this.scoreboard.setResult(this.result);
            }
            if (this.result == GameMode.RESULT_WIN) {
                pc.onGameModeWin();
            }
            else if (this.result == GameMode.RESULT_LOSS) {
                pc.onGameModeLoss();
            }
            var timer = DinogenArena.GameUtil.game.time.create(true);
            timer.add(1000, this.createPostGameMenu, this);
            timer.start();
        };
        GameMode.prototype.handlePlayerPostGame = function () {
            var pc = DinogenArena.GameUtil.GetGameState().playerController;
            if (!pc) {
                return;
            }
            if (this.result == GameMode.RESULT_WIN) {
                pc.onGameModeWin();
            }
            else if (this.result == GameMode.RESULT_LOSS) {
                pc.onGameModeLoss();
            }
        };
        GameMode.prototype.getMatchResult = function () {
            this.result = GameMode.RESULT_DRAW;
        };
        GameMode.prototype.matchHasStarted = function () {
            return this.state == GameMode.STATE_IN_PROGRESS;
        };
        GameMode.prototype.playerHasSpawned = function () {
            return this.bPlayerHasSpawned;
        };
        GameMode.prototype.hasScoreboard = function () {
            return true;
        };
        GameMode.prototype.matchIsInProgress = function () {
            return this.state == GameMode.STATE_IN_PROGRESS;
        };
        GameMode.prototype.matchHasEnded = function () {
            return this.state == GameMode.STATE_WAITING_POST_MATCH;
        };
        GameMode.prototype.createBots = function () {
            return;
        };
        GameMode.prototype.removeBot = function () {
            for (var i = 0; i < this.gamePlayers.length; i++) {
                var player = this.gamePlayers[i];
                if (!player.isUserPlayer()) {
                    this.removePlayer(player);
                    break;
                }
            }
        };
        GameMode.prototype.removeAllBots = function () {
            for (var i = 0; i < this.gamePlayers.length; i++) {
                var player = this.gamePlayers[i];
                if (!player.isUserPlayer()) {
                    this.removePlayer(player);
                }
            }
        };
        GameMode.prototype.removeAllBotsFromTeam = function (_team) {
            var len = this.gamePlayers.length - 1;
            for (var i = len; i >= 0; i--) {
                var player = this.gamePlayers[i];
                if (player.getTeam() == _team && !player.isUserPlayer()) {
                    this.removePlayer(player);
                }
            }
        };
        GameMode.prototype.removePlayer = function (_player) {
            var controller = _player.getController();
            if (controller) {
                DinogenArena.GameUtil.GetGameState().destroyController(controller);
            }
            if (this.scoreboard) {
                this.scoreboard.removePlayer(_player);
            }
            var index = this.gamePlayers.indexOf(_player);
            _player.destroy();
            this.gamePlayers.splice(index, 1);
        };
        GameMode.prototype.removeBotFromTeam = function (_team) {
            for (var i = 0; i < this.gamePlayers.length; i++) {
                var player = this.gamePlayers[i];
                if (player.getTeam() == _team) {
                    if (!player.isUserPlayer()) {
                        this.removePlayer(player);
                        break;
                    }
                }
            }
        };
        GameMode.prototype.onSetPawnTeam = function (_pawn) {
            return;
        };
        GameMode.prototype.setFromData = function (_data) {
            this.data = _data;
            if (_data) {
                if (_data["timeLimit"] != undefined) {
                    this.timeRemaining = _data["timeLimit"] * 3600; //60 * 60
                }
                if (_data["aiSkillLevel"] != undefined) {
                    this.aiSkillLevel = _data["aiSkillLevel"];
                }
                else {
                    if (this.isCampaign()) {
                        this.aiSkillLevel = 1;
                    }
                    else {
                        this.aiSkillLevel = -1;
                    }
                }
            }
            if (this.hasScoreboard()) {
                this.scoreboard = new DinogenArena.Scoreboard();
            }
        };
        GameMode.prototype.getSecondsSinceMatchStart = function () {
            if (!this.data) {
                return -1;
            }
            return ((this.data["timeLimit"] * 3600) - this.timeRemaining) / DinogenArena.GameUtil.frameRate;
        };
        GameMode.prototype.showScoreboard = function () {
            if (this.scoreboard) {
                if (!this.scoreboard.isShowing()) {
                    this.scoreboard.show();
                }
            }
        };
        GameMode.prototype.hideScoreboard = function () {
            if (this.scoreboard) {
                if (this.scoreboard.isShowing()) {
                    this.scoreboard.close();
                }
            }
        };
        GameMode.prototype.getNumPlayers = function () {
            return this.gamePlayers.length;
        };
        GameMode.prototype.getNumPlayersForTeam = function (_team) {
            var count = 0;
            for (var i = 0; i < this.gamePlayers.length; i++) {
                var player = this.gamePlayers[i];
                if (player.getTeam() == _team) {
                    count++;
                }
            }
            return count;
        };
        GameMode.prototype.addHelicopter = function (_owner, _heliType) {
            var heli = DinogenArena.GameUtil.GetGameState().createHelicopter(null, 0, 0, 0, _heliType);
            heli.getController().setGameModePlayer(_owner);
            heli.setTeam(_owner.getTeam());
            var hud = DinogenArena.GameUtil.GetGameState().playerController.getHUD();
            if (hud) {
                hud.allies.setHelicopter(heli);
            }
            return heli;
        };
        GameMode.prototype.addAutoTurretWithBase = function (_owner, _x, _y) {
            if (!_owner) {
                _owner = this.getUserPlayer();
            }
            var turret = DinogenArena.GameUtil.GetGameState().createAutoTurret(null, _x, _y, 0);
            turret.getController().setGameModePlayer(_owner);
            turret.setTeam(_owner.getTeam());
            var base = DinogenArena.GameUtil.GetGameState().createAutoTurretBase(null, _x, _y, 0, turret);
            return turret;
        };
        GameMode.prototype.addAutoTurretBase = function (_x, _y) {
            var base = DinogenArena.GameUtil.GetGameState().createAutoTurretBase(null, _x, _y, 0, null);
            return base;
        };
        GameMode.prototype.addAutoTurret = function (_owner, _x, _y) {
            if (!_owner) {
                _owner = this.getUserPlayer();
            }
            var turret = DinogenArena.GameUtil.GetGameState().createAutoTurret(null, _x, _y, 0);
            turret.getController().setGameModePlayer(_owner);
            turret.setTeam(_owner.getTeam());
            return turret;
        };
        GameMode.prototype.addUserPlayer = function (_team, _data) {
            if (_data === void 0) { _data = null; }
            return this.addPlayer(DinogenArena.PlayerManager.CurrentProfile.name, _team, true, _data);
        };
        GameMode.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            var useName = _name;
            var player = new GameModePlayer(useName, _team, _bUserPlayer);
            player.setRespawnTimerMax(this.defaultRespawnTime);
            this.gamePlayers.push(player);
            if (player.isUserPlayer()) {
                this.onUserPlayerJoined();
            }
            else {
                var skillLevel = this.aiSkillLevel;
                if (skillLevel < 0) {
                    //skillLevel = WilkinUtil.GenerateRandomNumber(0, 2);
                    var profile = DinogenArena.PlayerManager.CurrentProfile;
                    var playerLevel = profile.getCustomLevel();
                    var randMin = 0;
                    var randMax = 0;
                    if (profile.isCustomPrestiged()) {
                        if (playerLevel >= 20) {
                            randMin = 2;
                            randMax = 3;
                        }
                        else if (playerLevel >= 10) {
                            randMin = 1;
                            randMax = 3;
                        }
                        else {
                            randMin = 1;
                            randMax = 2;
                        }
                    }
                    else {
                        if (playerLevel >= 25) {
                            randMin = 1;
                            randMax = 3;
                        }
                        else if (playerLevel >= 20) {
                            randMin = 1;
                            randMax = 2;
                        }
                        else if (playerLevel >= 10) {
                            randMax = 2;
                        }
                        else if (playerLevel >= 5) {
                            randMax = 1;
                        }
                        else {
                            randMin = randMax = 0;
                        }
                    }
                    skillLevel = DinogenArena.WilkinUtil.GenerateRandomNumber(randMin, randMax);
                }
                //console.log("Create ai pawn skill level: " + skillLevel + " / " + this.aiSkillLevel);
                player.setBotSkillLevel(skillLevel);
            }
            //console.log("addPlayer: " + _name + " skillLevel=" + skillLevel + " team=" + _team + " player=" + _bUserPlayer);
            if (this.scoreboard) {
                this.scoreboard.addPlayer(player);
            }
            return player;
        };
        GameMode.prototype.onUserPlayerJoined = function () {
            console.log("onUserPlayerJoined");
        };
        GameMode.prototype.onUserPlayerSpawned = function () {
            if (this.state == GameMode.STATE_WAITING_TO_START) {
                this.state = GameMode.STATE_WAITING_PRE_MATCH;
            }
            this.bPlayerHasSpawned = true;
        };
        GameMode.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            var gmp = _pawn.getController().getGameModePlayer();
            if (gmp) {
                gmp.addDeaths(1);
                if (gmp.isDisposable()) {
                    this.playersToRemove.push(gmp);
                }
            }
            if (_pawn) {
                if (!_pawn.isPlayer() && _pawn.getTeam() == DinogenArena.GameUtil.GetGameState().getPlayerTeam()) {
                    DinogenArena.GameUtil.GetGameState().addAllyKilledIcon(_pawn.x, _pawn.y);
                }
            }
            if (!_instigator) {
                DinogenArena.GameUtil.Alert("GameMode::onPawnDeath: null instigator. " + _pawn.getId() + " " + _pawn.getTeam() + " " + _causer + " " + _damageType);
                return;
            }
            if (this.bUseKillFeed) {
                if (!_instigator.getPawn()) {
                    return;
                }
                var pc = DinogenArena.GameUtil.GetGameState().playerController;
                var data = {};
                data["type"] = "kill";
                data["bSuicide"] = _instigator.getGameModePlayer() == _pawn.getController().getGameModePlayer();
                data["killer"] = _instigator.getGameModePlayer().getName();
                data["killerColour"] = DinogenArena.GameModeManager.GetColourForTeam(_instigator.getPawn().getTeam());
                data["killed"] = _pawn.getController().getGameModePlayer().getName();
                data["killedColour"] = DinogenArena.GameModeManager.GetColourForTeam(_pawn.getController().getPawn().getTeam());
                if (_causer instanceof DinogenArena.ProjectileBase) {
                    var projectile = _causer;
                    if (projectile.getFirearm()) {
                        data["weaponId"] = projectile.getFirearm().getId();
                    }
                }
                else if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_MELEE) {
                    data["weaponId"] = DinogenArena.InventoryManager.ITEM_MELEE_KNIFE;
                }
                pc.getHUD().addToFeed(data);
                if (_pawn.getPlayerController() != null) {
                    if (_instigator && _instigator.getPawn()) {
                        var causerPawn = _instigator.getPawn();
                        //GameUtil.GetGameState().cameraTarget = causerPawn;
                    }
                }
            }
        };
        GameMode.prototype.onPawnKill = function (_pawn) {
            this.totalKills++;
            if (!_pawn) {
                return;
            }
            var gmp = _pawn.getController().getGameModePlayer();
            if (gmp) {
                gmp.addKills(1);
            }
        };
        GameMode.prototype.getUserPlayer = function () {
            for (var i = 0; i < this.gamePlayers.length; i++) {
                var player = this.gamePlayers[i];
                if (player.isUserPlayer()) {
                    return player;
                }
            }
            return null;
        };
        GameMode.prototype.clearPlayers = function () {
            if (this.gamePlayers) {
                while (this.gamePlayers.length > 0) {
                    this.gamePlayers[0].destroy();
                    this.gamePlayers.splice(0, 1);
                }
            }
            this.gamePlayers = null;
        };
        GameMode.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            if (_gameModePlayer.isUserPlayer()) {
                this.onUserPlayerSpawned();
            }
            return null;
        };
        GameMode.prototype.spawnCharacterFromLoadout = function (_gameModePlayer, _x, _y, _loadout) {
            var loadout = _loadout;
            var char = DinogenArena.GameUtil.GetGameState().createPlayerCharacter(_x, _y);
            char.setTeam(_gameModePlayer.getTeam());
            char.addPerk(loadout.perkPlayer);
            char.addPerk(loadout.perkWeapon);
            //char.addInventoryItems([loadout.weaponSecondary, loadout.weaponPrimary]);
            var firearm;
            firearm = DinogenArena.InventoryManager.GetItemById(loadout.weaponSecondary);
            firearm.setAmmo(firearm.getAmmoMax() * char.modifiers["ammo"]);
            char.addInventoryItem(firearm);
            firearm = DinogenArena.InventoryManager.GetItemById(loadout.weaponPrimary);
            firearm.setAmmo(firearm.getAmmoMax() * char.modifiers["ammo"]);
            char.addInventoryItem(firearm);
            char.setDamageMultiplier(this.playerDamageMultiplier);
            var pc = DinogenArena.GameUtil.GetGameState().playerController;
            _gameModePlayer.setController(pc);
            DinogenArena.SoundManager.PlayUISound("ui_loadout_equip");
            return _gameModePlayer;
        };
        GameMode.prototype.showInstructions = function () {
            var pc = DinogenArena.GameUtil.GetGameState().playerController;
            var instructions = (this.info["instructions"] != undefined) ? this.info["instructions"] : this.info["teamInstructions"][this.getUserPlayer().getTeam()];
            pc.getHUD().addToNotifier({
                labelText: this.info["name"],
                descText: instructions,
                timer: 300,
                icon: "icon_" + this.info["id"]
            });
            DinogenArena.SoundManager.PlayUISound("ui_match_start");
            this.bPlayerHasSpawned = true;
        };
        GameMode.STATE_WAITING_TO_START = "STATE_WAITING_TO_START";
        GameMode.STATE_WAITING_PRE_MATCH = "STATE_WAITING_PRE_MATCH";
        GameMode.STATE_IN_PROGRESS = "STATE_IN_PROGRESS";
        GameMode.STATE_WAITING_POST_MATCH = "STATE_WAITING_POST_MATCH";
        GameMode.RESULT_WIN = "RESULT_WIN";
        GameMode.RESULT_LOSS = "RESULT_LOSS";
        GameMode.RESULT_DRAW = "RESULT_DRAW";
        GameMode.END_MATCH_CONDITION_SCORE = "END_MATCH_CONDITION_SCORE";
        GameMode.END_MATCH_CONDITION_TIME = "END_MATCH_CONDITION_TIME";
        GameMode.END_MATCH_CONDITION_EVOLUTION = "END_MATCH_CONDITION_EVOLUTION";
        GameMode.END_MATCH_CONDITION_HUNTER = "END_MATCH_CONDITION_HUNTER";
        GameMode.END_MATCH_CONDITION_REX_WINS = "END_MATCH_CONDITION_REX_WINS";
        GameMode.END_MATCH_CONDITION_REX_KILLED = "END_MATCH_CONDITION_REX_KILLED";
        GameMode.END_MATCH_CONDITION_SURVIVAL = "END_MATCH_CONDITION_SURVIVAL";
        GameMode.END_MATCH_CONDITION_COMPLETE = "END_MATCH_CONDITION_COMPLETE";
        GameMode.END_MATCH_CONDITION_DEAD = "END_MATCH_CONDITION_DEAD";
        return GameMode;
    }());
    DinogenArena.GameMode = GameMode;
    var CustomGameMode = /** @class */ (function (_super) {
        __extends(CustomGameMode, _super);
        function CustomGameMode(_id) {
            var _this = _super.call(this, _id) || this;
            var gameState = DinogenArena.GameUtil.GetGameState();
            _this.spawnPoints = gameState.mapData["spawnPoints"];
            _this.teamSpawnPoints = gameState.mapData["teamSpawnPoints"];
            return _this;
        }
        CustomGameMode.prototype.getSpawnPosition = function (_player) {
            return this.getBestSpawnPosition(_player);
        };
        CustomGameMode.prototype.getBestTeamSpawnPosition = function (_player) {
            var pos = new Phaser.Point();
            var obj = this.teamSpawnPoints[_player.getTeam()];
            if (obj) {
                pos.x = obj["x"] + DinogenArena.WilkinUtil.GenerateRandomNumber(0, obj["w"]);
                pos.y = obj["y"] + DinogenArena.WilkinUtil.GenerateRandomNumber(0, obj["h"]);
            }
            return pos;
        };
        CustomGameMode.prototype.getBestSpawnPosition = function (_player) {
            var pos = new Phaser.Point();
            var points = DinogenArena.GameUtil.GetGameState().mapData["spawnPoints"];
            var pawns = DinogenArena.GameUtil.GetGameState().pawns;
            var maxChecks = 100;
            var checks = 0;
            var ctf = this.getCTF();
            while (true) {
                var index = DinogenArena.WilkinUtil.GenerateRandomNumber(0, points.length - 1);
                pos.x = points[index][0];
                pos.y = points[index][1];
                var bSafeSpawn = true;
                for (var i = 0; i < pawns.length; i++) {
                    var pawn = pawns[i];
                    if (pawn.isAlive() && pawn.getTeam() != _player.getTeam()) {
                        var dist = DinogenArena.WilkinUtil.GetDistance(pawn.x, pawn.y, pos.x, pos.y);
                        if (dist < 1500 - (checks * 25)) {
                            bSafeSpawn = false;
                            break;
                        }
                    }
                }
                if (ctf) {
                    var enemyFlag = ctf.getOpposingFlag(_player.getTeam());
                    if (enemyFlag) {
                        var flagDist = DinogenArena.WilkinUtil.GetDistance(enemyFlag.x, enemyFlag.y, pos.x, pos.y);
                        if (flagDist < 1000) {
                            console.log("Too close to flag to spawn " + flagDist);
                            bSafeSpawn = false;
                        }
                    }
                }
                if (bSafeSpawn) {
                    break;
                }
                if (checks > maxChecks) {
                    console.log("Max checks, might be bad spawn");
                    break;
                }
                checks++;
            }
            return pos;
        };
        CustomGameMode.prototype.destroy = function () {
            this.spawnPoints = null;
            this.teamSpawnPoints = null;
            _super.prototype.destroy.call(this);
        };
        return CustomGameMode;
    }(GameMode));
    DinogenArena.CustomGameMode = CustomGameMode;
    var GameModePlayer = /** @class */ (function () {
        function GameModePlayer(_name, _team, _bIsUserPlayer) {
            this.name = "Unnamed";
            this.kills = 0;
            this.flagCaptures = 0;
            this.flagReturns = 0;
            this.hillPoints = 0;
            this.deaths = 0;
            this.currentKillStreak = 0;
            this.currentMultiKill = 0;
            this.botSkillLevel = 0;
            this.bIsUserPlayer = false;
            this.bWantsToRespawn = false;
            this.bDisposable = false;
            this.name = _name;
            this.team = _team;
            this.bIsUserPlayer = _bIsUserPlayer;
            if (this.bIsUserPlayer) {
                this.revengePlayers = [];
            }
        }
        GameModePlayer.prototype.tick = function () {
            if (this.bWantsToRespawn) {
                if (this.respawnTimer > 0) {
                    this.respawnTimer--;
                }
                else {
                    this.respawn();
                }
            }
        };
        GameModePlayer.prototype.setDisposable = function () {
            this.bDisposable = true;
        };
        GameModePlayer.prototype.isDisposable = function () {
            return this.bDisposable;
        };
        GameModePlayer.prototype.wantsRevengeFor = function (_gameModePlayer) {
            var index = this.revengePlayers.indexOf(_gameModePlayer);
            if (index >= 0) {
                return this.revengePlayers[index];
            }
            return null;
        };
        GameModePlayer.prototype.wantsToRespawn = function () {
            return this.bWantsToRespawn;
        };
        GameModePlayer.prototype.addRevengePlayer = function (_gameModePlayer) {
            if (_gameModePlayer == this) {
                return;
            }
            if (!this.wantsRevengeFor(_gameModePlayer)) {
                this.revengePlayers.push(_gameModePlayer);
            }
        };
        GameModePlayer.prototype.removeRevengePlayer = function (_gameModePlayer) {
            this.revengePlayers.splice(this.revengePlayers.indexOf(_gameModePlayer), 1);
        };
        GameModePlayer.prototype.isUserPlayer = function () {
            return this.bIsUserPlayer;
        };
        GameModePlayer.prototype.getCurrentKillStreak = function () {
            return this.currentKillStreak;
        };
        GameModePlayer.prototype.hasKillStreak = function () {
            return this.currentKillStreak >= 1;
        };
        GameModePlayer.prototype.getCurrentMultiKill = function () {
            return this.currentMultiKill;
        };
        GameModePlayer.prototype.resetCurrentMultiKill = function () {
            this.currentMultiKill = 0;
        };
        GameModePlayer.prototype.addKills = function (_val) {
            this.kills += _val;
            this.currentKillStreak += _val;
            this.currentMultiKill += _val;
        };
        GameModePlayer.prototype.getKills = function () {
            return this.kills;
        };
        GameModePlayer.prototype.addFlagCaptures = function (_val) {
            this.flagCaptures += _val;
        };
        GameModePlayer.prototype.getFlagCaptures = function () {
            return this.flagCaptures;
        };
        GameModePlayer.prototype.addFlagReturns = function (_val) {
            this.flagReturns += _val;
        };
        GameModePlayer.prototype.getFlagReturns = function () {
            return this.flagReturns;
        };
        GameModePlayer.prototype.getHillPoints = function () {
            return this.hillPoints;
        };
        GameModePlayer.prototype.addHillPoint = function (_val) {
            this.hillPoints += _val;
        };
        GameModePlayer.prototype.addDeaths = function (_val) {
            this.deaths += _val;
            //this.currentKillStreak = 0;
        };
        GameModePlayer.prototype.getDeaths = function () {
            return this.deaths;
        };
        GameModePlayer.prototype.isSpectator = function () {
            return this.team < 0;
        };
        GameModePlayer.prototype.setRespawnData = function (_data) {
            this.respawnData = _data;
        };
        GameModePlayer.prototype.setWantsToRespawn = function () {
            this.bWantsToRespawn = true;
            this.respawnTimer = this.respawnTimerMax;
        };
        GameModePlayer.prototype.getName = function () {
            return this.name;
        };
        GameModePlayer.prototype.getTeam = function () {
            return this.team;
        };
        GameModePlayer.prototype.setBotSkillLevel = function (_val) {
            this.botSkillLevel = _val;
        };
        GameModePlayer.prototype.getBotSkillLevel = function () {
            return this.botSkillLevel;
        };
        GameModePlayer.prototype.setRespawnTimerMax = function (_val) {
            this.respawnTimerMax = Math.max(1, _val);
        };
        GameModePlayer.prototype.setController = function (_controller) {
            this.controller = _controller;
            if (this.controller) {
                this.controller.setGameModePlayer(this);
            }
        };
        GameModePlayer.prototype.getController = function () {
            return this.controller;
        };
        GameModePlayer.prototype.respawn = function () {
            this.currentKillStreak = 0;
            var gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
            if (gameMode.matchHasEnded()) {
                return;
            }
            if (this.bIsUserPlayer) {
                var data;
                var arr;
                if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_TEAM_DEATHMATCH) {
                    data = {};
                    data["classes"] = DinogenArena.PlayerManager.CurrentProfile.loadouts; //InventoryManager.GetDefaultLoadouts();
                    data["type"] = "character";
                    gameMode.createSpawnMenu(data);
                }
                else if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_DEATHMATCH) {
                    data = {};
                    data["classes"] = DinogenArena.PlayerManager.CurrentProfile.loadouts;
                    data["type"] = "character";
                    gameMode.createSpawnMenu(data);
                }
                else if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_CAPTURE_THE_FLAG) {
                    data = {};
                    data["classes"] = DinogenArena.PlayerManager.CurrentProfile.loadouts;
                    data["type"] = "character";
                    gameMode.createSpawnMenu(data);
                }
                else if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_HUMANS_VS_DINOSAURS) {
                    data = {};
                    if (this.team == 0) {
                        data["classes"] = DinogenArena.PlayerManager.CurrentProfile.loadouts;
                        data["type"] = "character";
                        gameMode.createSpawnMenu(data);
                    }
                    else if (this.team == 1) {
                        arr = [];
                        arr.push({ type: "dinosaur", id: DinogenArena.Dinosaur.TYPE_COMPY });
                        arr.push({ type: "dinosaur", id: DinogenArena.Dinosaur.TYPE_DILO });
                        arr.push({ type: "dinosaur", id: DinogenArena.Dinosaur.TYPE_RAPTOR });
                        arr.push({ type: "dinosaur", id: DinogenArena.Dinosaur.TYPE_NEEDLER, unlockSeconds: 30 }); //unlockSeconds: 0
                        arr.push({ type: "dinosaur", id: DinogenArena.Dinosaur.TYPE_ALLOSAURUS, unlockSeconds: 60 });
                        arr.push({ type: "dinosaur", id: DinogenArena.Dinosaur.TYPE_SPINOSAURUS, unlockSeconds: 90 });
                        data["classes"] = arr;
                        data["type"] = "dinosaur";
                        gameMode.createSpawnMenu(data);
                    }
                }
                else if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_DINO_HUNT) {
                    if (this.team == 0) {
                        data = {};
                        data["classes"] = DinogenArena.PlayerManager.CurrentProfile.loadouts;
                        data["type"] = "character";
                        gameMode.createSpawnMenu(data);
                    }
                    else {
                        gameMode.spawnPawn(this);
                    }
                }
                else if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_EVOLUTION) {
                    if (this.team == 0) {
                        data = {};
                        data["classes"] = DinogenArena.PlayerManager.CurrentProfile.loadouts;
                        data["type"] = "character";
                        gameMode.createSpawnMenu(data);
                    }
                    else {
                        gameMode.spawnPawn(this);
                    }
                }
                else if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_KING_OF_THE_HILL) {
                    data = {};
                    data["classes"] = DinogenArena.PlayerManager.CurrentProfile.loadouts;
                    data["type"] = "character";
                    gameMode.createSpawnMenu(data);
                }
                else if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_REX) {
                    if (this.team == 0) {
                        data = {};
                        data["classes"] = DinogenArena.PlayerManager.CurrentProfile.loadouts;
                        data["type"] = "character";
                        gameMode.createSpawnMenu(data);
                    }
                    else {
                        gameMode.spawnPawn(this);
                    }
                }
                else if (gameMode.getId() == DinogenArena.GameModeManager.GAME_MODE_SURVIVAL) {
                    gameMode.spawnPawn(this);
                }
                else {
                    gameMode.spawnPawn(this, this.respawnData);
                }
            }
            else {
                /* AI pawns */
                var pawn = gameMode.spawnPawn(this, this.respawnData);
                if (pawn) {
                    pawn.getAIController().setSkillLevel(this.botSkillLevel);
                }
                else {
                    alert("Invalid AI pawn");
                }
            }
            this.bWantsToRespawn = false;
        };
        GameModePlayer.prototype.pawnIsAlive = function () {
            if (this.controller) {
                if (this.controller.getPawn()) {
                    return this.controller.getPawn().isAlive();
                }
            }
            return false;
        };
        GameModePlayer.prototype.canRespawn = function () {
            return this.bWantsToRespawn && this.respawnTimer == 0;
        };
        GameModePlayer.prototype.getRespawnTimer = function () {
            return this.respawnTimer;
        };
        GameModePlayer.prototype.destroy = function () {
            this.controller = null;
            this.revengePlayers = null;
            this.respawnData = null;
        };
        return GameModePlayer;
    }());
    DinogenArena.GameModePlayer = GameModePlayer;
    var GameMode_TeamDeathmatch = /** @class */ (function (_super) {
        __extends(GameMode_TeamDeathmatch, _super);
        function GameMode_TeamDeathmatch(_id) {
            if (_id === void 0) { _id = DinogenArena.GameModeManager.GAME_MODE_TEAM_DEATHMATCH; }
            var _this = _super.call(this, _id) || this;
            _this.setNumTeams(2);
            _this.teams = [{ team: 0, race: "human" }, { team: 1, race: "human" }];
            _this.bTeamGame = true;
            return _this;
        }
        GameMode_TeamDeathmatch.prototype.sortPlayers = function () {
            this.gamePlayers.sort(this.comparePlayers);
        };
        GameMode_TeamDeathmatch.prototype.setFromData = function (_data) {
            _super.prototype.setFromData.call(this, _data);
            this.playersPerTeam = _data["players"];
            this.scoreLimit = _data["scoreLimit"];
        };
        GameMode_TeamDeathmatch.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            var data = {};
            if (this.teams) {
                data["teams"] = this.teams;
            }
            else {
                var teams = [];
                for (var i = 0; i < this.scores.length; i++) {
                    teams.push({ team: i, race: "human" });
                }
                data["teams"] = teams;
            }
            this.createTeamSelectMenu(data);
            this.createBots();
        };
        GameMode_TeamDeathmatch.prototype.getMatchResult = function () {
            if (this.getWinningTeam() < 0) {
                this.result = GameMode.RESULT_DRAW;
            }
            else if (this.getWinningTeam() == this.getUserPlayer().getTeam()) {
                this.result = GameMode.RESULT_WIN;
            }
            else {
                this.result = GameMode.RESULT_LOSS;
            }
        };
        GameMode_TeamDeathmatch.prototype.createBots = function () {
            for (var i = 0; i < this.getNumTeams(); i++) {
                for (var j = 0; j < this.playersPerTeam; j++) {
                    var player = this.addPlayer(DinogenArena.GameModeManager.GetBotName(this.teams[i]["race"]), i, false);
                    player.respawn();
                }
            }
        };
        GameMode_TeamDeathmatch.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            if (this.getNumPlayersForTeam(_team) >= this.playersPerTeam) {
                this.removeBotFromTeam(_team);
            }
            return _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
        };
        GameMode_TeamDeathmatch.prototype.setNumTeams = function (_val) {
            this.scores = [];
            for (var i = 0; i < _val; i++) {
                this.scores.push(0);
            }
        };
        GameMode_TeamDeathmatch.prototype.getWinningTeam = function () {
            var score0 = this.getScoreForTeam(0);
            var score1 = this.getScoreForTeam(1);
            if (score0 > score1) {
                return 0;
            }
            else if (score1 > score0) {
                return 1;
            }
            return -1;
        };
        GameMode_TeamDeathmatch.prototype.getScoreForTeam = function (_index) {
            return this.scores[_index];
        };
        GameMode_TeamDeathmatch.prototype.addScoreForTeam = function (_index) {
            if (!this.matchIsInProgress()) {
                return;
            }
            this.scores[_index] += 1;
            if (this.scores[_index] >= this.scoreLimit) {
                this.endMatch(GameMode.END_MATCH_CONDITION_SCORE);
            }
        };
        GameMode_TeamDeathmatch.prototype.getNumTeams = function () {
            return this.scores.length;
        };
        GameMode_TeamDeathmatch.prototype.getScoreLimit = function () {
            return this.scoreLimit;
        };
        GameMode_TeamDeathmatch.prototype.getPlayersPerTeam = function () {
            return this.playersPerTeam;
        };
        GameMode_TeamDeathmatch.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            _super.prototype.spawnPawn.call(this, _gameModePlayer, _data);
            var char;
            var pos = this.getSpawnPosition(_gameModePlayer);
            if (_gameModePlayer.isUserPlayer()) {
                var loadout = _data;
                this.spawnCharacterFromLoadout(_gameModePlayer, pos.x, pos.y, loadout);
            }
            else {
                char = DinogenArena.GameUtil.GetGameState().createAICharacter(_gameModePlayer.getName(), pos.x, pos.y);
                char.setTeam(_gameModePlayer.getTeam());
                char.addInventoryItem(DinogenArena.InventoryManager.GetRandomItem());
                _gameModePlayer.setController(char.getController());
                if (DinogenArena.GameUtil.GetGameState().getPlayerTeam() == _gameModePlayer.getTeam()) {
                    if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 10) == 1) {
                        var player = DinogenArena.GameUtil.GetGameState().player;
                        if (player) {
                            char.getAIController().setFollowTarget(player);
                        }
                    }
                }
            }
            return char;
        };
        GameMode_TeamDeathmatch.prototype.getSpawnPosition = function (_player) {
            var pos = new Phaser.Point(0, 0);
            var points;
            var index = 0;
            if (!this.matchHasStarted() || this.getSecondsSinceMatchStart() < 15) {
                pos = this.getBestTeamSpawnPosition(_player);
            }
            else {
                pos = this.getBestSpawnPosition(_player);
            }
            return pos;
        };
        GameMode_TeamDeathmatch.prototype.onPawnKill = function (_pawn) {
            _super.prototype.onPawnKill.call(this, _pawn);
            this.addScoreForTeam(_pawn.getTeam());
        };
        GameMode_TeamDeathmatch.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            _pawn.getController().getGameModePlayer().setWantsToRespawn();
        };
        return GameMode_TeamDeathmatch;
    }(CustomGameMode));
    DinogenArena.GameMode_TeamDeathmatch = GameMode_TeamDeathmatch;
    var GameMode_Deathmatch = /** @class */ (function (_super) {
        __extends(GameMode_Deathmatch, _super);
        function GameMode_Deathmatch() {
            return _super.call(this, DinogenArena.GameModeManager.GAME_MODE_DEATHMATCH) || this;
        }
        GameMode_Deathmatch.prototype.setFromData = function (_data) {
            _super.prototype.setFromData.call(this, _data);
            this.players = _data["players"];
            this.scoreLimit = _data["scoreLimit"];
        };
        GameMode_Deathmatch.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            var player = this.addPlayer(DinogenArena.PlayerManager.CurrentProfile.name, 0, true);
            player.respawn();
            this.createBots();
        };
        GameMode_Deathmatch.prototype.getMatchResult = function () {
            /* TODO: Check for draw */
            if (this.getPlaceForPlayer(this.getUserPlayer()) == 1) {
                this.result = GameMode.RESULT_WIN;
            }
            else {
                this.result = GameMode.RESULT_LOSS;
            }
        };
        GameMode_Deathmatch.prototype.getScoreLimit = function () {
            return this.scoreLimit;
        };
        GameMode_Deathmatch.prototype.createBots = function () {
            for (var i = 0; i < (this.players - 1); i++) {
                var player = this.addPlayer(DinogenArena.GameModeManager.GetBotName(), i + 1, false);
                player.respawn();
            }
        };
        GameMode_Deathmatch.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            if (this.gamePlayers.length >= this.players) {
                this.removeBot();
            }
            return _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
        };
        GameMode_Deathmatch.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            _super.prototype.spawnPawn.call(this, _gameModePlayer, _data);
            var char;
            var pos = this.getSpawnPosition(_gameModePlayer);
            if (_gameModePlayer.isUserPlayer()) {
                var loadout = _data;
                this.spawnCharacterFromLoadout(_gameModePlayer, pos.x, pos.y, loadout);
            }
            else {
                char = DinogenArena.GameUtil.GetGameState().createAICharacter(_gameModePlayer.getName(), pos.x, pos.y);
                char.setTeam(_gameModePlayer.getTeam());
                char.addInventoryItem(DinogenArena.InventoryManager.GetRandomItem());
                _gameModePlayer.setController(char.getController());
            }
            return char;
        };
        GameMode_Deathmatch.prototype.onPawnKill = function (_pawn) {
            _super.prototype.onPawnKill.call(this, _pawn);
            this.sortPlayers();
            if (!_pawn) {
                return;
            }
            if (_pawn.getController().getGameModePlayer().getKills() >= this.scoreLimit) {
                this.endMatch(GameMode.END_MATCH_CONDITION_SCORE);
            }
        };
        GameMode_Deathmatch.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            _pawn.getController().getGameModePlayer().setWantsToRespawn();
        };
        GameMode_Deathmatch.prototype.spawnRandomItem = function () {
            var offsetX = DinogenArena.WilkinUtil.GenerateRandomNumber(-DinogenArena.GameUtil.game.world.width * 0.2, DinogenArena.GameUtil.game.world.width * 0.2);
            var offsetY = DinogenArena.WilkinUtil.GenerateRandomNumber(-DinogenArena.GameUtil.game.world.height * 0.2, DinogenArena.GameUtil.game.world.height * 0.2);
            DinogenArena.GameUtil.GetGameState().createDroppedItem(null, (DinogenArena.GameUtil.game.world.width * 0.5) + offsetX, (DinogenArena.GameUtil.game.world.height * 0.5) + offsetY, 0, DinogenArena.InventoryManager.GetRandomItem());
        };
        return GameMode_Deathmatch;
    }(CustomGameMode));
    DinogenArena.GameMode_Deathmatch = GameMode_Deathmatch;
    var GameMode_HumansVsDinosaurs = /** @class */ (function (_super) {
        __extends(GameMode_HumansVsDinosaurs, _super);
        function GameMode_HumansVsDinosaurs() {
            var _this = _super.call(this, DinogenArena.GameModeManager.GAME_MODE_HUMANS_VS_DINOSAURS) || this;
            _this.teams = [{ team: 0, race: "human" }, { team: 1, race: "dinosaur" }];
            return _this;
        }
        GameMode_HumansVsDinosaurs.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            var pawn;
            var char;
            var dino;
            var team = _gameModePlayer.getTeam();
            var pos = this.getSpawnPosition(_gameModePlayer);
            if (_gameModePlayer.isUserPlayer()) {
                if (team == 0) {
                    var loadout = _data;
                    this.spawnCharacterFromLoadout(_gameModePlayer, pos.x, pos.y, loadout);
                    pawn = _gameModePlayer.getController().getPawn();
                }
                else if (team == 1) {
                    dino = DinogenArena.GameUtil.GetGameState().createPlayerDinosaur(pos.x, pos.y, _data["id"]);
                    dino.setTeam(_gameModePlayer.getTeam());
                    var pc = DinogenArena.GameUtil.GetGameState().playerController;
                    _gameModePlayer.setController(pc);
                    pawn = dino;
                }
                if (!dino || _data["id"] == DinogenArena.Dinosaur.TYPE_COMPY) {
                    pawn.setDamageMultiplier(this.playerDamageMultiplier);
                }
            }
            else {
                if (team == 0) {
                    char = DinogenArena.GameUtil.GetGameState().createAICharacter(_gameModePlayer.getName(), pos.x, pos.y);
                    char.setTeam(_gameModePlayer.getTeam());
                    char.addInventoryItem(DinogenArena.InventoryManager.GetRandomItem());
                    _gameModePlayer.setController(char.getController());
                    pawn = char;
                }
                else if (team == 1) {
                    var dinos = [
                        DinogenArena.Dinosaur.TYPE_COMPY,
                        DinogenArena.Dinosaur.TYPE_DILO,
                        DinogenArena.Dinosaur.TYPE_RAPTOR
                    ];
                    var secondsSinceStart = this.getSecondsSinceMatchStart();
                    if (secondsSinceStart >= 15) {
                        dinos.push(DinogenArena.Dinosaur.TYPE_NEEDLER);
                    }
                    if (secondsSinceStart >= 30) {
                        dinos.push(DinogenArena.Dinosaur.TYPE_ALLOSAURUS);
                    }
                    if (secondsSinceStart >= 60) {
                        dinos.push(DinogenArena.Dinosaur.TYPE_SPINOSAURUS);
                    }
                    var dinoType = dinos[DinogenArena.WilkinUtil.GenerateRandomNumber(0, dinos.length - 1)];
                    dino = DinogenArena.GameUtil.GetGameState().createAIDinosaur(_gameModePlayer.getName(), pos.x, pos.y, dinoType);
                    dino.setTeam(_gameModePlayer.getTeam());
                    _gameModePlayer.setController(dino.getController());
                    pawn = dino;
                }
            }
            if (_gameModePlayer.isUserPlayer()) {
                this.onUserPlayerSpawned();
            }
            return pawn;
        };
        return GameMode_HumansVsDinosaurs;
    }(GameMode_TeamDeathmatch));
    DinogenArena.GameMode_HumansVsDinosaurs = GameMode_HumansVsDinosaurs;
    var GameMode_DinoHunt = /** @class */ (function (_super) {
        __extends(GameMode_DinoHunt, _super);
        function GameMode_DinoHunt() {
            var _this = _super.call(this, DinogenArena.GameModeManager.GAME_MODE_DINO_HUNT) || this;
            _this.hunterKills = 0;
            _this.hunterKillsMax = 10;
            _this.bSetPawnTeamColour = false;
            return _this;
            //this.bTeamGame = true;
        }
        GameMode_DinoHunt.prototype.setFromData = function (_data) {
            _super.prototype.setFromData.call(this, _data);
            this.dinoPlayers = _data["players"];
            this.hunterKillsMax = _data["scoreLimit"];
        };
        GameMode_DinoHunt.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            var data = {};
            var teams = [];
            teams.push({ team: 0, race: "human" });
            teams.push({ team: 1, race: "dinosaur" });
            data["teams"] = teams;
            this.createTeamSelectMenu(data);
        };
        GameMode_DinoHunt.prototype.getMatchResult = function () {
            if (this.getWinningTeam() == this.getUserPlayer().getTeam()) {
                this.result = GameMode.RESULT_WIN;
            }
            else {
                this.result = GameMode.RESULT_LOSS;
            }
        };
        GameMode_DinoHunt.prototype.createBots = function () {
            var cur = this.getNumPlayersForTeam(1);
            if (this.getNumPlayersForTeam(0) == 0) {
                player = this.addPlayer(DinogenArena.GameModeManager.GetBotName("human"), 0, false);
                player.respawn();
            }
            for (var i = 0; i < (this.dinoPlayers - cur); i++) {
                var player = this.addPlayer(DinogenArena.GameModeManager.GetBotName("dinosaur"), 1, false);
                player.respawn();
            }
        };
        GameMode_DinoHunt.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            if (_team == 0) {
                if (this.getNumPlayersForTeam(_team) >= 1) {
                    this.removeBotFromTeam(0);
                }
            }
            else if (_team == 1) {
                if (this.getNumPlayersForTeam(_team) >= this.dinoPlayers) {
                    this.removeBotFromTeam(1);
                }
            }
            return _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
        };
        GameMode_DinoHunt.prototype.onUserPlayerJoined = function () {
            _super.prototype.onUserPlayerJoined.call(this);
            this.createBots();
        };
        GameMode_DinoHunt.prototype.getWinningTeam = function () {
            if (this.hunterKills >= this.getHunterKillsMax()) {
                return 0;
            }
            return 1;
        };
        GameMode_DinoHunt.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            _pawn.getController().getGameModePlayer().setWantsToRespawn();
        };
        GameMode_DinoHunt.prototype.getSpawnPosition = function (_player) {
            var pos = new Phaser.Point(0, 0);
            var points;
            var index = 0;
            if (!this.matchHasStarted() || this.getSecondsSinceMatchStart() < 15) {
                pos = this.getBestTeamSpawnPosition(_player);
            }
            else {
                pos = this.getBestSpawnPosition(_player);
            }
            return pos;
        };
        GameMode_DinoHunt.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            _super.prototype.spawnPawn.call(this, _gameModePlayer, _data);
            var pawn;
            var dino;
            var char;
            var team = _gameModePlayer.getTeam();
            var pos = this.getSpawnPosition(_gameModePlayer);
            if (_gameModePlayer.isUserPlayer()) {
                if (team == 0) {
                    var loadout = _data;
                    this.spawnCharacterFromLoadout(_gameModePlayer, pos.x, pos.y, loadout);
                    char = _gameModePlayer.getController().getPawn();
                    pawn = char;
                }
                else if (team == 1) {
                    dino = DinogenArena.GameUtil.GetGameState().createPlayerDinosaur(pos.x, pos.y, DinogenArena.Dinosaur.TYPE_RAPTOR);
                    dino.setTeam(_gameModePlayer.getTeam());
                    var pc = DinogenArena.GameUtil.GetGameState().playerController;
                    _gameModePlayer.setController(pc);
                    pawn = dino;
                }
                pawn.setDamageMultiplier(this.playerDamageMultiplier);
            }
            else {
                if (team == 0) {
                    char = DinogenArena.GameUtil.GetGameState().createAICharacter(_gameModePlayer.getName(), pos.x, pos.y);
                    char.setTeam(_gameModePlayer.getTeam());
                    char.addInventoryItemById(DinogenArena.InventoryManager.ITEM_FIREARM_USP45);
                    char.addInventoryItem(DinogenArena.InventoryManager.GetHunterItem());
                    _gameModePlayer.setController(char.getController());
                    pawn = char;
                    pawn.modifiers["move_speed"] = 2;
                    pawn.modifiers["damage_inflict_bullet"] = 2.75;
                    pawn.modifiers["reload_speed"] = 2;
                }
                else if (team == 1) {
                    dino = DinogenArena.GameUtil.GetGameState().createAIDinosaur(_gameModePlayer.getName(), pos.x, pos.y, DinogenArena.Dinosaur.TYPE_RAPTOR);
                    dino.setTeam(_gameModePlayer.getTeam());
                    _gameModePlayer.setController(dino.getController());
                    dino.modifiers["damage_inflict_dino"] = 2;
                    dino.setDamageMultiplier(1.5 - (1 * this.getHunterKillsPercent()));
                    //dino.setRegenHealth(false);
                    pawn = dino;
                }
            }
            if (dino) {
                dino.modifiers["move_speed"] = Math.min(2, 0.75 + (this.getHunterKillsPercent() * 0.5));
            }
            return pawn;
        };
        GameMode_DinoHunt.prototype.getHunterKillsPercent = function () {
            return this.hunterKills / this.getHunterKillsMax();
        };
        GameMode_DinoHunt.prototype.onPawnKill = function (_pawn) {
            _super.prototype.onPawnKill.call(this, _pawn);
            if (_pawn.getTeam() == 0) {
                this.hunterKills++;
                if (this.hunterKills >= this.getHunterKillsMax()) {
                    this.endMatch(GameMode.END_MATCH_CONDITION_HUNTER);
                }
            }
        };
        GameMode_DinoHunt.prototype.getHunterKills = function () {
            return this.hunterKills;
        };
        GameMode_DinoHunt.prototype.getHunterKillsMax = function () {
            return this.hunterKillsMax;
        };
        return GameMode_DinoHunt;
    }(CustomGameMode));
    DinogenArena.GameMode_DinoHunt = GameMode_DinoHunt;
    var GameMode_Evolution = /** @class */ (function (_super) {
        __extends(GameMode_Evolution, _super);
        function GameMode_Evolution() {
            var _this = _super.call(this, DinogenArena.GameModeManager.GAME_MODE_EVOLUTION) || this;
            _this.dinoKills = 0;
            _this.currentDinoTier = 1;
            _this.dinoDamageMultiplier = 0.5;
            _this.bSetPawnTeamColour = false;
            _this.bTeamGame = true;
            return _this;
        }
        GameMode_Evolution.prototype.setFromData = function (_data) {
            _super.prototype.setFromData.call(this, _data);
            this.humanPlayers = _data["players"];
        };
        GameMode_Evolution.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            var data = {};
            var teams = [];
            teams.push({ team: 0, race: "human" });
            teams.push({ team: 1, race: "dinosaur" });
            data["teams"] = teams;
            this.createTeamSelectMenu(data);
        };
        GameMode_Evolution.prototype.getMatchResult = function () {
            if (this.getWinningTeam() == this.getUserPlayer().getTeam()) {
                this.result = GameMode.RESULT_WIN;
            }
            else {
                this.result = GameMode.RESULT_LOSS;
            }
        };
        GameMode_Evolution.prototype.createBots = function () {
            var cur = this.getNumPlayersForTeam(0);
            for (var i = 0; i < (this.humanPlayers - cur); i++) {
                var player = this.addPlayer(DinogenArena.GameModeManager.GetBotName("human"), 0, false);
                player.respawn();
            }
            if (this.getNumPlayersForTeam(1) == 0) {
                player = this.addPlayer(DinogenArena.GameModeManager.GetBotName("dinosaur"), 1, false);
                player.respawn();
            }
        };
        GameMode_Evolution.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            if (_team == 0) {
                if (this.getNumPlayersForTeam(_team) >= this.humanPlayers) {
                    this.removeBotFromTeam(0);
                }
            }
            else if (_team == 1) {
                if (this.getNumPlayersForTeam(_team) >= 1) {
                    this.removeBotFromTeam(1);
                }
            }
            return _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
        };
        GameMode_Evolution.prototype.onUserPlayerJoined = function () {
            _super.prototype.onUserPlayerJoined.call(this);
            this.createBots();
        };
        GameMode_Evolution.prototype.getSpawnPosition = function (_player) {
            var pos = new Phaser.Point(0, 0);
            var points;
            var index = 0;
            if (!this.matchHasStarted() || this.getSecondsSinceMatchStart() < 15) {
                pos = this.getBestTeamSpawnPosition(_player);
            }
            else {
                if (_player.getTeam() == 0 || !this.lastDinoPosition) {
                    pos = this.getBestSpawnPosition(_player);
                }
                else if (_player.getTeam() == 1) {
                    pos = this.lastDinoPosition.clone();
                }
            }
            return pos;
        };
        GameMode_Evolution.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            _super.prototype.spawnPawn.call(this, _gameModePlayer, _data);
            var pawn;
            var dino;
            var char;
            var team = _gameModePlayer.getTeam();
            var pos = this.getSpawnPosition(_gameModePlayer);
            if (_gameModePlayer.isUserPlayer()) {
                if (team == 0) {
                    var loadout = _data;
                    this.spawnCharacterFromLoadout(_gameModePlayer, pos.x, pos.y, loadout);
                    char = _gameModePlayer.getController().getPawn();
                    pawn = char;
                }
                else if (team == 1) {
                    dino = DinogenArena.GameUtil.GetGameState().createPlayerDinosaur(pos.x, pos.y, this.getCurrentDinoType());
                    dino.setTeam(_gameModePlayer.getTeam());
                    var pc = DinogenArena.GameUtil.GetGameState().playerController;
                    _gameModePlayer.setController(pc);
                    pawn = dino;
                }
                pawn.setDamageMultiplier(this.playerDamageMultiplier);
            }
            else {
                if (team == 0) {
                    char = DinogenArena.GameUtil.GetGameState().createAICharacter(_gameModePlayer.getName(), pos.x, pos.y);
                    char.setTeam(_gameModePlayer.getTeam());
                    char.addInventoryItem(DinogenArena.InventoryManager.GetRandomItem());
                    char.setUnlimitedAmmo(true);
                    char.modifiers["reload_speed"] = 1.5;
                    _gameModePlayer.setController(char.getController());
                    pawn = char;
                }
                else if (team == 1) {
                    dino = DinogenArena.GameUtil.GetGameState().createAIDinosaur(_gameModePlayer.getName(), pos.x, pos.y, this.getCurrentDinoType());
                    dino.setTeam(_gameModePlayer.getTeam());
                    _gameModePlayer.setController(dino.getController());
                    pawn = dino;
                    pawn.setDamageMultiplier(0.5);
                    pawn.modifiers["move_speed"] = 1 + (0.1 * this.humanPlayers);
                    pawn.modifiers["damage_inflict_dino"] = 4;
                }
            }
            if (dino) {
                //this.dinoDamageMultiplier = Math.min(1, 0.25 + (this.currentDinoTier * 0.35));
                //pawn.setDamageMultiplier(pawn.getDamageMultiplier() * this.dinoDamageMultiplier);
            }
            return pawn;
        };
        GameMode_Evolution.prototype.onPawnKill = function (_pawn) {
            _super.prototype.onPawnKill.call(this, _pawn);
            if (_pawn.getTeam() == 1) {
                this.dinoKills++;
                if (this.dinoKills >= GameMode_Evolution.DINO_KILLS_MAX) {
                    this.dinoKills = 0;
                    this.currentDinoTier++;
                    var bGameOver = this.currentDinoTier > GameMode_Evolution.DINO_TIER_MAX;
                    if (_pawn.isPlayer()) {
                        var hud = DinogenArena.GameUtil.GetGameState().playerController.getHUD();
                        var xp = 100;
                        hud.addToNotifier({
                            labelText: "Evolved!",
                            xpText: "+" + xp + "XP",
                            descText: "One step closer to maximum evolution",
                            sound: "ui_evolve",
                            icon: "icon_evo_evolved"
                        });
                        hud.addToXP(xp);
                    }
                    if (!bGameOver) {
                        var dinoPlayer = this.getDinoPlayer();
                        var oldPawn = dinoPlayer.getController().getPawn();
                        if (!this.lastDinoPosition) {
                            this.lastDinoPosition = new Phaser.Point();
                        }
                        this.lastDinoPosition.set(oldPawn.x, oldPawn.y);
                        dinoPlayer.respawn();
                        var newPawn = dinoPlayer.getController().getPawn();
                        oldPawn.triggerDestroy();
                    }
                }
                if (this.currentDinoTier > GameMode_Evolution.DINO_TIER_MAX) {
                    this.endMatch(GameMode.END_MATCH_CONDITION_EVOLUTION);
                }
            }
            else {
                this.lastDinoPosition = null;
            }
        };
        GameMode_Evolution.prototype.getDinoPlayer = function () {
            for (var i = 0; i < this.gamePlayers.length; i++) {
                if (this.gamePlayers[i].getTeam() == 1) {
                    return this.gamePlayers[i];
                }
            }
            return null;
        };
        GameMode_Evolution.prototype.getDinoKills = function () {
            return this.dinoKills;
        };
        GameMode_Evolution.prototype.getCurrentDinoTier = function () {
            return this.currentDinoTier;
        };
        GameMode_Evolution.prototype.getCurrentDinoType = function () {
            if (this.currentDinoTier == 1) {
                return DinogenArena.Dinosaur.TYPE_COMPY;
            }
            else if (this.currentDinoTier == 2) {
                return DinogenArena.Dinosaur.TYPE_DILO;
            }
            else if (this.currentDinoTier == 3) {
                return DinogenArena.Dinosaur.TYPE_RAPTOR;
            }
            else if (this.currentDinoTier == 4) {
                return DinogenArena.Dinosaur.TYPE_NEEDLER;
            }
            else if (this.currentDinoTier == 5) {
                return DinogenArena.Dinosaur.TYPE_ALLOSAURUS;
            }
            else if (this.currentDinoTier >= 6) {
                return DinogenArena.Dinosaur.TYPE_SPINOSAURUS;
            }
            return DinogenArena.Dinosaur.TYPE_COMPY;
        };
        GameMode_Evolution.prototype.getWinningTeam = function () {
            if (this.currentDinoTier >= GameMode_Evolution.DINO_TIER_MAX) {
                return 1;
            }
            return 0;
        };
        GameMode_Evolution.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            _pawn.getController().getGameModePlayer().setWantsToRespawn();
        };
        GameMode_Evolution.DINO_KILLS_MAX = 5;
        GameMode_Evolution.DINO_TIER_MAX = 6;
        return GameMode_Evolution;
    }(CustomGameMode));
    DinogenArena.GameMode_Evolution = GameMode_Evolution;
    var GameMode_Survival = /** @class */ (function (_super) {
        __extends(GameMode_Survival, _super);
        function GameMode_Survival() {
            var _this = _super.call(this, DinogenArena.GameModeManager.GAME_MODE_SURVIVAL) || this;
            _this.currentWave = 0;
            _this.currentWaveEnemiesTotal = 0;
            _this.currentWaveEnemiesRemaining = 0;
            _this.intermissionTimer = 0;
            _this.survivalMoney = 0;
            _this.totalMoney = 0;
            _this.playerKills = 0;
            _this.bIntermission = false;
            _this.playerDamageMultiplier = 0.35;
            _this.bIsTimeLimited = false;
            _this.bUseKillFeed = false;
            _this.bUseSpawnProtection = false;
            _this.bSetPawnTeamColour = false;
            _this.bFriendlyFire = false;
            _this.currentWave = 0;
            _this.survivalMoney = 0;
            return _this;
        }
        GameMode_Survival.prototype.destroy = function () {
            if (this.survivalMenu) {
                this.survivalMenu.destroy();
                this.survivalMenu = null;
            }
            _super.prototype.destroy.call(this);
        };
        GameMode_Survival.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.matchIsInProgress()) {
                if (this.bIntermission) {
                    if (this.intermissionTimer > 0) {
                        this.intermissionTimer--;
                    }
                    else {
                        this.startNextWave();
                    }
                }
            }
        };
        GameMode_Survival.prototype.getMatchResult = function () {
            this.result = GameMode.RESULT_LOSS;
        };
        GameMode_Survival.prototype.getPlayerKills = function () {
            return this.playerKills;
        };
        GameMode_Survival.prototype.addPlayerKill = function () {
            this.playerKills++;
        };
        GameMode_Survival.prototype.useSurvivalMoney = function (_val) {
            this.survivalMoney = Math.max(this.survivalMoney - _val, 0);
            DinogenArena.SoundManager.PlayUISound("ui_purchase");
        };
        GameMode_Survival.prototype.getSurvivalMoney = function () {
            return this.survivalMoney;
        };
        GameMode_Survival.prototype.getTotalMoney = function () {
            return this.totalMoney;
        };
        GameMode_Survival.prototype.addSurvivalMoney = function (_val) {
            this.totalMoney += _val;
            this.survivalMoney += _val;
            var hud = DinogenArena.GameUtil.GetGameState().playerController.getHUD();
            hud.addToMoney(_val);
        };
        GameMode_Survival.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            var player = this.addPlayer(DinogenArena.PlayerManager.CurrentProfile.name, 0, true);
            player.respawn();
        };
        GameMode_Survival.prototype.handleMatchHasStarted = function () {
            _super.prototype.handleMatchHasStarted.call(this);
            var crate = DinogenArena.GameUtil.GetGameState().createCrate("crate_armory", DinogenArena.GameUtil.game.world.width * 0.5, DinogenArena.GameUtil.game.world.height * 0.5, 0, DinogenArena.Crate.TYPE_SURVIVAL_CRATE);
            //GameUtil.GetGameState().createDroppedItem(null, crate.x, crate.y + 100, 0, InventoryManager.GetRandomItem());
            var turretPadding = 400;
            var turret = this.addAutoTurretBase(crate.x - turretPadding, crate.y + turretPadding);
            var turret = this.addAutoTurretBase(crate.x - turretPadding, crate.y - turretPadding);
            var turret = this.addAutoTurretBase(crate.x + turretPadding, crate.y + turretPadding);
            var turret = this.addAutoTurretBase(crate.x + turretPadding, crate.y - turretPadding);
            this.completeWave();
        };
        GameMode_Survival.prototype.onUserPlayerJoined = function () {
            _super.prototype.onUserPlayerJoined.call(this);
            this.startMatch();
        };
        GameMode_Survival.prototype.handleMatchHasEnded = function () {
            _super.prototype.handleMatchHasEnded.call(this);
        };
        GameMode_Survival.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            var player = _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
            if (player.getTeam() == 0) {
                player.setRespawnTimerMax(1);
                player.setWantsToRespawn();
            }
            if (!_bUserPlayer) {
                if (_data) {
                    if (_data["aiSkillLevel"] != undefined) {
                        player.setBotSkillLevel(_data["aiSkillLevel"]);
                    }
                }
            }
            return player;
        };
        GameMode_Survival.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            _super.prototype.spawnPawn.call(this, _gameModePlayer, _data);
            var pawn;
            if (_gameModePlayer.isUserPlayer()) {
                var pos = this.getSpawnPosition(_gameModePlayer);
                var char = DinogenArena.GameUtil.GetGameState().createPlayerCharacter(pos.x, pos.y);
                char.setTeam(_gameModePlayer.getTeam());
                var wpn1 = DinogenArena.InventoryManager.GetItemById(DinogenArena.InventoryManager.ITEM_FIREARM_M9);
                wpn1.setAmmoMags(20);
                //var wpn2: Firearm = InventoryManager.GetItemById(InventoryManager.ITEM_FIREARM_MP5) as Firearm;
                //wpn2.setAmmoMags(10);
                char.addInventoryItems([wpn1]);
                var pc = DinogenArena.GameUtil.GetGameState().playerController;
                _gameModePlayer.setController(pc);
                pawn = char;
                pawn.setDamageMultiplier(this.playerDamageMultiplier);
            }
            else {
                if (_gameModePlayer.getTeam() == 0) {
                    var pos = this.getSpawnPosition(_gameModePlayer);
                    var char = DinogenArena.GameUtil.GetGameState().createAICharacter(null, pos.x, pos.y);
                    char.setTeam(_gameModePlayer.getTeam());
                    var possibleItems;
                    var invItem = DinogenArena.InventoryManager.ITEM_FIREARM_M9;
                    var charDamageMultiplier = 1;
                    var moveSpeedMultiplier = 1.25;
                    if (_data["type"] == DinogenArena.SurvivalManager.SOLDIER_STANDARD) {
                        charDamageMultiplier = 1.25;
                        possibleItems = [
                            DinogenArena.InventoryManager.ITEM_FIREARM_M16A4,
                            DinogenArena.InventoryManager.ITEM_FIREARM_M4,
                            DinogenArena.InventoryManager.ITEM_FIREARM_TAR21,
                            DinogenArena.InventoryManager.ITEM_FIREARM_MP5,
                            DinogenArena.InventoryManager.ITEM_FIREARM_UMP45,
                            DinogenArena.InventoryManager.ITEM_FIREARM_MP7
                        ];
                    }
                    else if (_data["type"] == DinogenArena.SurvivalManager.SOLDIER_SHOTGUN) {
                        charDamageMultiplier = 2;
                        moveSpeedMultiplier = 1.5;
                        possibleItems = [
                            DinogenArena.InventoryManager.ITEM_FIREARM_M1014,
                            DinogenArena.InventoryManager.ITEM_FIREARM_M3,
                            DinogenArena.InventoryManager.ITEM_FIREARM_MOSSBERG,
                            DinogenArena.InventoryManager.ITEM_FIREARM_KSG,
                            DinogenArena.InventoryManager.ITEM_FIREARM_SPAS12
                        ];
                    }
                    else if (_data["type"] == DinogenArena.SurvivalManager.SOLDIER_SNIPER) {
                        charDamageMultiplier = 4;
                        possibleItems = [
                            DinogenArena.InventoryManager.ITEM_FIREARM_M40A3,
                            DinogenArena.InventoryManager.ITEM_FIREARM_RSASS,
                            DinogenArena.InventoryManager.ITEM_FIREARM_TPR,
                            DinogenArena.InventoryManager.ITEM_FIREARM_HK417,
                            DinogenArena.InventoryManager.ITEM_FIREARM_MSR
                        ];
                    }
                    else if (_data["type"] == DinogenArena.SurvivalManager.SOLDIER_HEAVY) {
                        charDamageMultiplier = 1.5;
                        possibleItems = [
                            DinogenArena.InventoryManager.ITEM_FIREARM_M249,
                            DinogenArena.InventoryManager.ITEM_FIREARM_MG4,
                            DinogenArena.InventoryManager.ITEM_FIREARM_HAMR,
                            DinogenArena.InventoryManager.ITEM_FIREARM_QBB95
                        ];
                    }
                    charDamageMultiplier += (this.currentWave * 0.025);
                    invItem = possibleItems[DinogenArena.WilkinUtil.GenerateRandomNumber(0, possibleItems.length - 1)];
                    char.addInventoryItemById(invItem);
                    char.setUnlimitedAmmo(true);
                    char.setSpawnProtectTimer(5);
                    char.modifiers["reload_speed"] = 0.25;
                    char.modifiers["damage_inflict_bullet"] = charDamageMultiplier;
                    char.modifiers["move_speed"] = moveSpeedMultiplier;
                    char.setMeleeDamage(250);
                    var ai = char.getAIController();
                    ai.setFollowTarget(DinogenArena.GameUtil.GetGameState().player);
                    ai.setFollowTargetDistanceThreshold(DinogenArena.WilkinUtil.GenerateRandomNumber(100, 400));
                    _gameModePlayer.setController(ai);
                    pawn = char;
                    pawn.setDamageMultiplier(this.playerDamageMultiplier * 0.25);
                }
                else {
                    var dinoType = this.getDinoTypeForCurrentWave();
                    var dino = DinogenArena.GameUtil.GetGameState().createAIDinosaur(null, DinogenArena.WilkinUtil.GenerateRandomNumber(0, DinogenArena.GameUtil.game.world.width), DinogenArena.WilkinUtil.GenerateRandomBoolean() ? 0 : DinogenArena.GameUtil.game.world.height, dinoType);
                    dino.setId(_gameModePlayer.getName());
                    dino.setTeam(_gameModePlayer.getTeam());
                    dino.setRegenHealth(false);
                    //dino.setDestroyTimer(2);
                    var healthBase = dinoType == DinogenArena.Dinosaur.TYPE_TREX ? 1 : 0.05;
                    dino.setHealthModifier(healthBase + (this.currentWave * 0.2));
                    dino.modifiers["move_speed"] = Math.min((0.56 + (this.currentWave * 0.015)) * (DinogenArena.WilkinUtil.GenerateRandomNumber(90, 110) * 0.01), 1.5);
                    if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 50) == 1) {
                        dino.setAsSurvivalSavage();
                        dino.setDamageMultiplier(0.5);
                        dino.modifiers["move_speed"] *= 1.4;
                    }
                    _gameModePlayer.setController(dino.getController());
                    pawn = dino;
                    //console.log("dino.modifiers[move_speed] " + dino.modifiers["move_speed"] + " setHealthModifier " + dino.modifiers["health"]);
                }
            }
            return pawn;
        };
        GameMode_Survival.prototype.showSurvivalMenu = function () {
            if (this.survivalMenu) {
                this.survivalMenu.destroy();
            }
            this.survivalMenu = new DinogenArena.SurvivalMenu(this);
            this.survivalMenu.onCloseCallback = this.onSurvivalMenuClosed;
            this.survivalMenu.onCloseCallbackContext = this;
            this.survivalMenu.show();
        };
        GameMode_Survival.prototype.onSurvivalMenuClosed = function () {
            if (this.survivalMenu) {
                this.survivalMenu.destroy();
                this.survivalMenu = null;
            }
        };
        GameMode_Survival.prototype.getDinoTypeForCurrentWave = function () {
            if (this.currentWave % 30 == 0) {
                return DinogenArena.Dinosaur.TYPE_TREX;
            }
            else if (this.currentWave % 20 == 0) {
                return DinogenArena.Dinosaur.TYPE_SPINOSAURUS;
            }
            else if (this.currentWave % 10 == 0) {
                return DinogenArena.Dinosaur.TYPE_ALLOSAURUS;
            }
            else if (this.currentWave % 5 == 0) {
                return DinogenArena.Dinosaur.TYPE_RAPTOR;
            }
            if (this.currentWave >= 50) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 500) == 1) {
                    return DinogenArena.Dinosaur.TYPE_TREX;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 10) == 1) {
                    return DinogenArena.Dinosaur.TYPE_SPINOSAURUS;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) == 1) {
                    return DinogenArena.Dinosaur.TYPE_ALLOSAURUS;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) == 1) {
                    return DinogenArena.Dinosaur.TYPE_RAPTOR;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) == 1) {
                    return DinogenArena.Dinosaur.TYPE_NEEDLER;
                }
            }
            if (this.currentWave >= 40) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 1000) == 1) {
                    return DinogenArena.Dinosaur.TYPE_TREX;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 35) == 1) {
                    return DinogenArena.Dinosaur.TYPE_SPINOSAURUS;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 25) == 1) {
                    return DinogenArena.Dinosaur.TYPE_ALLOSAURUS;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) == 1) {
                    return DinogenArena.Dinosaur.TYPE_NEEDLER;
                }
            }
            if (this.currentWave >= 20) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 50) == 1) {
                    return DinogenArena.Dinosaur.TYPE_SPINOSAURUS;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 10) == 1) {
                    return DinogenArena.Dinosaur.TYPE_NEEDLER;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 25) == 1) {
                    return DinogenArena.Dinosaur.TYPE_ALLOSAURUS;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 15) == 1) {
                    return DinogenArena.Dinosaur.TYPE_RAPTOR;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 5) == 1) {
                    return DinogenArena.Dinosaur.TYPE_DILO;
                }
            }
            if (this.currentWave >= 15) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 25) == 1) {
                    return DinogenArena.Dinosaur.TYPE_NEEDLER;
                }
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 45) == 1) {
                    return DinogenArena.Dinosaur.TYPE_ALLOSAURUS;
                }
            }
            if (this.currentWave >= 10) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 50) == 1) {
                    return DinogenArena.Dinosaur.TYPE_ALLOSAURUS;
                }
            }
            if (this.currentWave >= 5) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 25) == 1) {
                    return DinogenArena.Dinosaur.TYPE_RAPTOR;
                }
            }
            if (this.currentWave >= 3) {
                if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 10) == 1) {
                    return DinogenArena.Dinosaur.TYPE_DILO;
                }
            }
            if (this.currentWave >= 100) {
                return DinogenArena.Dinosaur.TYPE_RAPTOR;
            }
            return DinogenArena.Dinosaur.TYPE_COMPY;
        };
        GameMode_Survival.prototype.getCurrentWave = function () {
            return this.currentWave;
        };
        GameMode_Survival.prototype.getCurrentWaveEnemiesRemaining = function () {
            return this.currentWaveEnemiesRemaining;
        };
        GameMode_Survival.prototype.getCurrentWaveEnemiesTotal = function () {
            return this.currentWaveEnemiesTotal;
        };
        GameMode_Survival.prototype.getCurrentWaveProgress = function () {
            return (this.currentWaveEnemiesTotal - this.currentWaveEnemiesRemaining) / this.currentWaveEnemiesTotal;
        };
        GameMode_Survival.prototype.getIntermissionTimer = function () {
            return this.intermissionTimer;
        };
        GameMode_Survival.prototype.isIntermission = function () {
            return this.bIntermission;
        };
        GameMode_Survival.prototype.completeWave = function () {
            this.bIntermission = true;
            this.intermissionTimer = GameMode_Survival.INTERMISSION_TIME;
            var pc = DinogenArena.GameUtil.GetGameState().playerController;
            if (this.currentWave >= 1) {
                var reward = 100 + (50 * this.currentWave) + this.getNumEnemiesForWave(this.currentWave);
                pc.getHUD().addToNotifier({
                    labelText: "Wave " + this.currentWave + " Complete!",
                    xpText: "+$" + reward,
                    sound: "ui_wave_complete",
                    icon: "icon_wave_complete"
                });
                this.addSurvivalMoney(reward);
                var bots = DinogenArena.GameUtil.GetGameState().getLivingBotsForTeam(DinogenArena.GameUtil.GetGameState().getPlayerTeam());
                for (var i = 0; i < bots.length; i++) {
                    var pawn = bots[i];
                    var char = pawn instanceof DinogenArena.Character ? pawn : null;
                    if (char) {
                        char.sayVox("vox_char_celebrate", 5);
                    }
                }
                if (this.currentWave % 3 == 0) {
                    var timer = DinogenArena.GameUtil.game.time.create();
                    timer.add(1000, this.triggerInterstitialAd, this);
                    timer.start();
                }
            }
            if (this.currentWave == 5) {
                DinogenArena.PlayerManager.CurrentProfile.unlockAchievement(DinogenArena.Achievements.ACH_SURVIVAL);
            }
        };
        GameMode_Survival.prototype.getNumEnemiesForWave = function (_wave) {
            if (this.currentWave % 30 == 0) {
                return 1 * (_wave / 30);
            }
            if (this.currentWave % 20 == 0) {
                return 2 * (_wave / 20);
            }
            else if (this.currentWave % 10 == 0) {
                return 3 * (_wave / 10);
            }
            else if (this.currentWave % 5 == 0) {
                return 5 * (_wave / 5);
            }
            return Math.min(Math.ceil((this.currentWave * 5) * (1 + (this.currentWave * 0.2))), 3000);
        };
        GameMode_Survival.prototype.startNextWave = function () {
            this.bIntermission = false;
            this.currentWave++;
            this.currentWaveEnemiesTotal = this.getNumEnemiesForWave(this.currentWave); //Math.ceil(10 * (this.currentWave * 1.2));
            this.currentWaveEnemiesRemaining = this.currentWaveEnemiesTotal;
            console.log("currentWaveEnemiesTotal=" + this.currentWaveEnemiesTotal);
            var pc = DinogenArena.GameUtil.GetGameState().playerController;
            pc.getHUD().addToNotifier({
                labelText: "Wave " + this.currentWave,
                sound: "ui_wave_start",
                icon: "icon_wave_start"
            });
            this.removeAllBotsFromTeam(1);
            var baseTime = 180;
            var respawnTime = Math.max(15, Math.min(baseTime, baseTime - Math.ceil(this.currentWave * 3))); //christ
            var len = Math.min(this.currentWaveEnemiesTotal, GameMode_Survival.MAX_ENEMIES);
            for (var i = 0; i < len; i++) {
                var player = this.addPlayer("enemy_" + this.currentWave + "_" + i, 1, false);
                //player.setDisposable();
                player.setRespawnTimerMax(respawnTime * i);
                player.setWantsToRespawn();
            }
            if (this.currentWave > 1) {
                DinogenArena.GameUtil.GetGameState().setWorldColourFilter(0x000033, Math.min((this.currentWave - 1) * 0.015, 0.5));
            }
            if (this.currentWave > 30) {
                this.aiSkillLevel = 3;
            }
            else if (this.currentWave > 20) {
                this.aiSkillLevel = 2;
            }
            else if (this.currentWave > 10) {
                this.aiSkillLevel = 1;
            }
            else {
                this.aiSkillLevel = 0;
            }
        };
        GameMode_Survival.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            var gmp = _pawn.getController().getGameModePlayer();
            if (_pawn.getTeam() > 0) {
                this.addPlayerKill();
                var money = _pawn.getKillReward();
                if (_damageType == DinogenArena.DamageType.DAMAGE_TYPE_MELEE) {
                    money = Math.ceil(money * 1.5);
                }
                this.addSurvivalMoney(money);
                this.currentWaveEnemiesRemaining--;
                if (this.currentWaveEnemiesRemaining <= 0) {
                    this.completeWave();
                }
                else {
                    var num = DinogenArena.GameUtil.GetGameState().getNumLivingPawnsForTeam(1) + this.getNumPlayersWantingToRespawn();
                    if (num < this.currentWaveEnemiesRemaining) {
                        gmp.setRespawnTimerMax(1);
                        gmp.setWantsToRespawn();
                    }
                }
            }
            else {
                if (_pawn.isPlayer()) {
                    DinogenArena.GameUtil.GetGameState().setWorldGray(true);
                    this.endMatch(GameMode.END_MATCH_CONDITION_SURVIVAL);
                }
            }
        };
        GameMode_Survival.prototype.hasScoreboard = function () {
            return false;
        };
        GameMode_Survival.INTERMISSION_TIME = 600;
        GameMode_Survival.MAX_ENEMIES = 24;
        GameMode_Survival.MAX_SOLDIERS = 3;
        return GameMode_Survival;
    }(GameMode));
    DinogenArena.GameMode_Survival = GameMode_Survival;
    var GameMode_Campaign = /** @class */ (function (_super) {
        __extends(GameMode_Campaign, _super);
        function GameMode_Campaign() {
            var _this = _super.call(this, DinogenArena.GameModeManager.GAME_MODE_CAMPAIGN) || this;
            _this.playerDamageMultiplier = 0.5;
            _this.bIsTimeLimited = false;
            _this.bUseKillFeed = false;
            _this.bUseSpawnProtection = false;
            _this.bShowInstructions = false;
            _this.bSetPawnTeamColour = false;
            _this.bFriendlyFire = false;
            _this.init();
            return _this;
        }
        GameMode_Campaign.prototype.init = function () {
            this.triggers = [];
            this.triggerActionQueue = [];
            this.quests = [];
        };
        GameMode_Campaign.prototype.destroy = function () {
            this.triggers = null;
            this.triggerActionQueue = null;
            this.quests = null;
            this.currentStoryData = null;
            this.cinematic = null;
            _super.prototype.destroy.call(this);
        };
        GameMode_Campaign.prototype.getMatchResult = function () {
            this.result = DinogenArena.GameUtil.GetGameState().player.isAlive() ? GameMode.RESULT_WIN : GameMode.RESULT_LOSS;
        };
        GameMode_Campaign.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (!DinogenArena.GameUtil.GetGameState().bGamePaused) {
                if (this.triggerActionQueue) {
                    var len = this.triggerActionQueue.length - 1;
                    for (var i = len; i >= 0; i--) {
                        var action = this.triggerActionQueue[i];
                        action["actionDelayTimer"]--;
                        if (action["actionDelayTimer"] <= 0) {
                            this.executeAction(action);
                            this.triggerActionQueue.splice(i, 1);
                        }
                    }
                }
                if (this.cinematic) {
                    this.cinematic.tick();
                }
                /*
                if (this.quests)
                {
                    for (var i = 0; i < this.quests.length; i++)
                    {
                        var quest = this.quests[i];
                        if (quest["bVisible"] != false && quest["bComplete"] == true)
                        {
                            if (quest["hideTimer"] > 0)
                            {
                                quest["hideTimer"]--;
                            }
                            else
                            {
                                quest["bVisible"] = false;
                                this.onQuestsUpdated();
                            }
                        }
                    }
                }
                */
            }
        };
        GameMode_Campaign.prototype.setFromData = function (_data) {
            _super.prototype.setFromData.call(this, _data);
            if (_data["currentStoryData"]) {
                this.currentStoryData = _data["currentStoryData"];
                this.updateHUD();
            }
            if (_data["triggersId"]) {
                var triggerData = DinogenArena.GameUtil.game.cache.getJSON(_data["triggersId"], true);
                if (triggerData) {
                    this.addTriggers(triggerData);
                }
            }
            else {
                console.warn("Missing triggersId");
            }
            if (_data["quests"]) {
                this.setQuests(_data["quests"]);
            }
            if (_data["triggers"]) {
                this.setTriggers(_data["triggers"]);
            }
            if (!_data["triggersId"]) {
                /* Default player position */
                console.warn("No triggersId, using default player position");
            }
            if (_data["onLoadTriggerId"]) {
                this.dispatchTrigger({ id: _data["onLoadTriggerId"] });
            }
        };
        GameMode_Campaign.prototype.setQuests = function (_quests) {
            this.quests = _quests;
            this.onQuestsUpdated();
        };
        GameMode_Campaign.prototype.setTriggers = function (_triggers) {
            this.triggers = _triggers;
        };
        GameMode_Campaign.prototype.getQuests = function () {
            return this.quests;
        };
        GameMode_Campaign.prototype.getTriggers = function () {
            return this.triggers;
        };
        GameMode_Campaign.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            this.startMatch();
        };
        GameMode_Campaign.prototype.handleMatchHasStarted = function () {
            _super.prototype.handleMatchHasStarted.call(this);
            var trigger = { event: "game_start" };
            this.dispatchTrigger(trigger);
            this.updateHUD();
        };
        GameMode_Campaign.prototype.addQuest = function (_quest) {
            this.quests.push(_quest);
            var hud = DinogenArena.GameUtil.GetGameState().playerController.getHUD();
            //descText: _quest["name"]
            hud.addToNotifier({
                labelText: "New Mission",
                icon: "icon_quest_new",
                sound: "ui_bonus",
                timer: 180
            });
            this.onQuestsUpdated();
        };
        GameMode_Campaign.prototype.addQuestObjective = function (_questId, _objective) {
            var quest = this.getQuestById(_questId);
            if (quest) {
                quest["objectives"].push(_objective);
                var hudArrowObjectIds = _objective["hudArrowObjectIds"];
                if (hudArrowObjectIds) {
                    for (var i = 0; i < hudArrowObjectIds.length; i++) {
                        DinogenArena.GameUtil.GetGameState().playerController.getHUD().addObjectiveArrow({ questId: quest["id"], objectiveId: _objective["id"], objectId: hudArrowObjectIds[i] });
                    }
                }
                this.onQuestsUpdated();
            }
        };
        GameMode_Campaign.prototype.addQuestObjectiveProgress = function (_data) {
            var objective = this.getQuestObjectiveById(_data["questId"], _data["objectiveId"]);
            if (objective) {
                objective["progress"] += _data["value"];
                if (objective["progress"] >= objective["progressMax"]) {
                    if (objective["bComplete"] != true) {
                        this.onQuestObjectiveComplete(_data["questId"], _data["objectiveId"]);
                    }
                    objective["bComplete"] = true;
                    if (objective["hudArrowObjectIds"]) {
                        DinogenArena.GameUtil.GetGameState().playerController.getHUD().removeObjectiveArrowsForQuestObjective(_data["questId"], _data["objectiveId"]);
                    }
                }
                //this.checkQuestComplete(_data["questId"]);
                this.onQuestsUpdated();
            }
        };
        GameMode_Campaign.prototype.onQuestObjectiveComplete = function (_questId, _objectiveId) {
            this.dispatchTrigger({ event: "quest_objective_complete", questId: _questId, objectiveId: _objectiveId });
            DinogenArena.SoundManager.PlayUISound("ui_point");
        };
        GameMode_Campaign.prototype.checkQuestComplete = function (_questId) {
            var quest = this.getQuestById(_questId);
            if (!quest) {
                return false;
            }
            var objectives = quest["objectives"];
            for (var i = 0; i < objectives.length; i++) {
                if (!objectives[i]["bComplete"]) {
                    return false;
                }
            }
            //quest["hideTimer"] = GameUtil.frameRate * 5;
            if (quest["bAutoComplete"] != false) {
                //this.onQuestComplete(quest);
            }
            return true;
        };
        GameMode_Campaign.prototype.onQuestComplete = function (_quest) {
            if (_quest["bComplete"] == true) {
                console.warn("Quest is already completed: " + _quest["id"]);
                return;
            }
            _quest["bComplete"] = true;
            var rewards = _quest["rewards"];
            if (rewards) {
                var hud = DinogenArena.GameUtil.GetGameState().playerController.getHUD();
                hud.addToNotifier({
                    labelText: "Goal Complete!",
                    //xpText: "+" + rewards["xp"] + "XP +$" + rewards["money"],
                    descText: _quest["name"],
                    icon: "icon_quest_complete",
                    sound: "ui_challenge_complete",
                    timer: 180
                });
                if (rewards["xp"]) {
                    DinogenArena.GameUtil.GetGameState().playerController.addXP(rewards["xp"]);
                }
                if (rewards["money"]) {
                    this.addStoryMoney(rewards["money"]);
                }
            }
            this.currentStoryData["completedQuests"].push(_quest["id"]);
            this.onQuestsUpdated();
        };
        GameMode_Campaign.prototype.onQuestsUpdated = function () {
            var hud = DinogenArena.GameUtil.GetGameState().playerController.getHUD();
            hud.quests.updateQuests(this.quests);
        };
        GameMode_Campaign.prototype.updateHUD = function () {
            var hud = DinogenArena.GameUtil.GetGameState().playerController.getHUD();
            var container = hud.gameMode.gameModeContainer;
            container.updateMoney();
            container.updateXPBar();
        };
        GameMode_Campaign.prototype.getStoryMoney = function () {
            return this.currentStoryData["money"];
        };
        GameMode_Campaign.prototype.addStoryMoney = function (_val) {
            this.currentStoryData["money"] += _val;
            this.updateHUD();
        };
        GameMode_Campaign.prototype.getStoryLevel = function () {
            return this.currentStoryData["level"];
        };
        GameMode_Campaign.prototype.getStoryXP = function () {
            return this.currentStoryData["xp"];
        };
        GameMode_Campaign.prototype.getQuestById = function (_id) {
            for (var i = 0; i < this.quests.length; i++) {
                if (this.quests[i]["id"] == _id) {
                    return this.quests[i];
                }
            }
            return null;
        };
        GameMode_Campaign.prototype.getQuestObjectiveById = function (_questId, _objectiveId) {
            var quest = this.getQuestById(_questId);
            if (!quest) {
                return null;
            }
            var objectives = quest["objectives"];
            for (var i = 0; i < objectives.length; i++) {
                if (objectives[i]["id"] == _objectiveId) {
                    return objectives[i];
                }
            }
            return null;
        };
        GameMode_Campaign.prototype.onVoxComplete = function (_param1, _param2, _onCompleteTriggerId) {
            if (this.isCampaign()) {
                DinogenArena.GameUtil.GetGameState().playerController.getHUD().vox.close();
            }
            if (_onCompleteTriggerId) {
                this.dispatchTrigger({ id: _onCompleteTriggerId });
            }
        };
        GameMode_Campaign.prototype.dispatchTrigger = function (_trigger) {
            /* dispatchTrigger --> handleTrigger --> executeTrigger */
            this.handleTrigger(_trigger);
        };
        GameMode_Campaign.prototype.executeAction = function (_action) {
            var actionType = _action["actionType"];
            console.log("%cexecuteAction: " + actionType, "background: #00BB00; color: #FFFFFF");
            var obj;
            if (actionType == "console_log") {
                console.log(_action["message"]);
            }
            else if (actionType == "console_warn") {
                console.warn(_action["message"]);
            }
            else if (actionType == "console_error") {
                console.error(_action["message"]);
            }
            else if (actionType == "alert") {
                alert(_action["message"]);
            }
            else if (actionType == "remove_triggers") {
                this.removeTriggersById(_action["triggersId"]);
            }
            else if (actionType == "play_vox") {
                var vox = DinogenArena.GameUtil.GetVoxObjectById(_action["voxId"]);
                DinogenArena.GameUtil.GetGameState().playerController.getHUD().vox.showText(vox["text"]);
                console.log(_action["voxId"] + " " + vox["text"]);
                var bHasSound = DinogenArena.GameUtil.game.cache.checkSoundKey(_action["voxId"]);
                var sfx = DinogenArena.SoundManager.PlayVox(bHasSound ? vox["id"] : "vox_char_affirmative_1");
                var onCompleteTriggerId = _action["onCompleteTriggerId"];
                sfx.onStop.add(this.onVoxComplete, this, 0, [onCompleteTriggerId]);
            }
            else if (actionType == "game_quit") {
                DinogenArena.GameUtil.game.fadeToBlack(DinogenArena.GameUtil.game.loadMainMenu, DinogenArena.GameUtil.game);
            }
            else if (actionType == "game_restart") {
                DinogenArena.GameUtil.game.fadeToBlack(DinogenArena.GameUtil.game.restartGame, DinogenArena.GameUtil.game);
            }
            else if (actionType == "actor_damage") {
                var ids = _action["actorIds"];
                for (var i = 0; i < ids.length; i++) {
                    var actor = DinogenArena.GameUtil.GetGameState().getObjectById(ids[i]);
                    if (actor) {
                        actor.takeDamage(_action["damageAmount"], null, actor, _action["damageType"]);
                    }
                }
            }
            else if (actionType == "actor_revive") {
                var ids = _action["actorIds"];
                for (var i = 0; i < ids.length; i++) {
                    var actor = DinogenArena.GameUtil.GetGameState().getObjectById(ids[i]);
                    if (actor) {
                        actor.revive();
                    }
                }
            }
            else if (actionType == "interactable_modify") {
                var interactable = DinogenArena.GameUtil.GetGameState().getObjectById(_action["id"]);
                if (interactable) {
                    if (_action["bEnabled"] != undefined) {
                        interactable.setEnabled(_action["bEnabled"]);
                    }
                }
            }
            else if (actionType == "controller_modify") {
                var ids = _action["pawnIds"];
                for (var i = 0; i < ids.length; i++) {
                    var pawn = DinogenArena.GameUtil.GetGameState().getObjectById(ids[i]);
                    if (pawn) {
                        var controller = pawn.getController();
                        if (_action["bScriptMode"] != undefined) {
                            controller.setScriptMode(_action["bScriptMode"]);
                        }
                    }
                }
            }
            else if (actionType == "pawn_move") {
                var ids = _action["pawnIds"];
                var destination = _action["destination"];
                if (destination) {
                    for (var i = 0; i < ids.length; i++) {
                        var pawn = DinogenArena.GameUtil.GetGameState().getObjectById(ids[i]);
                        if (pawn) {
                            var ai = pawn.getAIController();
                            ai;
                        }
                    }
                }
                else {
                    console.error("Invalid destination");
                }
            }
            else if (actionType == "pawn_follow") {
                var ids = _action["pawnIds"];
                var followObject = DinogenArena.GameUtil.GetGameState().getObjectById(_action["followId"]);
                if (followObject) {
                    for (var i = 0; i < ids.length; i++) {
                        var pawn = DinogenArena.GameUtil.GetGameState().getObjectById(ids[i]);
                        if (pawn) {
                            var ai = pawn.getAIController();
                            ai.setFollowTarget(followObject);
                            ai.setOnDestinationReachedTriggerId(_action["onDestinationReachedTriggerId"]);
                        }
                    }
                }
                else {
                    console.error("Invalid followObject");
                }
            }
            else if (actionType == "pawn_look") {
                var ids = _action["pawnIds"];
                var lookObject = DinogenArena.GameUtil.GetGameState().getObjectById(_action["lookId"]);
                if (lookObject) {
                    for (var i = 0; i < ids.length; i++) {
                        var pawn = DinogenArena.GameUtil.GetGameState().getObjectById(ids[i]);
                        if (pawn) {
                            pawn.lookAt(lookObject.x, lookObject.y);
                        }
                    }
                }
                else {
                    console.error("Invalid lookObject");
                }
            }
            else if (actionType == "start_cinematic") {
                var cinematicId = _action["cinematicId"];
                DinogenArena.GameUtil.GetGameState().startCinematic(cinematicId);
            }
            else if (actionType == "stop_cinematic") {
                DinogenArena.GameUtil.GetGameState().stopCinematic();
            }
            else if (actionType == "add_trigger_area") {
                var area = DinogenArena.GameUtil.GetGameState().createTriggerArea(_action["id"], _action["x"], _action["y"]);
                if (_action["rect"]) {
                    area.setRect(_action["rect"]["w"], _action["rect"]["h"]);
                }
                obj = area;
            }
            else if (actionType == "add_world_button") {
                var but = DinogenArena.GameUtil.GetGameState().createWorldButton(_action["id"], _action["x"], _action["y"]);
                obj = but;
            }
            else if (actionType == "add_player") {
                if (_action["bUserPlayer"] == true) {
                    console.warn("Deprecated, use add_user_player instead");
                    this.addUserPlayer(_action["team"], _action["data"]);
                }
                else {
                    var gmp = this.addPlayer(_action["name"], _action["team"], _action["bUserPlayer"], _action["data"]);
                    obj = gmp.getController().getPawn();
                }
            }
            else if (actionType == "add_raptor") {
                var oldPlayer = DinogenArena.GameUtil.GetGameState().player;
                var raptor = DinogenArena.GameUtil.GetGameState().createPlayerDinosaur(oldPlayer.x + 50, oldPlayer.y, DinogenArena.Dinosaur.TYPE_RAPTOR);
                raptor.setTeam(0);
                oldPlayer.triggerDestroy();
            }
            else if (actionType == "add_user_player") {
                var data = {
                    bSpawn: true,
                    type: "character",
                    x: _action["data"]["x"],
                    y: _action["data"]["y"],
                    inventory: []
                };
                this.addUserPlayer(0, data);
            }
            else if (actionType == "add_weapon") {
                var firearm = DinogenArena.InventoryManager.GetItemById(_action["weaponId"]);
                var dropped = DinogenArena.GameUtil.GetGameState().createDroppedItem(_action["id"], _action["x"], _action["y"], 0, firearm);
                obj = dropped;
            }
            else if (actionType == "add_crate") {
                var crate = DinogenArena.GameUtil.GetGameState().createCrate(_action["id"], _action["x"], _action["y"], 0, _action["type"], _action["contents"]);
                if (_action["uses"]) {
                    crate.setUses(_action["uses"]);
                }
                obj = crate;
            }
            else if (actionType == "add_target") {
                var base = DinogenArena.GameUtil.GetGameState().createGenericObject(null, _action["x"], _action["y"], 0);
                var sprite = DinogenArena.GameUtil.game.add.sprite(base.x, base.y, "atlas_objects", "target_base");
                DinogenArena.GameUtil.GetGameState().addToWorld(sprite);
                DinogenArena.GameUtil.game.physics.box2d.enable(sprite);
                base.primaryBody = sprite.body;
                base.primaryBody.static = true;
                base.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_ITEMS);
                base.primaryBody.setCollisionMask(DinogenArena.GameState.MASK_CRATES);
                var lastRect;
                var offset = 3;
                var dir = _action["dir"];
                for (var i = 0; i < 10; i++) {
                    var x = base.x;
                    if (dir == "right") {
                        x += (i * offset);
                    }
                    else {
                        x -= (i * offset);
                    }
                    var y = base.y;
                    var chainLink = DinogenArena.GameUtil.GetGameState().createGenericObject(null, x, y, 0);
                    var newRect = DinogenArena.GameUtil.game.add.sprite(x, y, "atlas_objects", "chain_link");
                    chainLink.add(newRect);
                    DinogenArena.GameUtil.GetGameState().addToWorld(newRect, DinogenArena.GameState.INDEX_BOTTOM);
                    DinogenArena.GameUtil.game.physics.box2d.enable(newRect, false);
                    chainLink.primaryBody = newRect.body;
                    chainLink.primaryBody.friction = 1;
                    chainLink.primaryBody.linearDamping = 8;
                    chainLink.primaryBody.angularDamping = 1;
                    chainLink.primaryBody.setCollisionCategory(DinogenArena.GameState.CATEGORY_ITEMS);
                    chainLink.primaryBody.setCollisionMask(0);
                    if (lastRect) {
                        DinogenArena.GameUtil.game.physics.box2d.revoluteJoint(lastRect, newRect, (dir == "right" ? offset : -offset), 0, (dir == "right" ? -offset : offset), 0);
                    }
                    else {
                        DinogenArena.GameUtil.game.physics.box2d.revoluteJoint(sprite, newRect, (dir == "right" ? offset : -offset), 0, (dir == "right" ? -offset : offset), 0);
                    }
                    lastRect = newRect;
                }
                var targetDist = 52;
                var target = DinogenArena.GameUtil.GetGameState().createTarget(_action["id"], lastRect.x + (dir == "right" ? targetDist : -targetDist), base.y, (dir == "right" ? 0 : 180 * DinogenArena.WilkinUtil.TO_RADIANS));
                if (dir == "left") {
                    target.hitSprite.scale.x = -1;
                }
                DinogenArena.GameUtil.game.physics.box2d.revoluteJoint(target.hitSprite, newRect, 0, 0, 0, 0);
                target.hitSprite.angle = DinogenArena.WilkinUtil.GenerateRandomNumber(-180, 180) * DinogenArena.WilkinUtil.TO_RADIANS;
                obj = target;
            }
            else if (actionType == "complete_quest") {
                this.onQuestComplete(this.getQuestById(_action["questId"]));
            }
            else if (actionType == "add_quest") {
                if (_action["quest"]) {
                    this.addQuest(_action["quest"]);
                }
                else {
                    var questId = _action["questId"];
                    var quest = DinogenArena.CampaignManager.GetQuestById(questId);
                    console.log(quest);
                    this.addQuest(quest);
                    console.log("Get quest triggers for " + questId);
                    var questTriggers = DinogenArena.GameUtil.game.cache.getJSON("triggers_" + questId, true);
                    this.addTriggers(questTriggers);
                    this.dispatchTrigger({ event: "quest_init", questId: questId });
                }
            }
            else if (actionType == "add_quest_objective") {
                this.addQuestObjective(_action["questId"], _action["objective"]);
            }
            else if (actionType == "add_quest_objective_progress") {
                this.addQuestObjectiveProgress(_action);
            }
            else if (actionType == "add_quest_objective_arrow") {
                DinogenArena.GameUtil.GetGameState().playerController.getHUD().addObjectiveArrow({ questId: _action["questId"], objectiveId: _action["objectiveId"], objectId: _action["objectId"] });
            }
            else if (actionType == "hud_impulse") {
                DinogenArena.GameUtil.GetGameState().playerController.getHUD().getElementById(_action["hudElementId"]).impulse();
            }
            else if (actionType == "end_game") {
                this.endMatch(_action["condition"]);
            }
            else if (actionType == "play_sound") {
                if (_action["objectId"] != undefined) {
                    var obj = DinogenArena.GameUtil.GetGameState().getObjectById(_action["objectId"]);
                    if (obj) {
                        DinogenArena.SoundManager.PlayWorldSound(_action["soundId"], obj.x, obj.y);
                    }
                }
                else {
                    DinogenArena.SoundManager.PlayUISound(_action["soundId"]);
                }
            }
            if (obj) {
                if (_action["attachId"]) {
                    var attachObj = DinogenArena.GameUtil.GetGameState().getObjectById(_action["attachId"]);
                    if (attachObj) {
                        obj.attachTo(attachObj);
                    }
                }
                var actor = obj instanceof DinogenArena.Actor ? obj : null;
                if (actor) {
                    actor.setOnDeathTriggerId(_action["onDeathTriggerId"]);
                }
                var interactable = obj instanceof DinogenArena.Interactable ? obj : null;
                if (interactable) {
                    interactable.setOnInteractTriggerId(_action["onInteractTriggerId"]);
                    interactable.setOnTouchTriggerId(_action["onTouchTriggerId"]);
                    if (_action["bEnabled"] != undefined) {
                        interactable.setEnabled(_action["bEnabled"]);
                    }
                }
            }
        };
        GameMode_Campaign.prototype.handleTrigger = function (_trigger) {
            if (!_trigger) {
                alert("invalid trigger");
                return;
            }
            if (this.triggers) {
                for (var i = 0; i < this.triggers.length; i++) {
                    console.log(this.triggers[i]);
                    var triggersId = this.triggers[i]["triggersId"];
                    var triggersArray = this.triggers[i]["triggers"];
                    for (var j = 0; j < triggersArray.length; j++) {
                        var trig = triggersArray[j];
                        if (!trig || trig["bEnabled"] == false) {
                            continue;
                        }
                        var bEvent = trig["event"] || _trigger["event"];
                        if (bEvent) {
                            bEvent = trig["event"] == _trigger["event"];
                        }
                        if (trig["id"] == _trigger["id"] || bEvent) {
                            if (trig["questId"]) {
                                if (trig["questId"] != _trigger["questId"]) {
                                    continue;
                                }
                                else {
                                    if (trig["objectiveId"]) {
                                        if (trig["objectiveId"] != _trigger["objectiveId"]) {
                                            continue;
                                        }
                                    }
                                }
                            }
                            if (trig["conditions"]) {
                                /* Check conditions */
                            }
                            var actions = trig["actions"];
                            if (actions) {
                                for (var k = 0; k < actions.length; k++) {
                                    var action = actions[k];
                                    if (action) {
                                        if (action["delay"]) {
                                            action["actionDelayTimer"] = action["delay"] * DinogenArena.GameUtil.frameRate;
                                            this.triggerActionQueue.push(action);
                                        }
                                        else {
                                            this.executeAction(action);
                                            if (!this.triggers) {
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                            //trig["bEnabled"] = false;
                        }
                    }
                }
            }
        };
        GameMode_Campaign.prototype.addTriggers = function (_triggerData) {
            this.triggers.push(_triggerData);
        };
        GameMode_Campaign.prototype.removeTriggersById = function (_triggersId) {
            for (var i = 0; i < this.triggers.length; i++) {
                if (this.triggers[i]["triggersId"] == _triggersId) {
                    this.triggers.splice(i, 1);
                    break;
                }
            }
        };
        GameMode_Campaign.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            var player = _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
            if (_data) {
                player.setRespawnData(_data);
                if (_data["bSpawn"] == true) {
                    player.respawn();
                }
            }
            return player;
        };
        GameMode_Campaign.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            _super.prototype.spawnPawn.call(this, _gameModePlayer, _data);
            var pawn;
            var pos;
            if (_data["x"] != undefined || _data["y"] != undefined) {
                pos = new Phaser.Point(_data["x"], _data["y"]);
            }
            else if (_data["atObjectId"] != undefined) {
                var object = DinogenArena.GameUtil.GetGameState().getObjectById(_data["atObjectId"]);
                if (object) {
                    pos = new Phaser.Point(object.x, object.y);
                }
            }
            else {
                console.warn("Unknown pawn spawn position");
                pos = this.getSpawnPosition(_gameModePlayer);
            }
            if (_data["type"] == "character") {
                var char;
                if (_gameModePlayer.isUserPlayer()) {
                    char = DinogenArena.GameUtil.GetGameState().createPlayerCharacter(pos.x, pos.y);
                }
                else {
                    char = DinogenArena.GameUtil.GetGameState().createAICharacter(_data["id"], pos.x, pos.y);
                }
                var useInv = [];
                var inv = _data["inventory"];
                for (var i = 0; i < inv.length; i++) {
                    var cur = inv[i];
                    var firearm = DinogenArena.InventoryManager.GetItemById(cur["id"]);
                    if (cur["mag"] != undefined) {
                        firearm.setMag(cur["mag"]);
                    }
                    if (cur["ammo"] != undefined) {
                        firearm.setAmmo(cur["ammo"]);
                    }
                    useInv.push(firearm);
                }
                char.addInventoryItems(useInv);
                if (_data["bUnlimitedAmmo"] != undefined) {
                    char.setUnlimitedAmmo(_data["bUnlimitedAmmo"]);
                }
                if (_data["avatarId"] != undefined) {
                    char.setAvatarId(_data["avatarId"]);
                }
                else if (_gameModePlayer.isUserPlayer()) {
                    char.setAvatarId(DinogenArena.CharacterAvatar.PRESET_PLAYER);
                }
                pawn = char;
            }
            else if (_data["type"] == "dinosaur") {
                var dinoType = _data["dinoType"];
                var dino;
                if (_gameModePlayer.isUserPlayer()) {
                    dino = DinogenArena.GameUtil.GetGameState().createPlayerDinosaur(pos.x, pos.y, dinoType);
                }
                else {
                    dino = DinogenArena.GameUtil.GetGameState().createAIDinosaur(_data["id"], pos.x, pos.y, dinoType);
                    dino.setHealthModifier(0.5);
                    dino.modifiers["move_speed"] = 0.5; // WilkinUtil.GenerateRandomNumber(40, 50) * 0.01;
                }
                pawn = dino;
            }
            pawn.setTeam(_gameModePlayer.getTeam());
            if (_gameModePlayer.isUserPlayer()) {
                var pc = DinogenArena.GameUtil.GetGameState().playerController;
                _gameModePlayer.setController(pc);
                pawn.setDamageMultiplier(this.playerDamageMultiplier);
            }
            else {
                pawn.setDrops(DinogenArena.DropsManager.GetDropsForId(DinogenArena.DropsManager.DROP_COMPY));
                var ai = pawn.getAIController();
                _gameModePlayer.setController(ai);
                _gameModePlayer.setDisposable();
                if (_data["bScriptMode"] != undefined) {
                    ai.setScriptMode(_data["bScriptMode"]);
                }
            }
            return pawn;
        };
        GameMode_Campaign.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            if (_pawn.isPlayer()) {
                this.endMatch(GameMode.END_MATCH_CONDITION_DEAD);
            }
        };
        GameMode_Campaign.prototype.hasScoreboard = function () {
            return false;
        };
        return GameMode_Campaign;
    }(GameMode));
    DinogenArena.GameMode_Campaign = GameMode_Campaign;
    var GameMode_CaptureTheFlag = /** @class */ (function (_super) {
        __extends(GameMode_CaptureTheFlag, _super);
        function GameMode_CaptureTheFlag(_id) {
            if (_id === void 0) { _id = DinogenArena.GameModeManager.GAME_MODE_CAPTURE_THE_FLAG; }
            var _this = _super.call(this, _id) || this;
            //this.defaultRespawnTime = 600;
            _this.setNumTeams(2);
            _this.teams = [{ team: 0, race: "human" }, { team: 1, race: "human" }];
            _this.bTeamGame = true;
            return _this;
        }
        GameMode_CaptureTheFlag.prototype.getFlagPosition = function (_team) {
            var pos = new Phaser.Point(0, 0);
            var points;
            var index = 0;
            points = DinogenArena.GameUtil.GetGameState().mapData["flagPoints"];
            pos.x = points[_team][0];
            pos.y = points[_team][1];
            return pos;
        };
        GameMode_CaptureTheFlag.prototype.setFromData = function (_data) {
            _super.prototype.setFromData.call(this, _data);
            this.playersPerTeam = _data["players"];
            this.scoreLimit = _data["scoreLimit"];
        };
        GameMode_CaptureTheFlag.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            var data = {};
            if (this.teams) {
                data["teams"] = this.teams;
            }
            else {
                var teams = [];
                for (var i = 0; i < this.scores.length; i++) {
                    teams.push({ team: i, race: "human" });
                }
                data["teams"] = teams;
            }
            this.createTeamSelectMenu(data);
            this.createBots();
        };
        GameMode_CaptureTheFlag.prototype.handleMatchHasStarted = function () {
            _super.prototype.handleMatchHasStarted.call(this);
            var pc = DinogenArena.GameUtil.GetGameState().playerController;
            for (var i = 0; i < this.getNumTeams(); i++) {
                var flag = this.getFlag(i);
                if (flag) {
                    pc.getHUD().addObjectiveArrow({ team: i, worldObject: flag });
                }
            }
        };
        GameMode_CaptureTheFlag.prototype.getMatchResult = function () {
            if (this.getWinningTeam() < 0) {
                this.result = GameMode.RESULT_DRAW;
            }
            else if (this.getWinningTeam() == this.getUserPlayer().getTeam()) {
                this.result = GameMode.RESULT_WIN;
            }
            else {
                this.result = GameMode.RESULT_LOSS;
            }
        };
        GameMode_CaptureTheFlag.prototype.createBots = function () {
            for (var i = 0; i < this.getNumTeams(); i++) {
                for (var j = 0; j < this.playersPerTeam; j++) {
                    var player = this.addPlayer(DinogenArena.GameModeManager.GetBotName(this.teams[i]["race"]), i, false);
                    player.respawn();
                }
            }
        };
        GameMode_CaptureTheFlag.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            if (this.getNumPlayersForTeam(_team) >= this.playersPerTeam) {
                this.removeBotFromTeam(_team);
            }
            return _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
        };
        GameMode_CaptureTheFlag.prototype.setNumTeams = function (_val) {
            this.scores = [];
            for (var i = 0; i < _val; i++) {
                this.scores.push(0);
                var flagPos = this.getFlagPosition(i);
                var flag = DinogenArena.GameUtil.GetGameState().createFlag(i, flagPos.x, flagPos.y);
                this.setFlag(i, flag);
            }
        };
        GameMode_CaptureTheFlag.prototype.getWinningTeam = function () {
            var score0 = this.getScoreForTeam(0);
            var score1 = this.getScoreForTeam(1);
            if (score0 > score1) {
                return 0;
            }
            else if (score1 > score0) {
                return 1;
            }
            return -1;
        };
        GameMode_CaptureTheFlag.prototype.getScoreForTeam = function (_index) {
            return this.scores[_index];
        };
        GameMode_CaptureTheFlag.prototype.addScoreForTeam = function (_index) {
            if (!this.matchIsInProgress()) {
                return;
            }
            this.scores[_index] += 1;
            if (this.scores[_index] >= this.scoreLimit) {
                this.endMatch(GameMode.END_MATCH_CONDITION_SCORE);
            }
        };
        GameMode_CaptureTheFlag.prototype.getNumTeams = function () {
            return this.scores.length;
        };
        GameMode_CaptureTheFlag.prototype.getScoreLimit = function () {
            return this.scoreLimit;
        };
        GameMode_CaptureTheFlag.prototype.getPlayersPerTeam = function () {
            return this.playersPerTeam;
        };
        GameMode_CaptureTheFlag.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            _super.prototype.spawnPawn.call(this, _gameModePlayer, _data);
            var char;
            var pos = this.getSpawnPosition(_gameModePlayer);
            if (_gameModePlayer.isUserPlayer()) {
                var loadout = _data;
                this.spawnCharacterFromLoadout(_gameModePlayer, pos.x, pos.y, loadout);
            }
            else {
                char = DinogenArena.GameUtil.GetGameState().createAICharacter(_gameModePlayer.getName(), pos.x, pos.y);
                char.setTeam(_gameModePlayer.getTeam());
                char.addInventoryItem(DinogenArena.InventoryManager.GetRandomItem());
                _gameModePlayer.setController(char.getController());
                this.updateBot(char);
            }
            return char;
        };
        GameMode_CaptureTheFlag.prototype.getSpawnPosition = function (_player) {
            var pos = new Phaser.Point(0, 0);
            var points;
            var index = 0;
            if (!this.matchHasStarted() || this.getSecondsSinceMatchStart() < 15) {
                pos = this.getBestTeamSpawnPosition(_player);
            }
            else {
                pos = this.getBestSpawnPosition(_player);
            }
            return pos;
        };
        GameMode_CaptureTheFlag.prototype.onPawnKill = function (_pawn) {
            _super.prototype.onPawnKill.call(this, _pawn);
        };
        GameMode_CaptureTheFlag.prototype.flagIsAtHome = function (_team) {
            var flag = this.getFlag(_team);
            return !flag.isAwayFromHome();
        };
        GameMode_CaptureTheFlag.prototype.updateBots = function () {
            this.updateTeamBots(0);
            this.updateTeamBots(1);
        };
        GameMode_CaptureTheFlag.prototype.updateTeamBots = function (_team) {
            var pawns = DinogenArena.GameUtil.GetGameState().getLivingBotsForTeam(_team);
            var flag = this.getFlag(_team);
            var enemyFlag = this.getOpposingFlag(_team);
            for (var i = 0; i < pawns.length; i++) {
                var pawn = pawns[i];
                this.updateBot(pawn);
            }
        };
        GameMode_CaptureTheFlag.prototype.updateBot = function (_pawn) {
            var flag = this.getFlag(_pawn.getTeam());
            var enemyFlag = this.getOpposingFlag(_pawn.getTeam());
            var ai = _pawn.getAIController();
            if (_pawn == enemyFlag.getCarrier()) {
                ai.setFollowTargetDistanceThreshold(8);
                ai.setFollowTarget(flag);
            }
            else if (DinogenArena.WilkinUtil.GenerateRandomNumber(1, 3) > 1) {
                ai.setFollowTargetDistanceThreshold(enemyFlag.isBeingCarried() ? DinogenArena.WilkinUtil.GenerateRandomNumber(100, 200) : 8);
                ai.setFollowTarget(enemyFlag);
            }
            else if (flag.isAwayFromHome()) {
                ai.setFollowTargetDistanceThreshold(8);
                ai.setFollowTarget(flag);
            }
            else {
                ai.setFollowTarget(null);
            }
        };
        GameMode_CaptureTheFlag.prototype.onFlagCaptured = function (_pawn) {
            this.addScoreForTeam(_pawn.getTeam());
            var flag = this.getOpposingFlag(_pawn.getTeam());
            var pos = this.getFlagPosition(_pawn.getTeam());
            var flagPos = this.getFlagPosition(flag.getTeam());
            flag.primaryBody.x = flagPos.x;
            flag.primaryBody.y = flagPos.y;
            flag.onCaptured();
            _pawn.getController().onPawnFlagCaptured();
            this.updateBots();
            var sfx = "ui_ctf_flag_captured_" + (_pawn.getTeam() == DinogenArena.GameUtil.GetGameState().getPlayerTeam() ? "ally" : "enemy");
            DinogenArena.SoundManager.PlayUISound(sfx);
            DinogenArena.GameUtil.GetGameState().playerController.getHUD().addToFeed({ type: "default", team: _pawn.getTeam(), text: _pawn.getController().getGameModePlayer().getName() + " captured the flag!" });
        };
        GameMode_CaptureTheFlag.prototype.onFlagPickedUp = function (_pawn, _flag) {
            if (!_pawn.isAlive()) {
                return;
            }
            _flag.onPickedUp(_pawn);
            _pawn.getController().onPawnFlagPickedUp();
            this.updateBots();
            var sfx = "ui_ctf_flag_pickedup_" + (_pawn.getTeam() == DinogenArena.GameUtil.GetGameState().getPlayerTeam() ? "ally" : "enemy");
            DinogenArena.SoundManager.PlayUISound(sfx);
            DinogenArena.GameUtil.GetGameState().playerController.getHUD().addToFeed({ type: "default", team: _pawn.getTeam(), text: _pawn.getController().getGameModePlayer().getName() + " picked up the flag!" });
        };
        GameMode_CaptureTheFlag.prototype.onFlagReturned = function (_pawn) {
            if (!_pawn.isAlive()) {
                return;
            }
            var flag = this.getFlag(_pawn.getTeam());
            if (flag) {
                var flagPos = this.getFlagPosition(flag.getTeam());
                flag.primaryBody.x = flagPos.x;
                flag.primaryBody.y = flagPos.y;
                flag.onReturned();
            }
            _pawn.getController().onPawnFlagReturned();
            this.updateBots();
            var sfx = "ui_ctf_flag_returned_" + (_pawn.getTeam() == DinogenArena.GameUtil.GetGameState().getPlayerTeam() ? "ally" : "enemy");
            DinogenArena.SoundManager.PlayUISound(sfx);
            DinogenArena.GameUtil.GetGameState().playerController.getHUD().addToFeed({ type: "default", team: _pawn.getTeam(), text: _pawn.getController().getGameModePlayer().getName() + " returned the flag!" });
        };
        GameMode_CaptureTheFlag.prototype.onFlagDropped = function (_pawn) {
            var flag = this.getOpposingFlag(_pawn.getTeam());
            if (flag) {
                flag.onDropped();
            }
            _pawn.getController().onPawnFlagDropped();
            this.updateBots();
            DinogenArena.GameUtil.GetGameState().playerController.getHUD().addToFeed({ type: "default", team: _pawn.getTeam(), text: _pawn.getController().getGameModePlayer().getName() + " dropped the flag!" });
        };
        GameMode_CaptureTheFlag.prototype.setFlag = function (_team, _flag) {
            if (!this.flags) {
                this.flags = [];
            }
            this.flags[_team] = _flag;
        };
        GameMode_CaptureTheFlag.prototype.getFlag = function (_team) {
            return this.flags[_team];
        };
        GameMode_CaptureTheFlag.prototype.getOpposingFlag = function (_team) {
            return this.flags[_team == 0 ? 1 : 0];
        };
        GameMode_CaptureTheFlag.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            _pawn.getController().getGameModePlayer().setWantsToRespawn();
        };
        return GameMode_CaptureTheFlag;
    }(CustomGameMode));
    DinogenArena.GameMode_CaptureTheFlag = GameMode_CaptureTheFlag;
    var GameMode_KingOfTheHill = /** @class */ (function (_super) {
        __extends(GameMode_KingOfTheHill, _super);
        function GameMode_KingOfTheHill() {
            var _this = _super.call(this, DinogenArena.GameModeManager.GAME_MODE_KING_OF_THE_HILL) || this;
            _this.scoreLimit = 60;
            _this.players = 1;
            return _this;
        }
        GameMode_KingOfTheHill.prototype.destroy = function () {
            this.hillZone = null;
            _super.prototype.destroy.call(this);
        };
        GameMode_KingOfTheHill.prototype.setFromData = function (_data) {
            _super.prototype.setFromData.call(this, _data);
            this.players = _data["players"];
            this.scoreLimit = _data["scoreLimit"] * DinogenArena.GameUtil.frameRate;
        };
        GameMode_KingOfTheHill.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.matchIsInProgress()) {
            }
        };
        GameMode_KingOfTheHill.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            var pos = this.getHillZonePosition();
            this.hillZone = DinogenArena.GameUtil.GetGameState().createHillZone(pos.x, pos.y);
            var player = this.addPlayer(DinogenArena.PlayerManager.CurrentProfile.name, 0, true);
            player.respawn();
            this.createBots();
        };
        GameMode_KingOfTheHill.prototype.handleMatchHasStarted = function () {
            _super.prototype.handleMatchHasStarted.call(this);
            var pc = DinogenArena.GameUtil.GetGameState().playerController;
            pc.getHUD().addObjectiveArrow({ worldObject: this.hillZone });
        };
        GameMode_KingOfTheHill.prototype.getHillZone = function () {
            return this.hillZone;
        };
        GameMode_KingOfTheHill.prototype.getHillZonePosition = function () {
            var hillPoint = DinogenArena.GameUtil.GetGameState().mapData["hillPoint"];
            if (hillPoint) {
                return new Phaser.Point(hillPoint.x, hillPoint.y);
            }
            return new Phaser.Point(DinogenArena.GameUtil.game.world.width * 0.5, DinogenArena.GameUtil.game.world.height * 0.5);
        };
        GameMode_KingOfTheHill.prototype.onPawnAddHillPoint = function (_gmp) {
            if (this.matchIsInProgress()) {
                this.sortPlayers();
                if (_gmp.getHillPoints() > this.getScoreLimit()) {
                    this.endMatch(GameMode.END_MATCH_CONDITION_SCORE);
                }
            }
        };
        GameMode_KingOfTheHill.prototype.getMatchResult = function () {
            /* TODO: Check for draw */
            if (this.getPlaceForPlayer(this.getUserPlayer()) == 1) {
                this.result = GameMode.RESULT_WIN;
            }
            else {
                this.result = GameMode.RESULT_LOSS;
            }
        };
        GameMode_KingOfTheHill.prototype.comparePlayers = function (_a, _b) {
            if (_a.hillPoints < _b.hillPoints) {
                return 1;
            }
            if (_a.hillPoints > _b.hillPoints) {
                return -1;
            }
            return 0;
        };
        GameMode_KingOfTheHill.prototype.getScoreLimit = function () {
            return this.scoreLimit;
        };
        GameMode_KingOfTheHill.prototype.createBots = function () {
            for (var i = 0; i < this.players - 1; i++) {
                var player = this.addPlayer(DinogenArena.GameModeManager.GetBotName(), i + 1, false);
                player.respawn();
            }
        };
        GameMode_KingOfTheHill.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            if (this.gamePlayers.length >= this.players) {
                this.removeBot();
            }
            return _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
        };
        GameMode_KingOfTheHill.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            _super.prototype.spawnPawn.call(this, _gameModePlayer, _data);
            var char;
            var pos = this.getSpawnPosition(_gameModePlayer);
            if (_gameModePlayer.isUserPlayer()) {
                var loadout = _data;
                this.spawnCharacterFromLoadout(_gameModePlayer, pos.x, pos.y, loadout);
            }
            else {
                char = DinogenArena.GameUtil.GetGameState().createAICharacter(_gameModePlayer.getName(), pos.x, pos.y);
                char.setTeam(_gameModePlayer.getTeam());
                char.addInventoryItem(DinogenArena.InventoryManager.GetRandomItem());
                _gameModePlayer.setController(char.getController());
                var ai = char.getAIController();
                if (ai) {
                    ai.setFollowTarget(this.getHillZone());
                }
            }
            return char;
        };
        GameMode_KingOfTheHill.prototype.onPawnKill = function (_pawn) {
            _super.prototype.onPawnKill.call(this, _pawn);
        };
        GameMode_KingOfTheHill.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            _pawn.getController().getGameModePlayer().setWantsToRespawn();
        };
        return GameMode_KingOfTheHill;
    }(CustomGameMode));
    DinogenArena.GameMode_KingOfTheHill = GameMode_KingOfTheHill;
    var GameMode_Rex = /** @class */ (function (_super) {
        __extends(GameMode_Rex, _super);
        function GameMode_Rex(_id) {
            if (_id === void 0) { _id = DinogenArena.GameModeManager.GAME_MODE_REX; }
            var _this = _super.call(this, _id) || this;
            _this.setNumTeams(2);
            _this.teams = [{ team: 0, race: "human" }, { team: 1, race: "dinosaur" }];
            _this.bSetPawnTeamColour = false;
            _this.bTeamGame = true;
            return _this;
        }
        GameMode_Rex.prototype.sortPlayers = function () {
            this.gamePlayers.sort(this.comparePlayers);
        };
        GameMode_Rex.prototype.setFromData = function (_data) {
            _super.prototype.setFromData.call(this, _data);
            this.humanPlayers = _data["players"];
            this.humanLives = _data["scoreLimit"];
        };
        GameMode_Rex.prototype.getHumanLives = function () {
            return this.humanLives;
        };
        GameMode_Rex.prototype.handleMatchIsWaitingToStart = function () {
            _super.prototype.handleMatchIsWaitingToStart.call(this);
            var data = {};
            if (this.teams) {
                data["teams"] = this.teams;
            }
            else {
                var teams = [];
                for (var i = 0; i < this.scores.length; i++) {
                    teams.push({ team: i, race: "human" });
                }
                data["teams"] = teams;
            }
            this.createTeamSelectMenu(data);
            this.createBots();
        };
        GameMode_Rex.prototype.getMatchResult = function () {
            if (this.getWinningTeam() < 0) {
                this.result = GameMode.RESULT_DRAW;
            }
            else if (this.getWinningTeam() == this.getUserPlayer().getTeam()) {
                this.result = GameMode.RESULT_WIN;
            }
            else {
                this.result = GameMode.RESULT_LOSS;
            }
        };
        GameMode_Rex.prototype.createBots = function () {
            var cur = this.getNumPlayersForTeam(0);
            for (var i = 0; i < (this.humanPlayers - cur); i++) {
                var player = this.addPlayer(DinogenArena.GameModeManager.GetBotName("human"), 0, false);
                player.respawn();
            }
            if (this.getNumPlayersForTeam(1) == 0) {
                player = this.addPlayer(DinogenArena.GameModeManager.GetBotName("dinosaur"), 1, false);
                player.respawn();
            }
        };
        GameMode_Rex.prototype.addPlayer = function (_name, _team, _bUserPlayer, _data) {
            if (_data === void 0) { _data = null; }
            if (_team == 0) {
                if (this.getNumPlayersForTeam(_team) >= this.humanPlayers) {
                    this.removeBotFromTeam(0);
                }
            }
            else if (_team == 1) {
                if (this.getNumPlayersForTeam(_team) >= 1) {
                    this.removeBotFromTeam(1);
                }
            }
            return _super.prototype.addPlayer.call(this, _name, _team, _bUserPlayer, _data);
        };
        GameMode_Rex.prototype.setNumTeams = function (_val) {
            this.scores = [];
            for (var i = 0; i < _val; i++) {
                this.scores.push(0);
            }
        };
        GameMode_Rex.prototype.getWinningTeam = function () {
            if (this.humanLives <= 0) {
                return 1;
            }
            else if (this.scores[1] >= 1) {
                return 0;
            }
            return -1;
        };
        GameMode_Rex.prototype.getScoreForTeam = function (_index) {
            return this.scores[_index];
        };
        GameMode_Rex.prototype.addScoreForTeam = function (_index) {
            if (!this.matchIsInProgress()) {
                return;
            }
            this.scores[_index] += 1;
        };
        GameMode_Rex.prototype.getNumTeams = function () {
            return this.scores.length;
        };
        GameMode_Rex.prototype.getScoreLimit = function () {
            return this.humanLives;
        };
        GameMode_Rex.prototype.getPlayersPerTeam = function () {
            return this.humanPlayers;
        };
        GameMode_Rex.prototype.spawnPawn = function (_gameModePlayer, _data) {
            if (_data === void 0) { _data = null; }
            var pawn;
            var char;
            var dino;
            var team = _gameModePlayer.getTeam();
            var pos = this.getSpawnPosition(_gameModePlayer);
            if (_gameModePlayer.isUserPlayer()) {
                if (team == 0) {
                    var loadout = _data;
                    this.spawnCharacterFromLoadout(_gameModePlayer, pos.x, pos.y, loadout);
                    pawn = _gameModePlayer.getController().getPawn();
                }
                else if (team == 1) {
                    dino = DinogenArena.GameUtil.GetGameState().createPlayerDinosaur(pos.x, pos.y, DinogenArena.Dinosaur.TYPE_TREX);
                    dino.setTeam(_gameModePlayer.getTeam());
                    var pc = DinogenArena.GameUtil.GetGameState().playerController;
                    _gameModePlayer.setController(pc);
                    pawn = dino;
                }
            }
            else {
                if (team == 0) {
                    char = DinogenArena.GameUtil.GetGameState().createAICharacter(_gameModePlayer.getName(), pos.x, pos.y);
                    char.setTeam(_gameModePlayer.getTeam());
                    char.addInventoryItem(DinogenArena.InventoryManager.GetRandomItem());
                    _gameModePlayer.setController(char.getController());
                    pawn = char;
                }
                else if (team == 1) {
                    dino = DinogenArena.GameUtil.GetGameState().createAIDinosaur(_gameModePlayer.getName(), pos.x, pos.y, DinogenArena.Dinosaur.TYPE_TREX);
                    dino.setTeam(_gameModePlayer.getTeam());
                    _gameModePlayer.setController(dino.getController());
                    pawn = dino;
                }
            }
            if (dino) {
                //dino.setRegenHealth(false);
                var healthMult = 2 * (1 + (this.humanPlayers * 0.25));
                dino.setHealthModifier(healthMult);
            }
            if (_gameModePlayer.isUserPlayer()) {
                this.onUserPlayerSpawned();
            }
            return pawn;
        };
        GameMode_Rex.prototype.getSpawnPosition = function (_player) {
            var pos = new Phaser.Point(0, 0);
            var points;
            var index = 0;
            if (!this.matchHasStarted() || this.getSecondsSinceMatchStart() < 15) {
                pos = this.getBestTeamSpawnPosition(_player);
            }
            else {
                pos = this.getBestSpawnPosition(_player);
            }
            return pos;
        };
        GameMode_Rex.prototype.onPawnKill = function (_pawn) {
            _super.prototype.onPawnKill.call(this, _pawn);
            this.addScoreForTeam(_pawn.getTeam());
        };
        GameMode_Rex.prototype.onPawnDeath = function (_pawn, _instigator, _causer, _damageType) {
            _super.prototype.onPawnDeath.call(this, _pawn, _instigator, _causer, _damageType);
            _pawn.getController().getGameModePlayer().setWantsToRespawn();
            if (_pawn.getTeam() == 0) {
                this.humanLives--;
            }
            else {
                this.endMatch(GameMode.END_MATCH_CONDITION_REX_KILLED);
            }
            if (this.humanLives <= 0) {
                this.endMatch(GameMode.END_MATCH_CONDITION_REX_WINS);
            }
        };
        return GameMode_Rex;
    }(CustomGameMode));
    DinogenArena.GameMode_Rex = GameMode_Rex;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var IntroState = /** @class */ (function (_super) {
        __extends(IntroState, _super);
        function IntroState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntroState.prototype.create = function () {
            this.container = this.game.add.group();
            var gfx = this.game.add.graphics(0, 0);
            gfx.beginFill(0x000000, 1);
            gfx.drawRect(0, 0, this.game.width, this.game.height);
            this.bg = this.game.add.sprite(0, 0, gfx.generateTexture());
            gfx.destroy();
            this.container.add(this.bg);
            this.items = this.game.add.group();
            this.container.add(this.items);
            var xPadding = this.bg.width * 0.35;
            var yPadding = 18;
            this.logoTop = this.game.add.image(0, 0, "xwilkinx_logo_half");
            this.logoTop.alpha = 0;
            this.logoTop.anchor.set(0.5, 0.5);
            this.logoTop.x = (this.bg.width * 0.5) - xPadding;
            this.logoTop.y = (this.bg.height * 0.5) - yPadding;
            this.items.add(this.logoTop);
            this.logoBottom = this.game.add.image(0, 0, "xwilkinx_logo_half");
            this.logoBottom.alpha = 0;
            this.logoBottom.anchor.set(0.5, 0.5);
            this.logoBottom.rotation = 180 * DinogenArena.WilkinUtil.TO_RADIANS;
            this.logoBottom.x = (this.bg.width * 0.5) + xPadding;
            this.logoBottom.y = (this.bg.height * 0.5) + yPadding;
            this.items.add(this.logoBottom);
            this.wilkinText = this.game.add.text(0, 0, "XWILKINX", { font: "22px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            this.wilkinText.alpha = 0;
            this.wilkinText.anchor.set(0.5, 0.5);
            this.wilkinText.x = this.bg.width * 0.5;
            this.wilkinText.y = this.game.height; //this.logoBottom.y + this.logoBottom.height + 30;
            this.items.add(this.wilkinText);
            this.gamesText = this.game.add.text(0, 0, "GAME DEVELOPMENT", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            this.gamesText.alpha = 0;
            this.gamesText.anchor.set(0.5, 0.5);
            this.gamesText.x = this.wilkinText.x;
            this.gamesText.y = this.wilkinText.y;
            this.items.add(this.gamesText);
            this.start();
            this.bg.inputEnabled = true;
            this.bg.events.onInputUp.add(this.onClicked, this);
            DinogenArena.GameUtil.game.fadeFromBlack();
        };
        IntroState.prototype.onClicked = function () {
            DinogenArena.GameUtil.OpenWilkinHomepage();
        };
        IntroState.prototype.start = function () {
            DinogenArena.SoundManager.PlayUISound("ui_xwilkinx");
            var speed = 1000;
            var delay = 250;
            var tween = this.game.add.tween(this.logoTop).to({ x: this.bg.width * 0.5 }, speed, Phaser.Easing.Exponential.Out, true);
            var tween = this.game.add.tween(this.logoTop).to({ alpha: 1 }, speed, Phaser.Easing.Exponential.Out, true);
            var tween = this.game.add.tween(this.logoBottom).to({ x: this.bg.width * 0.5 }, speed, Phaser.Easing.Exponential.Out, true);
            var tween = this.game.add.tween(this.logoBottom).to({ alpha: 1 }, speed, Phaser.Easing.Exponential.Out, true);
            var desiredWilkinTextY = (this.logoBottom.y + (this.logoBottom.height * 0.5)) + 20;
            var tween = this.game.add.tween(this.wilkinText).to({ alpha: 1 }, speed, Phaser.Easing.Exponential.Out, true, delay);
            var tween = this.game.add.tween(this.wilkinText).to({ y: desiredWilkinTextY }, speed, Phaser.Easing.Exponential.Out, true, delay);
            var tween = this.game.add.tween(this.gamesText).to({ alpha: 0.5 }, speed, Phaser.Easing.Exponential.Out, true, delay * 2);
            var tween = this.game.add.tween(this.gamesText).to({ y: desiredWilkinTextY + (this.wilkinText.height * 0.5) }, speed, Phaser.Easing.Exponential.Out, true, delay * 2);
            tween.onComplete.addOnce(this.onTweenComplete, this, 0, "tween_3");
        };
        IntroState.prototype.end = function () {
            var tween = this.game.add.tween(this.items).to({ alpha: 0 }, 3000, Phaser.Easing.Quintic.InOut, true);
            tween.onComplete.addOnce(this.onTweenComplete, this, 0, "tween_4");
        };
        IntroState.prototype.onTweenComplete = function (_currentTarget, _currentTween, _id) {
            if (_id == "tween_3") {
                var timer = this.game.time.create(true);
                timer.add(500, this.end, this);
                timer.start();
            }
            else if (_id == "tween_4") {
                DinogenArena.GameUtil.game.loadMainMenu(null);
            }
        };
        return IntroState;
    }(Phaser.State));
    DinogenArena.IntroState = IntroState;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var Inventory = /** @class */ (function () {
        function Inventory() {
            this.maxItems = 2;
            this.items = [];
        }
        Inventory.prototype.toArray = function () {
            var arr = [];
            for (var i = 0; i < this.items.length; i++) {
                arr.push(this.items[i].toObject());
            }
            return arr;
        };
        Inventory.prototype.hasBow = function () {
            return this.hasItem(DinogenArena.InventoryManager.ITEM_FIREARM_BOW) || this.hasItem(DinogenArena.InventoryManager.ITEM_FIREARM_CROSSBOW) || this.hasItem(DinogenArena.InventoryManager.ITEM_FIREARM_QUADRA);
        };
        Inventory.prototype.hasSniper = function () {
            return this.hasItemType(Firearm.TYPE_SNIPER);
        };
        Inventory.prototype.getBowInventoryIndex = function () {
            var index = this.getItemIndex(DinogenArena.InventoryManager.ITEM_FIREARM_BOW);
            if (index >= 0) {
                return index;
            }
            index = this.getItemIndex(DinogenArena.InventoryManager.ITEM_FIREARM_CROSSBOW);
            if (index >= 0) {
                return index;
            }
            index = this.getItemIndex(DinogenArena.InventoryManager.ITEM_FIREARM_QUADRA);
            return index;
        };
        Inventory.prototype.hasItem = function (_id) {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].getId() == _id) {
                    return true;
                }
            }
            return false;
        };
        Inventory.prototype.hasItemType = function (_id) {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].getFirearmType() == _id) {
                    return true;
                }
            }
            return false;
        };
        Inventory.prototype.getItemIndex = function (_id) {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].getId() == _id) {
                    return i;
                }
            }
            return -1;
        };
        Inventory.prototype.addItem = function (_item, _index) {
            if (_index === void 0) { _index = -1; }
            if (!this.hasItem(_item.getId())) {
                if (_index >= 0) {
                    this.items.splice(_index, 0, _item);
                }
                else {
                    this.items.push(_item);
                }
            }
        };
        Inventory.prototype.clearItems = function () {
            while (this.items.length > 0) {
                this.items.splice(0, 1);
            }
        };
        Inventory.prototype.setItemAt = function (_index, _item) {
            console.log(_item);
            this.removeItemAt(_index);
            this.addItem(_item.clone(), _index);
            console.log(this.items);
        };
        Inventory.prototype.getItemAt = function (_index) {
            if (_index >= this.items.length) {
                return null;
            }
            return this.items[_index];
        };
        Inventory.prototype.removeItemAt = function (_index) {
            this.items.splice(_index, 1);
        };
        Inventory.prototype.getLength = function () {
            return this.items.length;
        };
        Inventory.prototype.hasInventorySpace = function () {
            return this.items.length < this.maxItems;
        };
        Inventory.prototype.refillAmmo = function () {
            var i;
            for (i = 0; i < this.items.length; i++) {
                var firearm = this.items[i];
                firearm.addAmmo(Math.min(firearm.getMagMax() * 5, 150));
            }
        };
        Inventory.prototype.hasAnyAmmo = function () {
            for (var i = 0; i < this.items.length; i++) {
                var firearm = this.items[i];
                if (firearm) {
                    if (firearm.hasAnyAmmo()) {
                        return true;
                    }
                }
            }
            return false;
        };
        Inventory.prototype.getAll = function () {
            return this.items;
        };
        Inventory.prototype.destroy = function () {
            this.clearItems();
            this.items = null;
        };
        return Inventory;
    }());
    DinogenArena.Inventory = Inventory;
    var Firearm = /** @class */ (function () {
        function Firearm(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            this.unlockLevel = 1;
            this.speedMultiplier = 1;
            this.viewMultiplier = 1;
            this.recoil = -1;
            this.roundType = Firearm.ROUND_9MM;
            this.projectileType = DinogenArena.ProjectileBase.TYPE_BULLET;
            this.bEjectShell = true;
            this.bSingleRoundLoaded = false;
            this.bBoltAction = false;
            this.bSurvivalOnly = false;
            this.type = "TYPE_FIREARM";
            this.setUnlockLevel(_unlockLevel);
        }
        Firearm.prototype.toObject = function () {
            return {
                id: this.id,
                mag: this.mag,
                ammo: this.ammo
            };
        };
        Firearm.prototype.getType = function () {
            return this.type;
        };
        Firearm.prototype.setUnlockLevel = function (_val) {
            this.unlockLevel = _val;
        };
        Firearm.prototype.getUnlockLevel = function () {
            return this.unlockLevel;
        };
        Firearm.prototype.getId = function () {
            return this.id;
        };
        Firearm.prototype.getName = function () {
            return this.name;
        };
        Firearm.prototype.getAmmoString = function () {
            return this.mag + " / " + this.ammo;
        };
        Firearm.prototype.setRecoil = function (_val) {
            this.recoil = _val;
        };
        Firearm.prototype.getRecoil = function () {
            if (this.recoil >= 0) {
                return this.recoil;
            }
            return this.getDamage() * 0.2;
        };
        Firearm.prototype.setDamage = function (_val) {
            this.damage = _val;
        };
        Firearm.prototype.getDamage = function () {
            return this.damage;
        };
        Firearm.prototype.getSpeedMultiplier = function () {
            return this.speedMultiplier;
        };
        Firearm.prototype.getViewMultiplier = function () {
            return this.viewMultiplier;
        };
        Firearm.prototype.getFireModeString = function () {
            if (this.bBoltAction) {
                return this.isShotgun() ? "Pump-Action" : "Bolt-Action";
            }
            if (this.fireMode == Firearm.FIRE_MODE_AUTO) {
                return "Full Auto";
            }
            else if (this.fireMode == Firearm.FIRE_MODE_BURST) {
                return "3-Round Burst";
            }
            else if (this.fireMode == Firearm.FIRE_MODE_SEMI) {
                return this.getMagMax() == 1 ? "Single Fire" : "Semi-Automatic";
            }
            return null;
        };
        Firearm.prototype.getValue = function () {
            return this.value;
        };
        Firearm.prototype.getCost = function () {
            return this.cost;
        };
        Firearm.prototype.calculate = function () {
            this.value = Math.min(this.damage, 200) * this.magMax;
            if (this.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_MINIGUN) {
                this.cost = 100000;
            }
            else if (this.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_JACKHAMMER) {
                this.cost = 25000;
            }
            else if (this.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_SAMR) {
                this.cost = 25000;
            }
            else if (this.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_SCARL) {
                this.cost = 25000;
            }
            else if (this.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_AUGPARA) {
                this.cost = 25000;
            }
            else if (this.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_QUADRA) {
                this.cost = 25000;
            }
            else if (this.getId() == DinogenArena.InventoryManager.ITEM_FIREARM_MAGNUM500) {
                this.cost = 25000;
            }
            else {
                this.cost = (this.value * 0.15) * (this.unlockLevel * 5) * (this.isShotgun() ? 2 : 1);
            }
            this.cost = Math.ceil(this.cost / 100) * 100;
        };
        Firearm.prototype.getAmmoCost = function () {
            var roundMult = 1;
            if (this.roundType == Firearm.ROUND_12G) {
                roundMult = 2.5;
            }
            else if (this.roundType == Firearm.ROUND_50CAL) {
                roundMult = 4;
            }
            else if (this.roundType == Firearm.ROUND_44) {
                roundMult = 4;
            }
            else if (this.roundType == Firearm.ROUND_762MM) {
                roundMult = 1.5;
            }
            if (this.isSniper() || this.isShotgun()) {
                roundMult *= 3;
            }
            else if (this.isLMG()) {
                roundMult *= 2;
            }
            else if (this.isRifle()) {
                roundMult *= 1.5;
            }
            var val;
            if (this.projectileType == DinogenArena.ProjectileBase.TYPE_ROCKET) {
                val = 300;
            }
            else if (this.projectileType == DinogenArena.ProjectileBase.TYPE_GRENADE) {
                val = 150;
            }
            else {
                val = Math.ceil((this.getMagMax() * 0.5) * roundMult);
            }
            return Math.ceil(val / 5) * 5;
        };
        Firearm.prototype.getProjectileType = function () {
            return this.projectileType;
        };
        Firearm.prototype.setMagMax = function (_val) {
            this.magMax = _val;
            this.mag = this.magMax;
        };
        Firearm.prototype.setAmmoMags = function (_val) {
            this.setAmmoMax(this.magMax * _val);
        };
        Firearm.prototype.setAmmoMax = function (_val) {
            this.ammoMax = _val;
            this.ammo = this.ammoMax;
        };
        Firearm.prototype.setMag = function (_val) {
            this.mag = _val;
        };
        Firearm.prototype.addMag = function (_val) {
            this.mag += _val;
        };
        Firearm.prototype.getMag = function () {
            return this.mag;
        };
        Firearm.prototype.getMagMax = function () {
            return this.magMax;
        };
        Firearm.prototype.setAmmo = function (_val) {
            this.ammo = _val;
        };
        Firearm.prototype.addAmmo = function (_val) {
            this.ammo += _val;
            this.ammo = Math.min(this.ammo, 9999);
        };
        Firearm.prototype.getAmmo = function () {
            return this.ammo;
        };
        Firearm.prototype.getAmmoMax = function () {
            return this.ammoMax;
        };
        Firearm.prototype.getFireMode = function () {
            return this.fireMode;
        };
        Firearm.prototype.getFireRate = function () {
            return this.fireRate;
        };
        Firearm.prototype.getBurstFireRate = function () {
            return this.burstFireRate;
        };
        Firearm.prototype.setBursts = function (_bursts) {
            this.bursts = _bursts;
        };
        Firearm.prototype.useMag = function () {
            if (this.mag > 0) {
                this.mag--;
            }
        };
        Firearm.prototype.useBurst = function () {
            if (this.bursts > 0) {
                this.bursts--;
            }
        };
        Firearm.prototype.getBursts = function () {
            return this.bursts;
        };
        Firearm.prototype.getAccuracy = function () {
            return this.accuracy;
        };
        Firearm.prototype.hasMag = function () {
            return this.mag > 0;
        };
        Firearm.prototype.hasAmmo = function () {
            return this.ammo > 0;
        };
        Firearm.prototype.needsReload = function () {
            if (this.magMax == 1) {
                return false;
            }
            return this.mag <= Math.ceil(this.magMax * 0.3) && this.ammo > 0;
        };
        Firearm.prototype.hasAnyAmmo = function () {
            return this.hasMag() || this.hasAmmo();
        };
        Firearm.prototype.getRoundType = function () {
            return this.roundType;
        };
        Firearm.prototype.getReloadTime = function () {
            return this.reloadTime;
        };
        Firearm.prototype.setFirearmType = function (_val) {
            this.firearmType = _val;
            if (_val == Firearm.TYPE_LMG) {
                this.speedMultiplier = 0.7;
                this.viewMultiplier = 1.35;
            }
            else if (_val == Firearm.TYPE_SNIPER) {
                this.speedMultiplier = 0.7;
                this.viewMultiplier = 2;
            }
            else if (_val == Firearm.TYPE_RIFLE) {
                this.speedMultiplier = 0.9;
                this.viewMultiplier = 1.5;
            }
            else if (_val == Firearm.TYPE_SMG) {
                this.viewMultiplier = 1.2;
            }
            else if (_val == Firearm.TYPE_LAUNCHER) {
                this.speedMultiplier = 0.9;
                this.viewMultiplier = 1.35;
            }
        };
        Firearm.prototype.getFirearmType = function () {
            return this.firearmType;
        };
        Firearm.prototype.isSurvivalOnly = function () {
            return this.bSurvivalOnly;
        };
        Firearm.prototype.isBurstFire = function () {
            return this.fireMode == Firearm.FIRE_MODE_BURST;
        };
        Firearm.prototype.isLMG = function () {
            return this.firearmType == Firearm.TYPE_LMG;
        };
        Firearm.prototype.isShotgun = function () {
            return this.firearmType == Firearm.TYPE_SHOTGUN;
        };
        Firearm.prototype.isMagnum = function () {
            return this.id == DinogenArena.InventoryManager.ITEM_FIREARM_MAGNUM || this.id == DinogenArena.InventoryManager.ITEM_FIREARM_MAGNUM500;
        };
        Firearm.prototype.isSniper = function () {
            return this.firearmType == Firearm.TYPE_SNIPER;
        };
        Firearm.prototype.isBow = function () {
            return this.id == DinogenArena.InventoryManager.ITEM_FIREARM_BOW || this.id == DinogenArena.InventoryManager.ITEM_FIREARM_CROSSBOW;
        };
        Firearm.prototype.isLauncher = function () {
            return this.firearmType == Firearm.TYPE_LAUNCHER;
        };
        Firearm.prototype.isPistol = function () {
            return this.firearmType == Firearm.TYPE_PISTOL;
        };
        Firearm.prototype.isRifle = function () {
            return this.firearmType == Firearm.TYPE_RIFLE;
        };
        Firearm.prototype.ejectsShell = function () {
            return this.bEjectShell;
        };
        Firearm.prototype.isSingleRoundLoaded = function () {
            return this.bSingleRoundLoaded;
        };
        Firearm.prototype.clone = function () {
            var item = new Firearm(this.unlockLevel);
            item.projectileType = this.projectileType;
            item.type == this.type;
            item.firearmType = this.firearmType;
            item.unlockLevel = this.unlockLevel;
            item.value = this.value;
            item.cost = this.cost;
            item.id = this.id;
            item.name = this.name;
            item.damage = this.damage;
            item.speedMultiplier = this.speedMultiplier;
            item.viewMultiplier = this.viewMultiplier;
            item.mag = this.mag;
            item.magMax = this.magMax;
            item.ammo = this.ammo;
            item.ammoMax = this.ammoMax;
            item.fireMode = this.fireMode;
            item.fireRate = this.fireRate;
            item.bursts = this.bursts;
            item.burstFireRate = this.burstFireRate;
            item.accuracy = this.accuracy;
            item.roundType = this.roundType;
            item.reloadTime = this.reloadTime;
            item.recoil = this.recoil;
            item.firearmType = this.firearmType;
            item.bEjectShell = this.bEjectShell;
            item.bSingleRoundLoaded = this.bSingleRoundLoaded;
            item.bBoltAction = this.bBoltAction;
            item.bSurvivalOnly = this.bSurvivalOnly;
            return item;
        };
        Firearm.FIRE_MODE_SEMI = "semi";
        Firearm.FIRE_MODE_BURST = "burst";
        Firearm.FIRE_MODE_AUTO = "auto";
        Firearm.ROUND_9MM = "9mm";
        Firearm.ROUND_762MM = "762mm";
        Firearm.ROUND_556MM = "556mm";
        Firearm.ROUND_45ACP = "45acp";
        Firearm.ROUND_12G = "12g";
        Firearm.ROUND_50CAL = "50cal";
        Firearm.ROUND_44 = "50cal";
        Firearm.TYPE_LAUNCHER = "launcher";
        Firearm.TYPE_RIFLE = "rifle";
        Firearm.TYPE_SNIPER = "sniper";
        Firearm.TYPE_SMG = "smg";
        Firearm.TYPE_SHOTGUN = "shotgun";
        Firearm.TYPE_PISTOL = "pistol";
        Firearm.TYPE_LMG = "lmg";
        return Firearm;
    }());
    DinogenArena.Firearm = Firearm;
    var Firearm_MP5 = /** @class */ (function (_super) {
        __extends(Firearm_MP5, _super);
        function Firearm_MP5(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_MP5;
            _this.name = "MP5";
            _this.setFirearmType(Firearm.TYPE_SMG);
            _this.setDamage(15);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 4;
            _this.roundType = Firearm.ROUND_9MM;
            _this.accuracy = 5;
            _this.reloadTime = 70;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_MP5;
    }(Firearm));
    DinogenArena.Firearm_MP5 = Firearm_MP5;
    var Firearm_AK74U = /** @class */ (function (_super) {
        __extends(Firearm_AK74U, _super);
        function Firearm_AK74U(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_AK74U;
            _this.name = "AK74u";
            _this.setFirearmType(Firearm.TYPE_SMG);
            _this.setDamage(22);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 5;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 7;
            _this.reloadTime = 65;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_AK74U;
    }(Firearm));
    DinogenArena.Firearm_AK74U = Firearm_AK74U;
    var Firearm_UMP45 = /** @class */ (function (_super) {
        __extends(Firearm_UMP45, _super);
        function Firearm_UMP45(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_UMP45;
            _this.name = "UMP-45";
            _this.setFirearmType(Firearm.TYPE_SMG);
            _this.setDamage(19);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 6;
            _this.roundType = Firearm.ROUND_45ACP;
            _this.accuracy = 4;
            _this.reloadTime = 55;
            _this.setMagMax(25);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_UMP45;
    }(Firearm));
    DinogenArena.Firearm_UMP45 = Firearm_UMP45;
    var Firearm_MP7 = /** @class */ (function (_super) {
        __extends(Firearm_MP7, _super);
        function Firearm_MP7(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_MP7;
            _this.name = "MP7";
            _this.setFirearmType(Firearm.TYPE_SMG);
            _this.setDamage(17);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 3;
            _this.roundType = Firearm.ROUND_9MM;
            _this.accuracy = 5;
            _this.reloadTime = 75;
            _this.setMagMax(32);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_MP7;
    }(Firearm));
    DinogenArena.Firearm_MP7 = Firearm_MP7;
    var Firearm_P90 = /** @class */ (function (_super) {
        __extends(Firearm_P90, _super);
        function Firearm_P90(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_P90;
            _this.name = "P90";
            _this.setFirearmType(Firearm.TYPE_SMG);
            _this.setDamage(15);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 3;
            _this.roundType = Firearm.ROUND_9MM;
            _this.accuracy = 4;
            _this.reloadTime = 95;
            _this.setMagMax(50);
            _this.setAmmoMags(2);
            return _this;
        }
        return Firearm_P90;
    }(Firearm));
    DinogenArena.Firearm_P90 = Firearm_P90;
    var Firearm_AK47 = /** @class */ (function (_super) {
        __extends(Firearm_AK47, _super);
        function Firearm_AK47(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_AK47;
            _this.name = "AK47";
            _this.setFirearmType(Firearm.TYPE_RIFLE);
            _this.setDamage(28);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 6;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 4;
            _this.reloadTime = 120;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_AK47;
    }(Firearm));
    DinogenArena.Firearm_AK47 = Firearm_AK47;
    var Firearm_M16A4 = /** @class */ (function (_super) {
        __extends(Firearm_M16A4, _super);
        function Firearm_M16A4(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_M16A4;
            _this.name = "M16A4";
            _this.setFirearmType(Firearm.TYPE_RIFLE);
            _this.setDamage(23);
            _this.fireMode = Firearm.FIRE_MODE_BURST;
            _this.fireRate = 4;
            _this.roundType = Firearm.ROUND_556MM;
            _this.burstFireRate = 24;
            _this.bursts = 3;
            _this.accuracy = 2;
            _this.reloadTime = 90;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_M16A4;
    }(Firearm));
    DinogenArena.Firearm_M16A4 = Firearm_M16A4;
    var Firearm_M4 = /** @class */ (function (_super) {
        __extends(Firearm_M4, _super);
        function Firearm_M4(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_M4;
            _this.name = "M4A1";
            _this.setFirearmType(Firearm.TYPE_RIFLE);
            _this.setDamage(20);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 6;
            _this.roundType = Firearm.ROUND_556MM;
            _this.accuracy = 3;
            _this.reloadTime = 110;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_M4;
    }(Firearm));
    DinogenArena.Firearm_M4 = Firearm_M4;
    var Firearm_TAR21 = /** @class */ (function (_super) {
        __extends(Firearm_TAR21, _super);
        function Firearm_TAR21(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_TAR21;
            _this.name = "TAR-21";
            _this.setFirearmType(Firearm.TYPE_RIFLE);
            _this.setDamage(20);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 4;
            _this.roundType = Firearm.ROUND_556MM;
            _this.accuracy = 4;
            _this.reloadTime = 80;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_TAR21;
    }(Firearm));
    DinogenArena.Firearm_TAR21 = Firearm_TAR21;
    var Firearm_FAMAS = /** @class */ (function (_super) {
        __extends(Firearm_FAMAS, _super);
        function Firearm_FAMAS(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_FAMAS;
            _this.name = "FAMAS";
            _this.setFirearmType(Firearm.TYPE_RIFLE);
            _this.setDamage(24);
            _this.fireMode = Firearm.FIRE_MODE_BURST;
            _this.fireRate = 3;
            _this.roundType = Firearm.ROUND_556MM;
            _this.burstFireRate = 21;
            _this.bursts = 3;
            _this.accuracy = 2;
            _this.reloadTime = 100;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_FAMAS;
    }(Firearm));
    DinogenArena.Firearm_FAMAS = Firearm_FAMAS;
    var Firearm_M9 = /** @class */ (function (_super) {
        __extends(Firearm_M9, _super);
        function Firearm_M9(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_M9;
            _this.name = "M9";
            _this.setFirearmType(Firearm.TYPE_PISTOL);
            _this.setDamage(15);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 4;
            _this.roundType = Firearm.ROUND_9MM;
            _this.accuracy = 4;
            _this.reloadTime = 30;
            _this.setMagMax(15);
            _this.setAmmoMags(4);
            return _this;
            //this.setAmmoMax(60);
        }
        return Firearm_M9;
    }(Firearm));
    DinogenArena.Firearm_M9 = Firearm_M9;
    var Firearm_Glock = /** @class */ (function (_super) {
        __extends(Firearm_Glock, _super);
        function Firearm_Glock(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_GLOCK;
            _this.name = "G17";
            _this.setFirearmType(Firearm.TYPE_PISTOL);
            _this.setDamage(14);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 1;
            _this.roundType = Firearm.ROUND_9MM;
            _this.accuracy = 3;
            _this.reloadTime = 30;
            _this.setMagMax(20);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_Glock;
    }(Firearm));
    DinogenArena.Firearm_Glock = Firearm_Glock;
    var Firearm_FiveSeven = /** @class */ (function (_super) {
        __extends(Firearm_FiveSeven, _super);
        function Firearm_FiveSeven(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_FIVESEVEN;
            _this.name = "Five SeveN";
            _this.setFirearmType(Firearm.TYPE_PISTOL);
            _this.setDamage(16);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 4;
            _this.roundType = Firearm.ROUND_9MM;
            _this.accuracy = 3;
            _this.reloadTime = 30;
            _this.setMagMax(20);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_FiveSeven;
    }(Firearm));
    DinogenArena.Firearm_FiveSeven = Firearm_FiveSeven;
    var Firearm_USP45 = /** @class */ (function (_super) {
        __extends(Firearm_USP45, _super);
        function Firearm_USP45(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_USP45;
            _this.name = "USP .45";
            _this.setFirearmType(Firearm.TYPE_PISTOL);
            _this.setDamage(18);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 6;
            _this.roundType = Firearm.ROUND_45ACP;
            _this.accuracy = 3;
            _this.reloadTime = 30;
            _this.setMagMax(12);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_USP45;
    }(Firearm));
    DinogenArena.Firearm_USP45 = Firearm_USP45;
    var Firearm_Deagle = /** @class */ (function (_super) {
        __extends(Firearm_Deagle, _super);
        function Firearm_Deagle(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_DEAGLE;
            _this.name = "Desert Eagle";
            _this.setFirearmType(Firearm.TYPE_PISTOL);
            _this.setDamage(50);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 12;
            _this.roundType = Firearm.ROUND_50CAL;
            _this.accuracy = 5;
            _this.reloadTime = 90;
            _this.setMagMax(7);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_Deagle;
    }(Firearm));
    DinogenArena.Firearm_Deagle = Firearm_Deagle;
    var Firearm_Magnum = /** @class */ (function (_super) {
        __extends(Firearm_Magnum, _super);
        function Firearm_Magnum(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_MAGNUM;
            _this.name = ".44 Magnum";
            _this.setFirearmType(Firearm.TYPE_PISTOL);
            _this.setDamage(70);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 1;
            _this.roundType = Firearm.ROUND_44;
            _this.accuracy = 2;
            _this.reloadTime = 80;
            _this.setMagMax(6);
            _this.setAmmoMags(4);
            _this.bEjectShell = false;
            return _this;
        }
        return Firearm_Magnum;
    }(Firearm));
    DinogenArena.Firearm_Magnum = Firearm_Magnum;
    var Firearm_M40A3 = /** @class */ (function (_super) {
        __extends(Firearm_M40A3, _super);
        function Firearm_M40A3(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_M40A3;
            _this.name = "M40A3";
            _this.setFirearmType(Firearm.TYPE_SNIPER);
            _this.setDamage(125);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 60;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 1;
            _this.reloadTime = 40;
            _this.setMagMax(5);
            _this.setAmmoMags(4);
            _this.bEjectShell = false;
            _this.bSingleRoundLoaded = true;
            _this.bBoltAction = true;
            return _this;
        }
        return Firearm_M40A3;
    }(Firearm));
    DinogenArena.Firearm_M40A3 = Firearm_M40A3;
    var Firearm_RSASS = /** @class */ (function (_super) {
        __extends(Firearm_RSASS, _super);
        function Firearm_RSASS(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_RSASS;
            _this.name = "RSASS";
            _this.setFirearmType(Firearm.TYPE_SNIPER);
            _this.setDamage(60);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 12;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 2;
            _this.reloadTime = 130;
            _this.setMagMax(10);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_RSASS;
    }(Firearm));
    DinogenArena.Firearm_RSASS = Firearm_RSASS;
    var Firearm_HK417 = /** @class */ (function (_super) {
        __extends(Firearm_HK417, _super);
        function Firearm_HK417(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_HK417;
            _this.name = "HK417";
            _this.setFirearmType(Firearm.TYPE_SNIPER);
            _this.setDamage(40);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 8;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 1;
            _this.reloadTime = 180;
            _this.setMagMax(20);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_HK417;
    }(Firearm));
    DinogenArena.Firearm_HK417 = Firearm_HK417;
    var Firearm_TPR = /** @class */ (function (_super) {
        __extends(Firearm_TPR, _super);
        function Firearm_TPR(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_TPR;
            _this.name = "TPR";
            _this.setFirearmType(Firearm.TYPE_SNIPER);
            _this.setDamage(50);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 10;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 1;
            _this.reloadTime = 130;
            _this.setMagMax(10);
            _this.setAmmoMags(4);
            return _this;
        }
        return Firearm_TPR;
    }(Firearm));
    DinogenArena.Firearm_TPR = Firearm_TPR;
    var Firearm_MSR = /** @class */ (function (_super) {
        __extends(Firearm_MSR, _super);
        function Firearm_MSR(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_MSR;
            _this.name = "MSR";
            _this.setFirearmType(Firearm.TYPE_SNIPER);
            _this.setDamage(200);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 30;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 0;
            _this.reloadTime = 180;
            _this.setMagMax(5);
            _this.setAmmoMags(4);
            _this.bBoltAction = true;
            return _this;
        }
        return Firearm_MSR;
    }(Firearm));
    DinogenArena.Firearm_MSR = Firearm_MSR;
    var Firearm_MG4 = /** @class */ (function (_super) {
        __extends(Firearm_MG4, _super);
        function Firearm_MG4(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_MG4;
            _this.name = "MG4";
            _this.setFirearmType(Firearm.TYPE_LMG);
            _this.setDamage(30);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 8;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 6;
            _this.reloadTime = 140;
            _this.setMagMax(100);
            _this.setAmmoMags(1);
            return _this;
        }
        return Firearm_MG4;
    }(Firearm));
    DinogenArena.Firearm_MG4 = Firearm_MG4;
    var Firearm_M249 = /** @class */ (function (_super) {
        __extends(Firearm_M249, _super);
        function Firearm_M249(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_M249;
            _this.name = "M249 SAW";
            _this.setFirearmType(Firearm.TYPE_LMG);
            _this.setDamage(20);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 6;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 6;
            _this.reloadTime = 160;
            _this.setMagMax(100);
            _this.setAmmoMags(1);
            return _this;
        }
        return Firearm_M249;
    }(Firearm));
    DinogenArena.Firearm_M249 = Firearm_M249;
    var Firearm_HAMR = /** @class */ (function (_super) {
        __extends(Firearm_HAMR, _super);
        function Firearm_HAMR(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_HAMR;
            _this.name = "HAMR";
            _this.setFirearmType(Firearm.TYPE_LMG);
            _this.setDamage(22);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 5;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 5;
            _this.reloadTime = 150;
            _this.setMagMax(100);
            _this.setAmmoMags(1);
            return _this;
        }
        return Firearm_HAMR;
    }(Firearm));
    DinogenArena.Firearm_HAMR = Firearm_HAMR;
    var Firearm_QBB95 = /** @class */ (function (_super) {
        __extends(Firearm_QBB95, _super);
        function Firearm_QBB95(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_QBB95;
            _this.name = "QBB-95";
            _this.setFirearmType(Firearm.TYPE_LMG);
            _this.setDamage(19);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 4;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 7;
            _this.reloadTime = 150;
            _this.setMagMax(100);
            _this.setAmmoMags(1);
            return _this;
        }
        return Firearm_QBB95;
    }(Firearm));
    DinogenArena.Firearm_QBB95 = Firearm_QBB95;
    var Firearm_AUGHBAR = /** @class */ (function (_super) {
        __extends(Firearm_AUGHBAR, _super);
        function Firearm_AUGHBAR(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_AUGHBAR;
            _this.name = "AUG-HBAR";
            _this.setFirearmType(Firearm.TYPE_LMG);
            _this.setDamage(23);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 5;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 4;
            _this.reloadTime = 130;
            _this.setMagMax(50);
            _this.setAmmoMags(2);
            return _this;
        }
        return Firearm_AUGHBAR;
    }(Firearm));
    DinogenArena.Firearm_AUGHBAR = Firearm_AUGHBAR;
    var Firearm_Mossberg = /** @class */ (function (_super) {
        __extends(Firearm_Mossberg, _super);
        function Firearm_Mossberg(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_MOSSBERG;
            _this.name = "Mossberg";
            _this.setFirearmType(Firearm.TYPE_SHOTGUN);
            _this.setDamage(22);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 40;
            _this.roundType = Firearm.ROUND_12G;
            _this.accuracy = 15;
            _this.reloadTime = 20;
            _this.setMagMax(8);
            _this.setAmmoMags(4);
            _this.bSingleRoundLoaded = true;
            _this.bBoltAction = true;
            return _this;
        }
        return Firearm_Mossberg;
    }(Firearm));
    DinogenArena.Firearm_Mossberg = Firearm_Mossberg;
    var Firearm_M1014 = /** @class */ (function (_super) {
        __extends(Firearm_M1014, _super);
        function Firearm_M1014(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_M1014;
            _this.name = "M1014";
            _this.setFirearmType(Firearm.TYPE_SHOTGUN);
            _this.setDamage(18);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 12;
            _this.roundType = Firearm.ROUND_12G;
            _this.accuracy = 15;
            _this.reloadTime = 25;
            _this.setMagMax(7);
            _this.setAmmoMags(4);
            _this.bSingleRoundLoaded = true;
            return _this;
        }
        return Firearm_M1014;
    }(Firearm));
    DinogenArena.Firearm_M1014 = Firearm_M1014;
    var Firearm_KSG = /** @class */ (function (_super) {
        __extends(Firearm_KSG, _super);
        function Firearm_KSG(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_KSG;
            _this.name = "KSG";
            _this.setFirearmType(Firearm.TYPE_SHOTGUN);
            _this.setDamage(20);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 6;
            _this.roundType = Firearm.ROUND_12G;
            _this.accuracy = 16;
            _this.reloadTime = 30;
            _this.setMagMax(10);
            _this.setAmmoMags(4);
            _this.bSingleRoundLoaded = true;
            return _this;
        }
        return Firearm_KSG;
    }(Firearm));
    DinogenArena.Firearm_KSG = Firearm_KSG;
    var Firearm_M3 = /** @class */ (function (_super) {
        __extends(Firearm_M3, _super);
        function Firearm_M3(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_M3;
            _this.name = "M3";
            _this.setFirearmType(Firearm.TYPE_SHOTGUN);
            _this.setDamage(25);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 30;
            _this.roundType = Firearm.ROUND_12G;
            _this.accuracy = 16;
            _this.reloadTime = 28;
            _this.setMagMax(8);
            _this.setAmmoMags(4);
            _this.bSingleRoundLoaded = true;
            _this.bBoltAction = true;
            return _this;
        }
        return Firearm_M3;
    }(Firearm));
    DinogenArena.Firearm_M3 = Firearm_M3;
    var Firearm_SPAS12 = /** @class */ (function (_super) {
        __extends(Firearm_SPAS12, _super);
        function Firearm_SPAS12(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_SPAS12;
            _this.name = "SPAS-12";
            _this.setFirearmType(Firearm.TYPE_SHOTGUN);
            _this.setDamage(24);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 10;
            _this.roundType = Firearm.ROUND_12G;
            _this.accuracy = 20;
            _this.reloadTime = 32;
            _this.setMagMax(8);
            _this.setAmmoMags(4);
            _this.bSingleRoundLoaded = true;
            return _this;
        }
        return Firearm_SPAS12;
    }(Firearm));
    DinogenArena.Firearm_SPAS12 = Firearm_SPAS12;
    var Firearm_Bow = /** @class */ (function (_super) {
        __extends(Firearm_Bow, _super);
        function Firearm_Bow(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_BOW;
            _this.name = "Compound Bow";
            _this.setFirearmType(Firearm.TYPE_LAUNCHER);
            _this.setDamage(100);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 1;
            _this.accuracy = 0;
            _this.reloadTime = 75;
            _this.setMagMax(1);
            _this.setAmmoMags(5);
            _this.setRecoil(5);
            _this.projectileType = DinogenArena.ProjectileBase.TYPE_ARROW;
            _this.bSingleRoundLoaded = true;
            _this.bEjectShell = false;
            return _this;
        }
        return Firearm_Bow;
    }(Firearm));
    DinogenArena.Firearm_Bow = Firearm_Bow;
    var Firearm_Crossbow = /** @class */ (function (_super) {
        __extends(Firearm_Crossbow, _super);
        function Firearm_Crossbow(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_CROSSBOW;
            _this.name = "Crossbow";
            _this.setFirearmType(Firearm.TYPE_LAUNCHER);
            _this.setDamage(50);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 10;
            _this.accuracy = 3;
            _this.reloadTime = 100;
            _this.setMagMax(5);
            _this.setAmmoMags(4);
            _this.projectileType = DinogenArena.ProjectileBase.TYPE_ARROW;
            _this.bEjectShell = false;
            return _this;
        }
        return Firearm_Crossbow;
    }(Firearm));
    DinogenArena.Firearm_Crossbow = Firearm_Crossbow;
    var Firearm_RPG = /** @class */ (function (_super) {
        __extends(Firearm_RPG, _super);
        function Firearm_RPG(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_RPG;
            _this.name = "RPG";
            _this.setFirearmType(Firearm.TYPE_LAUNCHER);
            _this.setDamage(450);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 1;
            _this.accuracy = 3;
            _this.reloadTime = 150;
            _this.setMagMax(1);
            _this.setAmmoMags(1);
            _this.projectileType = DinogenArena.ProjectileBase.TYPE_ROCKET;
            _this.bSingleRoundLoaded = true;
            _this.bEjectShell = false;
            return _this;
        }
        return Firearm_RPG;
    }(Firearm));
    DinogenArena.Firearm_RPG = Firearm_RPG;
    var Firearm_M203 = /** @class */ (function (_super) {
        __extends(Firearm_M203, _super);
        function Firearm_M203(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_M203;
            _this.name = "M203";
            _this.setFirearmType(Firearm.TYPE_LAUNCHER);
            _this.setDamage(300);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 1;
            _this.accuracy = 2;
            _this.reloadTime = 90;
            _this.setMagMax(1);
            _this.setAmmoMags(2);
            _this.projectileType = DinogenArena.ProjectileBase.TYPE_GRENADE;
            _this.bEjectShell = false;
            return _this;
        }
        return Firearm_M203;
    }(Firearm));
    DinogenArena.Firearm_M203 = Firearm_M203;
    var Firearm_XM25 = /** @class */ (function (_super) {
        __extends(Firearm_XM25, _super);
        function Firearm_XM25(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_XM25;
            _this.name = "XM-25";
            _this.setFirearmType(Firearm.TYPE_LAUNCHER);
            _this.setDamage(300);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 10;
            _this.accuracy = 5;
            _this.reloadTime = 150;
            _this.setMagMax(3);
            _this.setAmmoMags(1);
            _this.projectileType = DinogenArena.ProjectileBase.TYPE_GRENADE;
            _this.bEjectShell = false;
            return _this;
        }
        return Firearm_XM25;
    }(Firearm));
    DinogenArena.Firearm_XM25 = Firearm_XM25;
    /* SURVIVAL ONLY */
    var Firearm_Minigun = /** @class */ (function (_super) {
        __extends(Firearm_Minigun, _super);
        function Firearm_Minigun(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_MINIGUN;
            _this.name = "Minigun";
            _this.setFirearmType(Firearm.TYPE_LMG);
            _this.setDamage(200);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 3;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 4;
            _this.reloadTime = 240;
            _this.setMagMax(1000);
            _this.setAmmoMags(1);
            _this.setRecoil(3);
            _this.bSurvivalOnly = true;
            return _this;
        }
        return Firearm_Minigun;
    }(Firearm));
    DinogenArena.Firearm_Minigun = Firearm_Minigun;
    var Firearm_Jackhammer = /** @class */ (function (_super) {
        __extends(Firearm_Jackhammer, _super);
        function Firearm_Jackhammer(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_JACKHAMMER;
            _this.name = "Jackhammer";
            _this.setFirearmType(Firearm.TYPE_SHOTGUN);
            _this.setDamage(65);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 8;
            _this.roundType = Firearm.ROUND_12G;
            _this.accuracy = 10;
            _this.reloadTime = 150;
            _this.setMagMax(20);
            _this.setAmmoMags(2);
            _this.setRecoil(10);
            _this.bSurvivalOnly = true;
            return _this;
        }
        return Firearm_Jackhammer;
    }(Firearm));
    DinogenArena.Firearm_Jackhammer = Firearm_Jackhammer;
    var Firearm_Quadra = /** @class */ (function (_super) {
        __extends(Firearm_Quadra, _super);
        function Firearm_Quadra(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_QUADRA;
            _this.name = "Quadra";
            _this.setFirearmType(Firearm.TYPE_LAUNCHER);
            _this.setDamage(300);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 1;
            _this.accuracy = 0;
            _this.reloadTime = 30;
            _this.setMagMax(10);
            _this.setAmmoMags(5);
            _this.setRecoil(5);
            _this.projectileType = DinogenArena.ProjectileBase.TYPE_ARROW;
            _this.bEjectShell = false;
            _this.bSingleRoundLoaded = true;
            _this.bSurvivalOnly = true;
            return _this;
        }
        return Firearm_Quadra;
    }(Firearm));
    DinogenArena.Firearm_Quadra = Firearm_Quadra;
    var Firearm_SAMR = /** @class */ (function (_super) {
        __extends(Firearm_SAMR, _super);
        function Firearm_SAMR(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_SAMR;
            _this.name = "SAM-R";
            _this.setFirearmType(Firearm.TYPE_SNIPER);
            _this.setDamage(200);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 2;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 0;
            _this.reloadTime = 180;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            _this.setRecoil(6);
            _this.bSurvivalOnly = true;
            return _this;
        }
        return Firearm_SAMR;
    }(Firearm));
    DinogenArena.Firearm_SAMR = Firearm_SAMR;
    var Firearm_AUGPARA = /** @class */ (function (_super) {
        __extends(Firearm_AUGPARA, _super);
        function Firearm_AUGPARA(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_AUGPARA;
            _this.name = "AUG SMG";
            _this.setFirearmType(Firearm.TYPE_SMG);
            _this.setDamage(50);
            _this.fireMode = Firearm.FIRE_MODE_BURST;
            _this.fireRate = 2;
            _this.burstFireRate = 12;
            _this.roundType = Firearm.ROUND_9MM;
            _this.accuracy = 4;
            _this.reloadTime = 60;
            _this.setMagMax(45);
            _this.setAmmoMags(4);
            _this.setRecoil(3);
            _this.bSurvivalOnly = true;
            return _this;
        }
        return Firearm_AUGPARA;
    }(Firearm));
    DinogenArena.Firearm_AUGPARA = Firearm_AUGPARA;
    var Firearm_SCARL = /** @class */ (function (_super) {
        __extends(Firearm_SCARL, _super);
        function Firearm_SCARL(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_SCARL;
            _this.name = "SCAR-L";
            _this.setFirearmType(Firearm.TYPE_RIFLE);
            _this.setDamage(100);
            _this.fireMode = Firearm.FIRE_MODE_AUTO;
            _this.fireRate = 5;
            _this.roundType = Firearm.ROUND_762MM;
            _this.accuracy = 2;
            _this.reloadTime = 100;
            _this.setMagMax(30);
            _this.setAmmoMags(4);
            _this.setRecoil(4);
            _this.bSurvivalOnly = true;
            return _this;
        }
        return Firearm_SCARL;
    }(Firearm));
    DinogenArena.Firearm_SCARL = Firearm_SCARL;
    var Firearm_Magnum500 = /** @class */ (function (_super) {
        __extends(Firearm_Magnum500, _super);
        function Firearm_Magnum500(_unlockLevel) {
            if (_unlockLevel === void 0) { _unlockLevel = 1; }
            var _this = _super.call(this, _unlockLevel) || this;
            _this.id = DinogenArena.InventoryManager.ITEM_FIREARM_MAGNUM500;
            _this.name = "S&W 500";
            _this.setFirearmType(Firearm.TYPE_PISTOL);
            _this.setDamage(400);
            _this.fireMode = Firearm.FIRE_MODE_SEMI;
            _this.fireRate = 0;
            _this.roundType = Firearm.ROUND_50CAL;
            _this.accuracy = 0;
            _this.reloadTime = 80;
            _this.setMagMax(6);
            _this.setAmmoMags(4);
            _this.setRecoil(12);
            _this.bEjectShell = false;
            _this.bSurvivalOnly = true;
            return _this;
        }
        return Firearm_Magnum500;
    }(Firearm));
    DinogenArena.Firearm_Magnum500 = Firearm_Magnum500;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var MainMenuState = /** @class */ (function (_super) {
        __extends(MainMenuState, _super);
        function MainMenuState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MainMenuState.prototype.init = function (_menuId) {
            _super.prototype.init.call(this, _menuId);
            this.gotoMenuId = _menuId;
        };
        MainMenuState.prototype.create = function () {
            this.container = new DinogenArena.Blurable();
            this.container.show();
            this.filterContainer = new DinogenArena.UIBase();
            this.filterContainer.show();
            var menuBg = this.game.add.image(0, 0, "dinogen_bg");
            this.container.add(menuBg);
            var fragmentSrc = [
                "precision mediump float;",
                "uniform float     time;",
                "uniform vec2     resolution;",
                "#define PI 3.1415926535897932384626433832795",
                "const float position = 0.0;",
                "const float scale = 0.1;",
                "const float intensity = 1.0;",
                "float band(vec2 pos, float amplitude, float frequency) {",
                "float wave = scale * amplitude * sin(1.0 * PI * frequency * pos.x + time) / 2.05;",
                "float light = clamp(amplitude * frequency * 0.02, 0.001 + 0.001 / scale, 5.0) * scale / abs(wave - pos.y);",
                "return light;",
                "}",
                "void main() {",
                "vec3 color = vec3(2.0, 1.0, 1.0);",
                "color = color == vec3(0.0)? vec3(10.5, 0.5, 1.0) : color;",
                "vec2 pos = (gl_FragCoord.xy / resolution.xy);",
                "pos.y += - 0.5;",
                "float spectrum = 0.0;",
                "const float lim = 1.0;",
                "#define time time*0.037 + pos.x*10.",
                "for(float i = 0.0; i < lim; i++){",
                "spectrum += band(pos, 1.0*sin(time*0.1/PI), 1.0*sin(time*i/lim))/pow(lim, 0.25);",
                "}",
                "spectrum += band(pos, cos(10.7), 2.5);",
                "spectrum += band(pos, 0.4, sin(2.0));",
                "spectrum += band(pos, 0.05, 4.5);",
                "spectrum += band(pos, 0.1, 7.0);",
                "spectrum += band(pos, 0.1, 1.0);",
                "gl_FragColor = vec4(color * spectrum, spectrum);",
                "}"
            ];
            this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
            this.filter.setResolution(this.game.width, this.game.height);
            var img = this.game.add.image();
            img.width = this.game.width;
            img.height = this.game.height;
            img.filters = [this.filter];
            this.filterContainer.add(img);
            /*
            if (GameUtil.IsDebugging())
            {
                if (PlayerManager.profiles.length == 0)
                {
                    PlayerManager.CreateProfile();
                }
            }
            */
            DinogenArena.APIUtil.InitAPI();
            if (!DinogenArena.PlayerManager.CurrentProfile) {
                this.createLoginMenu();
            }
            else {
                this.createMainMenu();
            }
            DinogenArena.SoundManager.PlayMusic("music_menu");
            DinogenArena.GameUtil.game.showMouse(true);
            DinogenArena.GameUtil.game.fadeFromBlack();
        };
        MainMenuState.prototype.update = function () {
            if (this.filter) {
                this.filter.update();
            }
        };
        MainMenuState.prototype.createLoginMenu = function () {
            if (this.loginMenu != null) {
                this.loginMenu.destroy();
            }
            this.loginMenu = new DinogenArena.LoginMenu();
            this.loginMenu.show();
        };
        MainMenuState.prototype.createMainMenu = function () {
            if (this.mainMenu != null) {
                this.mainMenu.destroy();
            }
            this.mainMenu = new DinogenArena.MainMenu();
            this.mainMenu.show();
            var realMenu = this.gotoMenuId;
            if (!realMenu) {
                var profile = DinogenArena.PlayerManager.CurrentProfile;
                if (profile.hasCompletedTutorial()) {
                    realMenu = DinogenArena.MainMenu.MENU_RANKED;
                }
                else {
                    realMenu = DinogenArena.MainMenu.MENU_TUTORIAL;
                }
            }
            DinogenArena.Engine.SaveProfileData();
            this.mainMenu.contentElement.loadSubmenu(realMenu);
        };
        return MainMenuState;
    }(Phaser.State));
    DinogenArena.MainMenuState = MainMenuState;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var GameUtil = /** @class */ (function () {
        function GameUtil() {
        }
        GameUtil.IsDebugging = function () {
            return false;
        };
        GameUtil.GetCurrentVersion = function () {
            return "v1.0.3b " + APIUtil.GetCurrentAPIId();
        };
        GameUtil.IsLocalHost = function () {
            return location.hostname == "localhost" || location.hostname == "127.0.0.1";
        };
        GameUtil.AdsEnabled = function () {
            if (!GameUtil.game.ads) {
                return false;
            }
            return APIUtil.AdsAreAllowed() && !GameUtil.IsLocalHost();
        };
        GameUtil.Alert = function (_val) {
            console.warn("GameUtil::Alert --> " + _val);
            if (GameUtil.IsDebugging()) {
                alert(_val);
            }
        };
        GameUtil.GetGameState = function () {
            if (this.game.state.getCurrentState() instanceof DinogenArena.GameState) {
                return this.game.state.getCurrentState();
            }
            return null;
        };
        GameUtil.GetMainMenuState = function () {
            if (this.game.state.getCurrentState() instanceof DinogenArena.MainMenuState) {
                return this.game.state.getCurrentState();
            }
            return null;
        };
        GameUtil.ShowProfileJSON = function () {
            var profile = PlayerManager.CurrentProfile;
            if (profile) {
                var obj = profile.toObject();
                var json = JSON.stringify(obj, undefined, 4);
                console.log(json);
            }
        };
        GameUtil.GetVoxObjectById = function (_id) {
            var vox = GameUtil.game.cache.getJSON("vox");
            var arr = vox["vox"];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i]["id"] == _id) {
                    return arr[i];
                }
            }
            return null;
        };
        GameUtil.ApplyForce = function (_body, _vx, _vy) {
            if (!_body) {
                GameUtil.Alert("GameUtil::ApplyForce --> null body!");
                return;
            }
            if (isNaN(_vx) || isNaN(_vy)) {
                GameUtil.Alert("GameUtil::ApplyForce --> vx or vy is not a number: " + _vx + ", " + _vy + "\n" + _body.sprite);
                return;
            }
            if (!(_vx == _vx)) {
                GameUtil.Alert("GameUtil::ApplyForce --> _vx != _vx");
                return;
            }
            if (!(_vy == _vy)) {
                GameUtil.Alert("GameUtil::ApplyForce --> _vy != _vy");
                return;
            }
            _body.applyForce(_vx, _vy);
        };
        GameUtil.CreateSocialItems = function () {
            var baseAlpha = 0.4;
            var socialContainer = GameUtil.game.add.group();
            var desiredWidth = 80;
            var buttonPadding = 4;
            var wilkinButton = new DinogenArena.MenuButton(GameUtil.OpenWilkinHomepage, GameUtil, null, true, desiredWidth);
            wilkinButton.setBaseAlpha(baseAlpha);
            wilkinButton.setLabelText("XWILKINX");
            wilkinButton.labelText.setStyle({ font: "12px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" }, true);
            wilkinButton.labelText.setTextBounds(0, 0, desiredWidth, 32);
            wilkinButton.x = buttonPadding;
            wilkinButton.y = buttonPadding;
            socialContainer.add(wilkinButton);
            var guideButton = new DinogenArena.MenuButton(GameUtil.OpenDinogenArenaGuide, GameUtil, null, true, desiredWidth);
            guideButton.setBaseAlpha(baseAlpha);
            guideButton.setLabelText("Game Guide");
            guideButton.labelText.setStyle({ font: "12px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" }, true);
            guideButton.labelText.setTextBounds(0, 0, desiredWidth, 32);
            guideButton.x = wilkinButton.x + wilkinButton.width + buttonPadding;
            guideButton.y = buttonPadding;
            socialContainer.add(guideButton);
            var dinogenButton = new DinogenArena.MenuButton(GameUtil.OpenDinogenGame, GameUtil, null, true, desiredWidth);
            dinogenButton.setBaseAlpha(baseAlpha);
            dinogenButton.setLabelText("Play Dinogen");
            dinogenButton.labelText.setStyle({ font: "12px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" }, true);
            dinogenButton.labelText.setTextBounds(0, 0, desiredWidth, 32);
            dinogenButton.x = guideButton.x + guideButton.width + buttonPadding;
            dinogenButton.y = buttonPadding;
            socialContainer.add(dinogenButton);
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                var playMoreGamesButton = new DinogenArena.MenuButton(APIUtil.OpenCurrentAPIHomepage, APIUtil, null, true, 120);
                playMoreGamesButton.setBaseAlpha(baseAlpha);
                playMoreGamesButton.setLabelText("Play More Games");
                playMoreGamesButton.labelText.setStyle({ font: "12px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" }, true);
                playMoreGamesButton.labelText.setTextBounds(0, 0, playMoreGamesButton.width, 32);
                playMoreGamesButton.x = dinogenButton.x + dinogenButton.width + buttonPadding;
                playMoreGamesButton.y = buttonPadding;
                socialContainer.add(playMoreGamesButton);
                var likeUsButton = new DinogenArena.MenuButton(APIUtil.OpenCurrentAPIFacebook, APIUtil, null, true, desiredWidth);
                likeUsButton.setBaseAlpha(baseAlpha);
                likeUsButton.setLabelText("Like Us!");
                likeUsButton.labelText.setStyle({ font: "12px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" }, true);
                likeUsButton.labelText.setTextBounds(0, 0, likeUsButton.width, 32);
                likeUsButton.x = playMoreGamesButton.x + playMoreGamesButton.width + buttonPadding;
                likeUsButton.y = buttonPadding;
                socialContainer.add(likeUsButton);
            }
            if (PlayerManager.CurrentProfile || APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                var muteButton = new DinogenArena.ImageButton(SoundManager.SetVolumeToZero, SoundManager, null, "atlas_ui", "icon_mute");
                muteButton.setBaseAlpha(baseAlpha);
                muteButton.x = socialContainer.width + (buttonPadding * 2);
                muteButton.y = 8;
                socialContainer.add(muteButton);
            }
            var socialIcons = GameUtil.game.add.group();
            var iconPadding = 4;
            var globe = new DinogenArena.ImageButton(GameUtil.OpenWilkinHomepage, GameUtil, null, "atlas_ui", "social_url");
            globe.setBaseAlpha(baseAlpha);
            socialIcons.add(globe);
            var facebook = new DinogenArena.ImageButton(GameUtil.OpenWilkinFacebook, GameUtil, null, "atlas_ui", "social_facebook");
            facebook.setBaseAlpha(baseAlpha);
            facebook.x = globe.x + globe.width + iconPadding;
            socialIcons.add(facebook);
            var youtube = new DinogenArena.ImageButton(GameUtil.OpenWilkinYouTube, GameUtil, null, "atlas_ui", "social_youtube");
            youtube.setBaseAlpha(baseAlpha);
            youtube.x = facebook.x + facebook.width + iconPadding;
            socialIcons.add(youtube);
            socialIcons.x = GameUtil.game.width - socialIcons.width;
            socialContainer.add(socialIcons);
            /*
            var versionText = this.game.add.text(0, 0, GameUtil.GetCurrentVersion(), { font: "14px " + GameUtil.FONT, fill: "#FFFFFF" });
            versionText.alpha = 0.2;
            versionText.x = 6;
            versionText.y = this.game.height - versionText.height;
            socialContainer.add(versionText);
            */
            var versionButton = new DinogenArena.MenuButton(GameUtil.ShowVersionInfo, GameUtil, null, false, desiredWidth);
            versionButton.setBaseAlpha(baseAlpha * 0.5);
            versionButton.setLabelText(GameUtil.GetCurrentVersion());
            versionButton.labelText.setStyle({ font: "12px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left", boundsAlignV: "middle" }, true);
            versionButton.labelText.setTextBounds(0, 0, desiredWidth, 32);
            versionButton.x = 6;
            versionButton.y = this.game.height - versionButton.height;
            socialContainer.add(versionButton);
            return socialContainer;
        };
        GameUtil.CreateRect = function (_w, _h) {
            var graphics = GameUtil.game.add.graphics(0, 0);
            graphics.beginFill(0xFF00FF, 0);
            graphics.drawRect(0, 0, _w, _h);
            var ret = graphics.generateTexture();
            graphics.destroy();
            return ret;
        };
        GameUtil.ForceStartAudio = function () {
            console.log("Force starting audio...");
            if (this.game) {
                try {
                    this.game.sound.context.resume();
                }
                catch (error) {
                    console.error(error);
                }
            }
        };
        GameUtil.ShowVersionInfo = function () {
            GameUtil.game.createWindow({
                titleText: "Version Information",
                type: DinogenArena.Window.TYPE_MESSAGE,
                descText: GameUtil.GetCurrentVersion() + "\nAPI: " + APIUtil.GetCurrentAPIName() + "\n\nVisit xwilkinx.com to find the latest game versions."
            });
        };
        GameUtil.OpenWilkinHomepage = function () {
            open("http://xwilkinx.com", "_blank");
        };
        GameUtil.OpenWilkinFacebook = function () {
            open("http://facebook.com/xwilkinx", "_blank");
        };
        GameUtil.OpenWilkinYouTube = function () {
            open("https://www.youtube.com/channel/UChk6XyAUFGtECyOOpEBnpiA", "_blank");
        };
        GameUtil.OpenDinogenArenaGuide = function () {
            open("http://xwilkinx.com/dinogen-arena-guide", "_blank");
        };
        GameUtil.OpenDinogenGame = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                open("https://armorgames.com/play/18258/dinogen", "_blank");
            }
            else {
                open("http://xwilkinx.com/dinogen", "_blank");
            }
        };
        GameUtil.OpenLatestVersion = function () {
            open("http://xwilkinx.com/dinogen-arena", "_blank");
        };
        GameUtil.OpenSponsor = function () {
            open("about:blank", "_blank");
        };
        GameUtil.GetRankIconForLevel = function (_level) {
            var realLevel = Math.min(DinogenArena.PlayerProfile.MAX_CUSTOM_LEVEL, _level);
            var num = Math.max(1, Math.floor(realLevel * 0.5));
            return "rank_" + num;
        };
        GameUtil.GetRandomTip = function () {
            return GameUtil.Tips[DinogenArena.WilkinUtil.GenerateRandomNumber(0, GameUtil.Tips.length - 1)];
        };
        /* 0xD85540 */
        GameUtil.FONT = "Play";
        GameUtil.COLOUR_XP = 0xFFCC33;
        GameUtil.COLOUR_XP_STRING = "#" + GameUtil.COLOUR_XP.toString(16);
        GameUtil.COLOUR_NEW = 0x6CFF3F;
        GameUtil.COLOUR_NEW_STRING = "#" + GameUtil.COLOUR_NEW.toString(16);
        GameUtil.COLOUR_THEME = 0xD85540;
        GameUtil.COLOUR_THEME_STRING = "#" + GameUtil.COLOUR_THEME.toString(16);
        GameUtil.COLOUR_BLUE = 0x515B66;
        GameUtil.COLOUR_ALLY = 0x6CFF3F;
        GameUtil.COLOUR_ALLY_STRING = "#6CFF3F";
        GameUtil.COLOUR_ENEMY = 0xFF3F3F;
        GameUtil.COLOUR_ENEMY_STRING = "#FF3F3F";
        GameUtil.RECTANGLE_RADIUS = 6;
        GameUtil.frameRate = 60;
        GameUtil.Tips = [
            "Earn more XP by completing challenges.",
            "Killing multiple enemies in quick succession will earn you more XP.",
            "Unlock more powerful weapons by earning XP and leveling up.",
            "Unlock new perks by earning XP and leveling up.",
            "You can have up to 3 customizable loadouts.",
            "Try playing different game modes.",
            "Try playing different maps.",
            "Some game modes allow you to play as a dinosaur.",
            "The Dilophosaurus spits toxic venom at its enemies.",
            "The Spinosaurus is slow but very powerful.",
            "Reach level 30 in Ranked mode for a chance to prestige.",
            "Getting the first kill in a Ranked game will earn you extra XP.",
            "Regenerate your health by avoiding damage for a few seconds.",
            "You can reload your weapon while sprinting.",
            "Arrows fired from bows can be picked up and reused.",
            "You can change the controls in the Settings menu.",
            "You can modify each game's settings such as the time limit or number of players.",
            "Each loadout can be assigned a player perk and weapon perk.",
            "You move faster with lighter weapons like pistols and SMGs.",
            "Snipers and LMGs are extremely powerful but slow your movement speed.",
            "Shotguns are effective at killing groups of enemies quickly.",
            "The Crusader perk protects you from dinosaurs.",
            "The Lightweight perk increases your movement speed.",
            "The Quick Hands perk increases your weapon's reload speed.",
            "The Rapid Fire perk increases your weapon's rate of fire.",
            "Enjoy endless carnage? Try the Survival mode.",
            "Check out the official game guide at XWILKINX.com.",
            "Check out the original Dinogen at XWILKINX.com.",
            "Enemies will become more skilled as you level up in Ranked mode.",
            "You can pick up weapons dropped by fallen allies and enemies.",
            "Unlock new game modes and maps by prestiging (available at level 30).",
            "One dinosaur must kill humans to evolve and win in the Evolution game mode.",
            "Claim and defend the objective zone in the King of the Hill game mode.",
            "A group of humans must kill a T-Rex in the Tyrant game mode.",
            "You can purchase air support from the armory in Survival mode.",
            "You can change the movement style in the Settings menu.",
            "Snipers give you a further view distance for spotting enemies.",
            "Ranked games give players a short spawn protection period.",
            "Melee kills earn you more money in Survival mode.",
            "Melee kills earn you more XP in Ranked mode.",
            "The Osprey support helicopter delivers 3 random weapon crates in Survival mode.",
            "The Apache heavy assault helicopter fires rockets at enemies in Survival mode.",
            "Recently killed allies are indicated by a skull icon.",
            "Grenades can be bounced around corners to kill hard-to-reach enemies.",
            "You can check the scoreboard by holding the [TAB] key.",
            "Your automated turrets in Survival mode can be upgraded to increase their power.",
            "Enemies will progressively become faster and stronger in Survival mode.",
            "Arrows fired from bows do extra damage against dinosaurs.",
            "Red savage dinosaurs in Survival mode drop additional money.",
            "Be careful: your explosive weapons can cause damage to yourself too!",
            "You can disable effects, gibs, and more in the Settings menu.",
            "Use your melee attack when enemies get too close.",
            "Press [ESC] to access the pause menu during gameplay.",
            "Not a fan of blood and gore? You can disable them in the Settings menu.",
            "Enemy are much more skilled after Prestiging (unlocked at level 30).",
            "Some unique weapons can only be found in Survival mode.",
            "The minigun is one of the best weapons to use in Survival mode.",
            "The Quadra bow in Survival mode fires 2 ultra strong arrows."
        ];
        return GameUtil;
    }());
    DinogenArena.GameUtil = GameUtil;
    var CampaignManager = /** @class */ (function () {
        function CampaignManager() {
        }
        CampaignManager.GetCharacterClass = function (_id) {
            if (_id == CampaignManager.CHARACTER_CLASS_GUERILLA) {
                return {
                    id: _id,
                    name: "Guerilla",
                    style: "Aggressive",
                    skills: [
                        {
                            id: "guerilla_speed",
                            desc: "Faster movement speed"
                        },
                        {
                            id: "guerilla_health",
                            desc: "Increased health"
                        }
                    ],
                    focus: "Speed and health",
                    preferredWeapons: "SMGs, Shotguns",
                    defaultWeapons: [
                        {
                            id: "glock"
                        },
                        {
                            id: "mp5"
                        }
                    ]
                };
            }
            else if (_id == CampaignManager.CHARACTER_CLASS_COMMANDO) {
                return {
                    id: _id,
                    name: "Commando",
                    style: "Balanced",
                    skills: [
                        [
                            {
                                id: DinogenArena.Skills.SKILL_COMMANDO_RELOAD,
                                desc: "Faster reload speed"
                            },
                            {
                                id: DinogenArena.Skills.SKILL_COMMANDO_DAMAGE,
                                desc: "Increased bullet damage"
                            },
                            {
                                id: DinogenArena.Skills.SKILL_COMMANDO_ROF,
                                desc: "Increased rate of fire"
                            }
                        ],
                        [
                            {
                                id: DinogenArena.Skills.SKILL_COMMANDO_PISTOL,
                                desc: "Increased skill with pistols"
                            },
                            {
                                id: DinogenArena.Skills.SKILL_COMMANDO_RIFLE,
                                desc: "Increased skill with rifles"
                            },
                            {
                                id: DinogenArena.Skills.SKILL_COMMANDO_LMG,
                                desc: "Increased skill with LMGs"
                            }
                        ]
                    ],
                    focus: "Firearms",
                    preferredWeapons: "Rifles, LMGs",
                    defaultWeapons: [
                        {
                            id: "m9"
                        },
                        {
                            id: "m16a4"
                        }
                    ]
                };
            }
            else if (_id == CampaignManager.CHARACTER_CLASS_HUNTER) {
                return {
                    id: _id,
                    name: "Hunter",
                    style: "Defensive",
                    skills: [
                        {
                            id: "hunter_accuracy",
                            desc: "Increased weapon accuracy"
                        },
                        {
                            id: "hunter_view",
                            desc: "Increased view distance"
                        }
                    ],
                    focus: "Accuracy and visibility",
                    preferredWeapons: "Snipers, Launchers",
                    defaultWeapons: [
                        {
                            id: "usp45"
                        },
                        {
                            id: "m40a3"
                        }
                    ]
                };
            }
        };
        CampaignManager.GetNameForCharacterClassId = function (_id) {
            return CampaignManager.GetCharacterClass(_id)["name"];
        };
        CampaignManager.GetAllCharacterClassIds = function () {
            return [
                CampaignManager.CHARACTER_CLASS_GUERILLA,
                CampaignManager.CHARACTER_CLASS_COMMANDO,
                CampaignManager.CHARACTER_CLASS_HUNTER
            ];
        };
        CampaignManager.GetQuestById = function (_questId) {
            var quests = GameUtil.game.cache.getJSON("quests", true);
            var arr = quests["quests"];
            for (var i = 0; i < arr.length; i++) {
                console.log(arr[i]);
                if (arr[i]["id"] == _questId) {
                    if (!arr[i]["objectives"]) {
                        arr[i]["objectives"] = [];
                    }
                    return arr[i];
                }
            }
            return null;
        };
        CampaignManager.GetCinematicById = function (_cinematicId) {
            var cinematics = GameUtil.game.cache.getJSON("cinematics");
            var arr = cinematics["cinematics"];
            for (var i = 0; i < arr.length; i++) {
                console.log(arr[i]);
                if (arr[i]["id"] == _cinematicId) {
                    return arr[i];
                }
            }
            return null;
        };
        CampaignManager.CHARACTER_CLASS_COMMANDO = "commando";
        CampaignManager.CHARACTER_CLASS_HUNTER = "hunter";
        CampaignManager.CHARACTER_CLASS_GUERILLA = "guerilla";
        return CampaignManager;
    }());
    DinogenArena.CampaignManager = CampaignManager;
    var DropsManager = /** @class */ (function () {
        function DropsManager() {
        }
        DropsManager.GetDropsForId = function (_id) {
            if (_id == DropsManager.DROP_COMPY) {
                return [
                    {
                        chance: 0.5,
                        type: DropsManager.TYPE_MONEY,
                        valueMin: 1,
                        valueMax: 5
                    },
                    {
                        chance: 0.05,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_M9
                    },
                    {
                        chance: 0.05,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_GLOCK
                    }
                ];
            }
            else if (_id == DropsManager.DROP_RAPTOR) {
                return [
                    {
                        chance: 0.5,
                        type: DropsManager.TYPE_MONEY,
                        valueMin: 1,
                        valueMax: 100
                    },
                    {
                        chance: 0.05,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_FIVESEVEN
                    },
                    {
                        chance: 0.03,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_MP5
                    },
                    {
                        chance: 0.03,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_UMP45
                    },
                    {
                        chance: 0.03,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_MP7
                    },
                    {
                        chance: 0.02,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_DEAGLE
                    }
                ];
            }
            else if (_id == DropsManager.DROP_SPINO) {
                return [
                    {
                        chance: 0.8,
                        type: DropsManager.TYPE_MONEY,
                        valueMin: 50,
                        valueMax: 500
                    },
                    {
                        chance: 0.05,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_AK47
                    },
                    {
                        chance: 0.05,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_M1014
                    },
                    {
                        chance: 0.03,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_HAMR
                    },
                    {
                        chance: 0.02,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_HK417
                    },
                    {
                        chance: 0.01,
                        type: DropsManager.TYPE_WEAPON,
                        weaponId: InventoryManager.ITEM_FIREARM_MSR
                    }
                ];
            }
            else if (_id == DropsManager.DROP_BANDIT_NORMAL) {
                return [
                    {
                        chance: 0.5,
                        type: DropsManager.TYPE_MONEY,
                        valueMin: 1,
                        valueMax: 50
                    }
                ];
            }
            else {
                alert("Invalid drop id: " + _id);
            }
            return null;
        };
        DropsManager.TYPE_MONEY = "TYPE_MONEY";
        DropsManager.TYPE_WEAPON = "TYPE_WEAPON";
        DropsManager.DROP_COMPY = "DROP_COMPY";
        DropsManager.DROP_RAPTOR = "DROP_RAPTOR";
        DropsManager.DROP_SPINO = "DROP_SPINO";
        DropsManager.DROP_BANDIT_NORMAL = "DROP_BANDIT_NORMAL";
        return DropsManager;
    }());
    DinogenArena.DropsManager = DropsManager;
    var GameModeManager = /** @class */ (function () {
        function GameModeManager() {
        }
        GameModeManager.Initialize = function () {
            GameModeManager.db = {};
            GameModeManager.db[GameModeManager.GAME_MODE_CAMPAIGN] = {
                id: GameModeManager.GAME_MODE_CAMPAIGN,
                name: "Tutorial",
                desc: "Learn how to play Dinogen Arena by following the in-game instructions.",
                instructions: "Complete the objectives",
            };
            GameModeManager.db[GameModeManager.GAME_MODE_SURVIVAL] = {
                id: GameModeManager.GAME_MODE_SURVIVAL,
                name: "Survival",
                desc: "Survive as long as you can against endless waves of dinosaurs.",
                instructions: "Survive as long as possible"
            };
            GameModeManager.db[GameModeManager.GAME_MODE_TEAM_DEATHMATCH] = {
                id: GameModeManager.GAME_MODE_TEAM_DEATHMATCH,
                name: "Team Deathmatch",
                desc: "First team to reach the score limit wins.",
                instructions: "Kill enemy players",
                bDeathmatch: true
            };
            GameModeManager.db[GameModeManager.GAME_MODE_DEATHMATCH] = {
                id: GameModeManager.GAME_MODE_DEATHMATCH,
                name: "Deathmatch",
                desc: "Free-for-all deathmatch.",
                instructions: "Kill enemy players",
                bDeathmatch: true
            };
            GameModeManager.db[GameModeManager.GAME_MODE_CAPTURE_THE_FLAG] = {
                id: GameModeManager.GAME_MODE_CAPTURE_THE_FLAG,
                name: "Capture the Flag",
                desc: "Teams must capture the enemy flag and protect their own.",
                instructions: "Capture the enemy flag"
            };
            GameModeManager.db[GameModeManager.GAME_MODE_HUMANS_VS_DINOSAURS] = {
                id: GameModeManager.GAME_MODE_HUMANS_VS_DINOSAURS,
                name: "Humans vs. Dinosaurs",
                desc: "Team deathmatch with humans against dinosaurs.",
                teamInstructions: [
                    "Kill the dinosaurs",
                    "Kill the humans"
                ],
                bDeathmatch: true
            };
            GameModeManager.db[GameModeManager.GAME_MODE_EVOLUTION] = {
                id: GameModeManager.GAME_MODE_EVOLUTION,
                name: "Evolution",
                desc: "One dinosaur must kill humans to evolve and win.",
                teamInstructions: [
                    "Kill the dinosaur",
                    "Kill the humans"
                ]
            };
            GameModeManager.db[GameModeManager.GAME_MODE_DINO_HUNT] = {
                id: GameModeManager.GAME_MODE_DINO_HUNT,
                name: "Raptor Hunt",
                desc: "One hunter must kill a group of raptors to win.",
                teamInstructions: [
                    "Kill the raptors",
                    "Kill the hunter"
                ]
            };
            GameModeManager.db[GameModeManager.GAME_MODE_KING_OF_THE_HILL] = {
                id: GameModeManager.GAME_MODE_KING_OF_THE_HILL,
                name: "King of the Hill",
                desc: "Each player must hold the hill zone to win.",
                instructions: "Hold the hill zone",
                bPrestige: true
            };
            GameModeManager.db[GameModeManager.GAME_MODE_REX] = {
                id: GameModeManager.GAME_MODE_REX,
                name: "Tyrant",
                desc: "A group of humans must kill the T-Rex.",
                teamInstructions: [
                    "Kill the T-Rex",
                    "Kill the humans"
                ],
                bPrestige: true
            };
        };
        GameModeManager.GetCustomGameModes = function () {
            var arr = [
                GameModeManager.db[GameModeManager.GAME_MODE_TEAM_DEATHMATCH],
                GameModeManager.db[GameModeManager.GAME_MODE_CAPTURE_THE_FLAG],
                GameModeManager.db[GameModeManager.GAME_MODE_DEATHMATCH],
                GameModeManager.db[GameModeManager.GAME_MODE_HUMANS_VS_DINOSAURS],
                GameModeManager.db[GameModeManager.GAME_MODE_DINO_HUNT],
                GameModeManager.db[GameModeManager.GAME_MODE_EVOLUTION],
                GameModeManager.db[GameModeManager.GAME_MODE_KING_OF_THE_HILL],
                GameModeManager.db[GameModeManager.GAME_MODE_REX]
            ];
            return arr;
        };
        GameModeManager.GetGameMode = function (_id) {
            return GameModeManager.db[_id];
        };
        GameModeManager.GetInstructions = function (_info, _team) {
            if (_info["instructions"] != undefined) {
                return _info["instructions"];
            }
            return _info["teamInstructions"][_team];
        };
        GameModeManager.GetBotName = function (_race) {
            if (_race === void 0) { _race = "human"; }
            var names;
            if (_race == "human") {
                names = [
                    "Albert",
                    "Allen",
                    "Bert",
                    "Bob",
                    "Cecil",
                    "Clarence",
                    "Elliot",
                    "Elmer",
                    "Ernie",
                    "Eugene",
                    "Fergus",
                    "Ferris",
                    "Frank",
                    "Frasier",
                    "Fred",
                    "George",
                    "Graham",
                    "Harvey",
                    "Irwin",
                    "Justin",
                    "Larry",
                    "Lester",
                    "Marvin",
                    "Neil",
                    "Niles",
                    "Oliver",
                    "Opie",
                    "Ryan",
                    "Toby",
                    "Ulric",
                    "Ulysses",
                    "Uri",
                    "Waldo",
                    "Wally",
                    "Walt",
                    "Wesley",
                    "Yanni",
                    "Yogi",
                    "Yuri"
                ];
            }
            else if (_race == "dinosaur") {
                names = [
                    "Absinthe",
                    "Anthrax",
                    "Barbatus",
                    "Bludwan",
                    "Catonic",
                    "Copper",
                    "Diablos",
                    "Driscoll",
                    "Dhampir",
                    "Frite",
                    "Inigo",
                    "Kapral",
                    "Kiladon",
                    "Livid",
                    "Moldark",
                    "Natik",
                    "Nictis",
                    "Sabre",
                    "Sephiran",
                    "Sepitus",
                    "Tabavon",
                    "Texon",
                    "Umbri",
                    "Valota",
                    "Vossler",
                    "Zamza",
                    "Zyler"
                ];
            }
            return names[DinogenArena.WilkinUtil.GenerateRandomNumber(0, names.length - 1)];
        };
        GameModeManager.GetColourForTeam = function (_team) {
            if (_team == 0) {
                return 0x3059A2; // 0x1F4EA2;
            }
            else if (_team == 1) {
                return 0xA03030; //0xA02626;
            }
            else if (_team == 2) {
                return 0x26A045;
            }
            else if (_team == 3) {
                return 0xCBAF30;
            }
            else if (_team == 4) {
                return 0x268FA0;
            }
            else if (_team == 5) {
                return 0x5726A0;
            }
            else if (_team == 6) {
                return 0xA0269E;
            }
            else if (_team == 7) {
                return 0xA0265B;
            }
            else if (_team == 8) {
                return 0xA9A1CD;
            }
            else if (_team == 9) {
                return 0xB2DBAC;
            }
            return 0xCCCCCC;
        };
        GameModeManager.GAME_MODE_CAMPAIGN = "GAME_MODE_STORY";
        GameModeManager.GAME_MODE_SURVIVAL = "GAME_MODE_SURVIVAL";
        GameModeManager.GAME_MODE_TEAM_DEATHMATCH = "GAME_MODE_TEAM_DEATHMATCH";
        GameModeManager.GAME_MODE_DEATHMATCH = "GAME_MODE_DEATHMATCH";
        GameModeManager.GAME_MODE_CAPTURE_THE_FLAG = "GAME_MODE_CAPTURE_THE_FLAG";
        GameModeManager.GAME_MODE_HUMANS_VS_DINOSAURS = "GAME_MODE_HUMANS_VS_DINOSAURS";
        GameModeManager.GAME_MODE_EVOLUTION = "GAME_MODE_EVOLUTION";
        GameModeManager.GAME_MODE_DINO_HUNT = "GAME_MODE_DINO_HUNT";
        GameModeManager.GAME_MODE_KING_OF_THE_HILL = "GAME_MODE_KING_OF_THE_HILL";
        GameModeManager.GAME_MODE_REX = "GAME_MODE_REX";
        return GameModeManager;
    }());
    DinogenArena.GameModeManager = GameModeManager;
    var PlayerManager = /** @class */ (function () {
        function PlayerManager() {
        }
        PlayerManager.Initialize = function () {
            PlayerManager.profiles = [];
        };
        PlayerManager.CreateProfile = function () {
            var profile = new DinogenArena.PlayerProfile();
            profile.name = APIUtil.GetUserName();
            PlayerManager.profiles.push(profile);
            if (PlayerManager.profiles.length == 1) {
                PlayerManager.SelectProfile(0);
            }
            else {
                PlayerManager.SelectProfile(PlayerManager.profiles.length - 1);
            }
            DinogenArena.Engine.SaveProfileData();
            return profile;
        };
        PlayerManager.SetFromData = function (_profiles) {
            for (var i = 0; i < _profiles.length; i++) {
                if (_profiles[i]) {
                    var profile = new DinogenArena.PlayerProfile();
                    profile.fromObject(_profiles[i]);
                    PlayerManager.profiles.push(profile);
                }
            }
        };
        PlayerManager.SelectProfile = function (_index) {
            PlayerManager.CurrentProfile = PlayerManager.profiles[_index];
            return PlayerManager.CurrentProfile;
        };
        PlayerManager.DeleteProfile = function (_profile) {
            var index = PlayerManager.profiles.indexOf(_profile);
            if (index >= 0) {
                _profile.resetProfile();
                PlayerManager.profiles.splice(index, 1);
            }
        };
        PlayerManager.GetProfileIndex = function (_profile) {
            return PlayerManager.profiles.indexOf(_profile);
        };
        return PlayerManager;
    }());
    DinogenArena.PlayerManager = PlayerManager;
    var SoundManager = /** @class */ (function () {
        function SoundManager() {
        }
        SoundManager.SetVolumeToZero = function () {
            /*
            SoundManager.bWantsMute = !SoundManager.bWantsMute;
            SoundManager.SetMute(SoundManager.bWantsMute);
            */
            if (PlayerManager.CurrentProfile) {
                var settings = PlayerManager.CurrentProfile.settings;
                if (settings.musicVolume == 0 && settings.gameVolume == 0) {
                    settings.setMusicVolume(1);
                    settings.setGameVolume(0.8);
                }
                else {
                    settings.setMusicVolume(0);
                    settings.setGameVolume(0);
                }
            }
            else {
                SoundManager.UpdateMusicVolume(0);
            }
        };
        SoundManager.SetMute = function (_bVal) {
            SoundManager.bMute = _bVal;
            SoundManager.UpdateAmbienceVolume();
            SoundManager.UpdateMusicVolume();
            GameUtil.game.sound.mute = _bVal;
            if (!_bVal) {
                GameUtil.ForceStartAudio();
            }
        };
        SoundManager.WantsMute = function () {
            return SoundManager.bWantsMute;
        };
        SoundManager.IsMuted = function () {
            return SoundManager.bMute;
        };
        SoundManager.OnGamePaused = function (_bVal) {
            var modifier = _bVal ? 0.25 : 1;
            SoundManager.UpdateAmbienceVolume(modifier);
            SoundManager.UpdateMusicVolume(modifier);
        };
        SoundManager.StopMusic = function () {
            if (SoundManager.CurrentMusic) {
                SoundManager.CurrentMusic.onStop.removeAll(SoundManager);
                SoundManager.CurrentMusic.destroy();
            }
            SoundManager.CurrentMusicId = null;
            SoundManager.CurrentMusic = null;
        };
        SoundManager.PlayMusic = function (_id) {
            SoundManager.StopMusic();
            SoundManager.CurrentMusicId = _id;
            var sfx = GameUtil.game.add.audio(_id);
            sfx.loop = true;
            SoundManager.CurrentMusic = sfx;
            SoundManager.CurrentMusic.play();
            this.UpdateMusicVolume();
        };
        SoundManager.PlayNextGameSong = function () {
            var songs = [
                "music_game_1",
                "music_game_2",
                "music_game_3",
                "music_game_4",
                "music_game_5"
            ];
            var currentSongIndex = songs.indexOf(SoundManager.CurrentMusicId);
            if (currentSongIndex >= 0) {
                songs.splice(currentSongIndex, 1);
            }
            var id = songs[DinogenArena.WilkinUtil.GenerateRandomNumber(0, songs.length - 1)];
            SoundManager.StopMusic();
            SoundManager.CurrentMusicId = id;
            var sfx = GameUtil.game.add.audio(id);
            SoundManager.CurrentMusic = sfx;
            SoundManager.CurrentMusic.play();
            SoundManager.CurrentMusic.onStop.add(SoundManager.PlayNextGameSong, SoundManager);
            this.UpdateMusicVolume();
        };
        SoundManager.UpdateMusicVolume = function (_volMult) {
            if (_volMult === void 0) { _volMult = 1; }
            if (SoundManager.CurrentMusic) {
                var volMult = SoundManager.bMute ? 0 : _volMult;
                SoundManager.CurrentMusic.volume = (PlayerManager.CurrentProfile ? PlayerManager.CurrentProfile.settings.musicVolume : 1) * volMult;
            }
        };
        SoundManager.PlayAmbience = function (_id) {
            if (SoundManager.CurrentAmbience) {
                SoundManager.CurrentAmbience.destroy();
                SoundManager.CurrentAmbience.stop();
            }
            var sfx = GameUtil.game.add.audio(_id);
            sfx.loop = true;
            SoundManager.CurrentAmbience = sfx.play();
            this.UpdateAmbienceVolume();
        };
        SoundManager.UpdateAmbienceVolume = function (_volMult) {
            if (_volMult === void 0) { _volMult = 1; }
            if (SoundManager.CurrentAmbience) {
                var volMult = SoundManager.bMute ? 0 : (0.5 * _volMult);
                SoundManager.CurrentAmbience.volume = (PlayerManager.CurrentProfile ? PlayerManager.CurrentProfile.settings.gameVolume : 1) * volMult;
            }
        };
        SoundManager.DestroyAmbience = function () {
            if (SoundManager.CurrentAmbience) {
                SoundManager.CurrentAmbience.stop();
                SoundManager.CurrentAmbience.destroy();
                SoundManager.CurrentAmbience = null;
            }
        };
        SoundManager.PlayUISound = function (_id, _volumeMultiplier) {
            if (_volumeMultiplier === void 0) { _volumeMultiplier = 1; }
            if (SoundManager.bMute) {
                return null;
            }
            var desiredVolume = (PlayerManager.CurrentProfile ? PlayerManager.CurrentProfile.settings.gameVolume : 1) * _volumeMultiplier;
            var sfx = GameUtil.game.add.audio(_id);
            if (sfx) {
                sfx.volume = desiredVolume;
                sfx.play();
                sfx.onStop.add(SoundManager.DestroySound, SoundManager, 0, [sfx]);
            }
            return sfx;
        };
        SoundManager.PlayVox = function (_id, _volumeMultiplier) {
            if (_volumeMultiplier === void 0) { _volumeMultiplier = 1; }
            var desiredVolume = (PlayerManager.CurrentProfile ? PlayerManager.CurrentProfile.settings.gameVolume : 1) * _volumeMultiplier;
            var sfx = GameUtil.game.add.audio(_id);
            if (sfx) {
                sfx.volume = desiredVolume;
                sfx.play();
            }
            SoundManager.CurrentVox = sfx;
            return sfx;
        };
        SoundManager.PauseVox = function () {
            if (SoundManager.CurrentVox) {
                SoundManager.CurrentVox.pause();
            }
        };
        SoundManager.ResumeVox = function () {
            if (SoundManager.CurrentVox) {
                SoundManager.CurrentVox.resume();
            }
        };
        SoundManager.StopVox = function () {
            if (SoundManager.CurrentVox) {
                SoundManager.CurrentVox.stop();
            }
        };
        SoundManager.DestroyVox = function () {
            if (SoundManager.CurrentVox) {
                SoundManager.CurrentVox.stop();
                SoundManager.CurrentVox.destroy();
                SoundManager.CurrentVox = null;
            }
        };
        SoundManager.PlayWorldSound = function (_id, _x, _y, _randomMax, _volumeMultiplier, _bLoop) {
            if (_randomMax === void 0) { _randomMax = 0; }
            if (_volumeMultiplier === void 0) { _volumeMultiplier = 1; }
            if (_bLoop === void 0) { _bLoop = false; }
            if (SoundManager.bMute) {
                return null;
            }
            var desiredVolume = SoundManager.GetVolForWorldPosition(_x, _y) * (PlayerManager.CurrentProfile ? PlayerManager.CurrentProfile.settings.gameVolume : 1) * _volumeMultiplier;
            if (GameUtil.GetGameState().bGamePaused) {
                desiredVolume = 0;
            }
            var soundId = _id;
            if (_randomMax > 0) {
                soundId += "_" + DinogenArena.WilkinUtil.GenerateRandomNumber(1, _randomMax).toString();
            }
            if (!GameUtil.game.cache.checkSoundKey(soundId)) {
                console.error("Invalid sound: " + soundId);
            }
            var sfx = GameUtil.game.add.audio(soundId);
            if (sfx) {
                sfx.volume = desiredVolume;
                sfx.loop = _bLoop;
                sfx.play();
                if (sfx._sound) {
                    try {
                        if (soundId.indexOf("vox") == -1) {
                            var bRandomize = soundId.indexOf("wpn") >= 0 || soundId.indexOf("physics") >= 0 || soundId.indexOf("dino") >= 0 || soundId.indexOf("step") >= 0 || soundId.indexOf("explosion") >= 0;
                            if (bRandomize) {
                                sfx._sound.playbackRate.value = DinogenArena.WilkinUtil.GenerateRandomNumber(100, 125) * 0.01;
                            }
                        }
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
                var sound = sfx;
                if (sound) {
                    sound.onStop.add(SoundManager.DestroySound, SoundManager, 0, [sound]);
                }
            }
            return sfx;
        };
        SoundManager.DestroySound = function (_sfx) {
            try {
                if (_sfx) {
                    _sfx.onStop.removeAll(SoundManager);
                    _sfx.destroy();
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        SoundManager.GetVolForWorldPosition = function (_x, _y) {
            var world = GameUtil.GetGameState();
            var stageWidthMid = GameUtil.game.scale.width * 0.5;
            var stageHeightMid = GameUtil.game.scale.height * 0.5;
            var global = new Phaser.Point(_x, _y);
            global.x -= GameUtil.game.camera.x;
            global.y -= GameUtil.game.camera.y;
            var dist = DinogenArena.WilkinUtil.GetDistance(global.x, global.y, stageWidthMid, stageHeightMid);
            var volume = 1 - (dist * 0.0012);
            return Math.min(Math.max(0, volume), 1);
        };
        SoundManager.bMute = false;
        SoundManager.bWantsMute = false;
        SoundManager.CurrentMusicId = null;
        return SoundManager;
    }());
    DinogenArena.SoundManager = SoundManager;
    var InventoryManager = /** @class */ (function () {
        function InventoryManager() {
        }
        InventoryManager.Initialize = function () {
            this.db = {};
            this.db[InventoryManager.ITEM_FIREARM_MP5] = new DinogenArena.Firearm_MP5(1);
            this.db[InventoryManager.ITEM_FIREARM_AK74U] = new DinogenArena.Firearm_AK74U(7);
            this.db[InventoryManager.ITEM_FIREARM_UMP45] = new DinogenArena.Firearm_UMP45(12);
            this.db[InventoryManager.ITEM_FIREARM_MP7] = new DinogenArena.Firearm_MP7(16);
            this.db[InventoryManager.ITEM_FIREARM_P90] = new DinogenArena.Firearm_P90(21);
            this.db[InventoryManager.ITEM_FIREARM_M16A4] = new DinogenArena.Firearm_M16A4(1);
            this.db[InventoryManager.ITEM_FIREARM_M4] = new DinogenArena.Firearm_M4(5);
            this.db[InventoryManager.ITEM_FIREARM_AK47] = new DinogenArena.Firearm_AK47(15);
            this.db[InventoryManager.ITEM_FIREARM_TAR21] = new DinogenArena.Firearm_TAR21(22);
            this.db[InventoryManager.ITEM_FIREARM_FAMAS] = new DinogenArena.Firearm_FAMAS(29);
            this.db[InventoryManager.ITEM_FIREARM_M9] = new DinogenArena.Firearm_M9(1);
            this.db[InventoryManager.ITEM_FIREARM_GLOCK] = new DinogenArena.Firearm_Glock(2);
            this.db[InventoryManager.ITEM_FIREARM_USP45] = new DinogenArena.Firearm_USP45(8);
            this.db[InventoryManager.ITEM_FIREARM_FIVESEVEN] = new DinogenArena.Firearm_FiveSeven(13);
            this.db[InventoryManager.ITEM_FIREARM_DEAGLE] = new DinogenArena.Firearm_Deagle(18);
            this.db[InventoryManager.ITEM_FIREARM_MAGNUM] = new DinogenArena.Firearm_Magnum(27);
            this.db[InventoryManager.ITEM_FIREARM_MOSSBERG] = new DinogenArena.Firearm_Mossberg(3);
            this.db[InventoryManager.ITEM_FIREARM_M1014] = new DinogenArena.Firearm_M1014(7);
            this.db[InventoryManager.ITEM_FIREARM_M3] = new DinogenArena.Firearm_M3(15);
            this.db[InventoryManager.ITEM_FIREARM_SPAS12] = new DinogenArena.Firearm_SPAS12(21);
            this.db[InventoryManager.ITEM_FIREARM_KSG] = new DinogenArena.Firearm_KSG(28);
            this.db[InventoryManager.ITEM_FIREARM_M40A3] = new DinogenArena.Firearm_M40A3(1);
            this.db[InventoryManager.ITEM_FIREARM_RSASS] = new DinogenArena.Firearm_RSASS(6);
            this.db[InventoryManager.ITEM_FIREARM_TPR] = new DinogenArena.Firearm_TPR(11);
            this.db[InventoryManager.ITEM_FIREARM_HK417] = new DinogenArena.Firearm_HK417(15);
            this.db[InventoryManager.ITEM_FIREARM_MSR] = new DinogenArena.Firearm_MSR(21);
            this.db[InventoryManager.ITEM_FIREARM_AUGHBAR] = new DinogenArena.Firearm_AUGHBAR(10);
            this.db[InventoryManager.ITEM_FIREARM_MG4] = new DinogenArena.Firearm_MG4(12);
            this.db[InventoryManager.ITEM_FIREARM_QBB95] = new DinogenArena.Firearm_QBB95(16);
            this.db[InventoryManager.ITEM_FIREARM_M249] = new DinogenArena.Firearm_M249(23);
            this.db[InventoryManager.ITEM_FIREARM_HAMR] = new DinogenArena.Firearm_HAMR(25);
            this.db[InventoryManager.ITEM_FIREARM_BOW] = new DinogenArena.Firearm_Bow(9);
            this.db[InventoryManager.ITEM_FIREARM_M203] = new DinogenArena.Firearm_M203(14);
            this.db[InventoryManager.ITEM_FIREARM_CROSSBOW] = new DinogenArena.Firearm_Crossbow(20);
            this.db[InventoryManager.ITEM_FIREARM_RPG] = new DinogenArena.Firearm_RPG(24);
            this.db[InventoryManager.ITEM_FIREARM_XM25] = new DinogenArena.Firearm_XM25(26);
            this.db[InventoryManager.ITEM_FIREARM_MINIGUN] = new DinogenArena.Firearm_Minigun(30);
            this.db[InventoryManager.ITEM_FIREARM_JACKHAMMER] = new DinogenArena.Firearm_Jackhammer(30);
            this.db[InventoryManager.ITEM_FIREARM_QUADRA] = new DinogenArena.Firearm_Quadra(30);
            this.db[InventoryManager.ITEM_FIREARM_SAMR] = new DinogenArena.Firearm_SAMR(30);
            this.db[InventoryManager.ITEM_FIREARM_AUGPARA] = new DinogenArena.Firearm_AUGPARA(30);
            this.db[InventoryManager.ITEM_FIREARM_SCARL] = new DinogenArena.Firearm_SCARL(30);
            this.db[InventoryManager.ITEM_FIREARM_MAGNUM500] = new DinogenArena.Firearm_Magnum500(30);
            for (var id in this.db) {
                this.db[id].calculate();
            }
        };
        InventoryManager.IsSecondary = function (_id) {
            var item = this.db[_id];
            if (item) {
                return item.isLauncher() || item.isPistol();
            }
            return false;
        };
        InventoryManager.GetNameForId = function (_id) {
            var item = this.db[_id];
            if (item) {
                return item.getName();
            }
            return null;
        };
        InventoryManager.GetItemById = function (_id) {
            var item = this.db[_id];
            return item ? item.clone() : null;
        };
        InventoryManager.GetRandomItem = function (_bIncludeSurvivalItems) {
            if (_bIncludeSurvivalItems === void 0) { _bIncludeSurvivalItems = false; }
            var arr = InventoryManager.GetAll(_bIncludeSurvivalItems);
            return arr[DinogenArena.WilkinUtil.GenerateRandomNumber(0, arr.length - 1)];
        };
        InventoryManager.GetHunterItem = function () {
            var arr = [
                InventoryManager.ITEM_FIREARM_M16A4,
                InventoryManager.ITEM_FIREARM_AK47,
                InventoryManager.ITEM_FIREARM_HAMR,
                InventoryManager.ITEM_FIREARM_M249,
                InventoryManager.ITEM_FIREARM_MSR,
                InventoryManager.ITEM_FIREARM_TPR,
                InventoryManager.ITEM_FIREARM_M3
            ];
            return InventoryManager.GetItemById(arr[DinogenArena.WilkinUtil.GenerateRandomNumber(0, arr.length - 1)]);
        };
        InventoryManager.GetAll = function (_bIncludeSurvivalItems) {
            if (_bIncludeSurvivalItems === void 0) { _bIncludeSurvivalItems = false; }
            var arr = [];
            var id;
            for (id in this.db) {
                var item = InventoryManager.GetItemById(id);
                if (item instanceof DinogenArena.Firearm) {
                    if (_bIncludeSurvivalItems) {
                        arr.push(item);
                    }
                    else {
                        if (!item.isSurvivalOnly()) {
                            arr.push(item);
                        }
                    }
                }
            }
            return arr;
        };
        InventoryManager.GetAllByFirearmType = function (_type, _bIncludeSurvivalOnlyWeapons) {
            if (_bIncludeSurvivalOnlyWeapons === void 0) { _bIncludeSurvivalOnlyWeapons = false; }
            var arr = [];
            var id;
            for (id in this.db) {
                var item = InventoryManager.GetItemById(id);
                if (item.getFirearmType() == _type) {
                    if (item.isSurvivalOnly()) {
                        if (_bIncludeSurvivalOnlyWeapons) {
                            arr.push(item);
                        }
                    }
                    else {
                        arr.push(item);
                    }
                }
            }
            return arr;
        };
        InventoryManager.GetDefaultLoadouts = function () {
            var arr = new Array();
            var loadout = new DinogenArena.Loadout();
            loadout.id = "class_1";
            loadout.name = "Assault";
            loadout.weaponPrimary = InventoryManager.ITEM_FIREARM_MP5;
            loadout.weaponSecondary = InventoryManager.ITEM_FIREARM_M9;
            loadout.perkPlayer = DinogenArena.PerkManager.PERK_PLAYER_SPEED;
            loadout.perkWeapon = DinogenArena.PerkManager.PERK_WEAPON_AMMO;
            arr.push(loadout);
            loadout = new DinogenArena.Loadout();
            loadout.id = "class_2";
            loadout.name = "Marksman";
            loadout.weaponPrimary = InventoryManager.ITEM_FIREARM_M16A4;
            loadout.weaponSecondary = InventoryManager.ITEM_FIREARM_M9;
            loadout.perkPlayer = DinogenArena.PerkManager.PERK_PLAYER_SPEED;
            loadout.perkWeapon = DinogenArena.PerkManager.PERK_WEAPON_AMMO;
            arr.push(loadout);
            loadout = new DinogenArena.Loadout();
            loadout.id = "class_3";
            loadout.name = "Sniper";
            loadout.weaponPrimary = InventoryManager.ITEM_FIREARM_M40A3;
            loadout.weaponSecondary = InventoryManager.ITEM_FIREARM_M9;
            loadout.perkPlayer = DinogenArena.PerkManager.PERK_PLAYER_SPEED;
            loadout.perkWeapon = DinogenArena.PerkManager.PERK_WEAPON_AMMO;
            arr.push(loadout);
            return arr;
        };
        InventoryManager.ITEM_MELEE_KNIFE = "knife";
        InventoryManager.ITEM_FIREARM_AK47 = "ak47";
        InventoryManager.ITEM_FIREARM_M16A4 = "m16a4";
        InventoryManager.ITEM_FIREARM_M4 = "m4";
        InventoryManager.ITEM_FIREARM_TAR21 = "tar21";
        InventoryManager.ITEM_FIREARM_FAMAS = "famas";
        InventoryManager.ITEM_FIREARM_USP45 = "usp45";
        InventoryManager.ITEM_FIREARM_M9 = "m9";
        InventoryManager.ITEM_FIREARM_FIVESEVEN = "fiveseven";
        InventoryManager.ITEM_FIREARM_GLOCK = "glock";
        InventoryManager.ITEM_FIREARM_DEAGLE = "deagle";
        InventoryManager.ITEM_FIREARM_MAGNUM = "magnum";
        InventoryManager.ITEM_FIREARM_MP5 = "mp5";
        InventoryManager.ITEM_FIREARM_AK74U = "ak74u";
        InventoryManager.ITEM_FIREARM_UMP45 = "ump45";
        InventoryManager.ITEM_FIREARM_MP7 = "mp7";
        InventoryManager.ITEM_FIREARM_P90 = "p90";
        InventoryManager.ITEM_FIREARM_MOSSBERG = "mossberg";
        InventoryManager.ITEM_FIREARM_KSG = "ksg";
        InventoryManager.ITEM_FIREARM_M1014 = "m1014";
        InventoryManager.ITEM_FIREARM_M3 = "m3";
        InventoryManager.ITEM_FIREARM_SPAS12 = "spas12";
        InventoryManager.ITEM_FIREARM_M40A3 = "m40a3";
        InventoryManager.ITEM_FIREARM_RSASS = "rsass";
        InventoryManager.ITEM_FIREARM_HK417 = "hk417";
        InventoryManager.ITEM_FIREARM_TPR = "tpr";
        InventoryManager.ITEM_FIREARM_MSR = "msr";
        InventoryManager.ITEM_FIREARM_M249 = "m249";
        InventoryManager.ITEM_FIREARM_QBB95 = "qbb95";
        InventoryManager.ITEM_FIREARM_HAMR = "hamr";
        InventoryManager.ITEM_FIREARM_AUGHBAR = "aughbar";
        InventoryManager.ITEM_FIREARM_MG4 = "mg4";
        InventoryManager.ITEM_FIREARM_BOW = "bow";
        InventoryManager.ITEM_FIREARM_RPG = "rpg";
        InventoryManager.ITEM_FIREARM_M203 = "m203";
        InventoryManager.ITEM_FIREARM_XM25 = "xm25";
        InventoryManager.ITEM_FIREARM_CROSSBOW = "crossbow";
        InventoryManager.ITEM_FIREARM_MINIGUN = "minigun";
        InventoryManager.ITEM_FIREARM_JACKHAMMER = "jackhammer";
        InventoryManager.ITEM_FIREARM_QUADRA = "quadra";
        InventoryManager.ITEM_FIREARM_AUGPARA = "augpara";
        InventoryManager.ITEM_FIREARM_SCARL = "scarl";
        InventoryManager.ITEM_FIREARM_SAMR = "samr";
        InventoryManager.ITEM_FIREARM_MAGNUM500 = "magnum500";
        InventoryManager.CLASS_1 = "class_1";
        InventoryManager.CLASS_2 = "class_2";
        InventoryManager.CLASS_3 = "class_3";
        return InventoryManager;
    }());
    DinogenArena.InventoryManager = InventoryManager;
    var MapManager = /** @class */ (function () {
        function MapManager() {
        }
        MapManager.GetMap = function (_id) {
            return GameUtil.game.cache.getJSON(_id + "_data");
        };
        MapManager.GetCustomMapIds = function () {
            return [MapManager.MAP_RIVERSIDE, MapManager.MAP_COMPLEX, MapManager.MAP_METRO, MapManager.MAP_VAULT, MapManager.MAP_TUTORIAL, MapManager.MAP_HEXAGON];
        };
        MapManager.GetSurvivalMap = function () {
            return MapManager.GetMap(MapManager.MAP_SURVIVAL);
        };
        MapManager.GetTutorialMap = function () {
            return MapManager.GetMap(MapManager.MAP_TUTORIAL);
        };
        MapManager.MAP_RIVERSIDE = "map_riverside";
        MapManager.MAP_COMPLEX = "map_complex";
        MapManager.MAP_METRO = "map_metro";
        MapManager.MAP_VAULT = "map_vault";
        MapManager.MAP_HEXAGON = "map_hexagon";
        MapManager.MAP_SURVIVAL = "map_survival";
        MapManager.MAP_TUTORIAL = "map_tutorial";
        return MapManager;
    }());
    DinogenArena.MapManager = MapManager;
    var SurvivalManager = /** @class */ (function () {
        function SurvivalManager() {
        }
        SurvivalManager.GetAirSupport = function () {
            var arr = [
                {
                    type: SurvivalManager.SUPPORT_AIR,
                    id: DinogenArena.Helicopter.TYPE_SEAKNIGHT,
                    cost: 1000,
                    name: "Ammo Airdrop",
                    desc: "Transport helicopter - delivers 3 ammo crates."
                },
                {
                    type: SurvivalManager.SUPPORT_AIR,
                    id: DinogenArena.Helicopter.TYPE_COBRA,
                    cost: 2500,
                    name: "Cobra",
                    desc: "Light assault helicopter."
                },
                {
                    type: SurvivalManager.SUPPORT_AIR,
                    id: DinogenArena.Helicopter.TYPE_APACHE,
                    cost: 5000,
                    name: "Apache",
                    desc: "Heavy assault helicopter."
                },
                {
                    type: SurvivalManager.SUPPORT_AIR,
                    id: DinogenArena.Helicopter.TYPE_OSPREY,
                    cost: 10000,
                    name: "Osprey Airdrop",
                    desc: "Heavy support helicopter - delivers 3 random weapon crates."
                }
            ];
            return arr;
        };
        SurvivalManager.GetSoldierSupport = function () {
            var arr = [
                {
                    type: SurvivalManager.SUPPORT_SOLDIER,
                    id: SurvivalManager.SOLDIER_STANDARD,
                    cost: 2000,
                    name: "Standard",
                    desc: "Standard infantry."
                },
                {
                    type: SurvivalManager.SUPPORT_SOLDIER,
                    id: SurvivalManager.SOLDIER_SHOTGUN,
                    cost: 2500,
                    name: "Shotgunner",
                    desc: "Close-range specialist."
                },
                {
                    type: SurvivalManager.SUPPORT_SOLDIER,
                    id: SurvivalManager.SOLDIER_SNIPER,
                    cost: 3000,
                    name: "Sniper",
                    desc: "Long-range specialist."
                },
                {
                    type: SurvivalManager.SUPPORT_SOLDIER,
                    id: SurvivalManager.SOLDIER_HEAVY,
                    cost: 3500,
                    name: "Heavy",
                    desc: "Heavy weapons specialist."
                }
            ];
            return arr;
        };
        SurvivalManager.SUPPORT_AIR = "support_air";
        SurvivalManager.SUPPORT_SOLDIER = "support_soldier";
        SurvivalManager.AIR_AMMO_AIRDROP = "AIR_AMMO_AIRDROP";
        SurvivalManager.AIR_COBRA = "AIR_COBRA";
        SurvivalManager.AIR_APACHE = "AIR_APACHE";
        SurvivalManager.AIR_OSPREY_AIRDROP = "AIR_OSPREY_AIRDROP";
        SurvivalManager.SOLDIER_STANDARD = "soldier_standard";
        SurvivalManager.SOLDIER_SHOTGUN = "soldier_shotgun";
        SurvivalManager.SOLDIER_SNIPER = "soldier_sniper";
        SurvivalManager.SOLDIER_HEAVY = "soldier_heavy";
        return SurvivalManager;
    }());
    DinogenArena.SurvivalManager = SurvivalManager;
    var DinosaurManager = /** @class */ (function () {
        function DinosaurManager() {
        }
        DinosaurManager.Initialize = function () {
            this.db = {};
            var data;
            data = {};
            data["id"] = DinogenArena.Dinosaur.TYPE_COMPY;
            data["name"] = "Compy";
            data["desc"] = "Small, quick, mobile.";
            data["speed"] = 3;
            data["damage"] = 1;
            data["health"] = 1;
            this.db[DinogenArena.Dinosaur.TYPE_COMPY] = data;
            data = {};
            data["id"] = DinogenArena.Dinosaur.TYPE_DILO;
            data["name"] = "Dilophosaurus";
            data["desc"] = "Spits toxic venom.";
            data["speed"] = 2;
            data["damage"] = 2;
            data["health"] = 1;
            this.db[DinogenArena.Dinosaur.TYPE_DILO] = data;
            data = {};
            data["id"] = DinogenArena.Dinosaur.TYPE_RAPTOR;
            data["name"] = "Raptor";
            data["desc"] = "Agile hunter.";
            data["speed"] = 2;
            data["damage"] = 2;
            data["health"] = 2;
            this.db[DinogenArena.Dinosaur.TYPE_RAPTOR] = data;
            data = {};
            data["id"] = DinogenArena.Dinosaur.TYPE_NEEDLER;
            data["name"] = "Needler";
            data["desc"] = "Launches deadly needles.";
            data["speed"] = 2;
            data["damage"] = 3;
            data["health"] = 2;
            this.db[DinogenArena.Dinosaur.TYPE_NEEDLER] = data;
            data = {};
            data["id"] = DinogenArena.Dinosaur.TYPE_SPINOSAURUS;
            data["name"] = "Spinosaurus";
            data["desc"] = "Slow but powerful.";
            data["speed"] = 1;
            data["damage"] = 3;
            data["health"] = 3;
            this.db[DinogenArena.Dinosaur.TYPE_SPINOSAURUS] = data;
            data = {};
            data["id"] = DinogenArena.Dinosaur.TYPE_ALLOSAURUS;
            data["name"] = "Allosaurus";
            data["desc"] = "Strong and versatile.";
            data["speed"] = 2;
            data["damage"] = 2;
            data["health"] = 3;
            this.db[DinogenArena.Dinosaur.TYPE_ALLOSAURUS] = data;
            data = {};
            data["id"] = DinogenArena.Dinosaur.TYPE_TREX;
            data["name"] = "T. Rex";
            data["desc"] = "King of the dinosaurs.";
            data["speed"] = 3;
            data["damage"] = 3;
            data["health"] = 3;
            this.db[DinogenArena.Dinosaur.TYPE_TREX] = data;
        };
        DinosaurManager.GetDinosaurInfo = function (_id) {
            return this.db[_id];
        };
        return DinosaurManager;
    }());
    DinogenArena.DinosaurManager = DinosaurManager;
    var APIUtil = /** @class */ (function () {
        function APIUtil() {
        }
        APIUtil.InitAPI = function () {
            console.log("Initializing API: " + APIUtil.CurrentAPI);
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                if (APIUtil.ag) {
                    return;
                }
                APIUtil.ag = GameUtil.game.ag;
                APIUtil.ValidateSession(true);
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    return;
                }
                APIUtil.ngio = GameUtil.game.ngio;
                APIUtil.ngio.debug = GameUtil.IsDebugging();
                APIUtil.ValidateSession(true);
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                if (APIUtil.kong) {
                    return;
                }
                APIUtil.kong = GameUtil.game.kong;
                APIUtil.kong.services.addEventListener("login", APIUtil.OnLoggedIn);
            }
        };
        APIUtil.IsAutoPlay = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                return true;
            }
            return false;
        };
        APIUtil.UseSponsorState = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                return true;
            }
            return false;
        };
        APIUtil.AdsAreAllowed = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                return false;
            }
            return true;
        };
        APIUtil.OpenCurrentAPIHomepage = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                open("http://armor.ag/MoreGames", "_blank");
            }
            else {
                GameUtil.OpenWilkinHomepage();
            }
        };
        APIUtil.OpenCurrentAPIFacebook = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                open("http://facebook.com/ArmorGames", "_blank");
            }
            else {
                GameUtil.OpenWilkinFacebook();
            }
        };
        APIUtil.GetUserName = function () {
            if (APIUtil.CurrentUserName) {
                return APIUtil.CurrentUserName;
            }
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                if (APIUtil.ag) {
                    //...
                }
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio && APIUtil.ngio.user) {
                    return APIUtil.ngio.user.name;
                }
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                if (APIUtil.kong) {
                    return APIUtil.kong.services.getUsername();
                }
            }
            return "Player";
        };
        APIUtil.ValidateSession = function (_bPromptUser) {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                if (APIUtil.ag) {
                    APIUtil.ag.authenticateUser().then(function (user) {
                        APIUtil.CurrentUserName = user["username"];
                        if (_bPromptUser) {
                            APIUtil.OnLoggedIn();
                        }
                    }).catch(function (error) {
                        APIUtil.CurrentUserName = null;
                        if (_bPromptUser) {
                            APIUtil.ShowSignInFailedWindow();
                        }
                    });
                }
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                APIUtil.ngio.getValidSession(function () {
                    if (APIUtil.ngio.user) {
                        APIUtil.CurrentUserName = APIUtil.ngio.user.name;
                    }
                    if (_bPromptUser) {
                        if (APIUtil.ngio.user) {
                            APIUtil.OnLoggedIn();
                        }
                        else {
                            APIUtil.ShowSignInWindow();
                        }
                    }
                });
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                if (_bPromptUser) {
                    APIUtil.ShowSignInWindow();
                }
            }
        };
        APIUtil.CanLogIn = function () {
            return APIUtil.CurrentAPI != null;
        };
        APIUtil.CanLogOut = function () {
            return false; //APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS;
        };
        APIUtil.IsLoggedIn = function () {
            if (!APIUtil.CurrentAPI) {
                return false;
            }
            APIUtil.ValidateSession(false);
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                if (APIUtil.ag) {
                    if (APIUtil.CurrentUserName != null) {
                        return true;
                    }
                }
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    return APIUtil.ngio.user;
                }
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                if (APIUtil.kong) {
                    return !APIUtil.kong.services.isGuest();
                }
            }
            return false;
        };
        APIUtil.GetCurrentAPIId = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                return "AG";
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                return "NG";
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                return "KONG";
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_GAME_DISTRIBUTION) {
                return "GD";
            }
            return "N/A";
        };
        APIUtil.GetCurrentAPIName = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                return "Armor Games";
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                return "Newgrounds";
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                return "Kongregate";
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_GAME_DISTRIBUTION) {
                return "Game Distribution";
            }
            return null;
        };
        APIUtil.GetCurrentAPIIconId = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                return "icon_armor_games";
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                return "icon_newgrounds";
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                return "icon_kongregate";
            }
            return "icon_api";
        };
        APIUtil.SubmitSurvivalScore = function (_val, _callback, _callbackContext) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                GameUtil.game.createWindow({
                    titleText: "Submit Score",
                    type: DinogenArena.Window.TYPE_MESSAGE,
                    descText: "Leaderboards for " + APIUtil.GetCurrentAPIName() + " are currently unavailable!"
                });
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    APIUtil.ngio.callComponent("ScoreBoard.postScore", { id: 8185, value: _val }, APIUtil.OnSurvivalScoreSubmitted);
                }
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                if (APIUtil.kong) {
                    APIUtil.kong.stats.submit("Survival", _val);
                }
            }
            else {
                GameUtil.game.createWindow({
                    titleText: "Submit Score",
                    type: DinogenArena.Window.TYPE_MESSAGE,
                    descText: "Could not submit score! Check your network connection."
                });
            }
            if (_callback != null) {
                _callback.apply(_callbackContext);
            }
        };
        APIUtil.ShowSignInWindow = function () {
            GameUtil.game.createWindow({
                titleText: "Sign In",
                type: DinogenArena.Window.TYPE_YES_NO,
                descText: "Would you like to connect your " + APIUtil.GetCurrentAPIName() + " account to Dinogen Arena? ",
                icon: APIUtil.GetCurrentAPIIconId(),
                bHideCloseButton: true,
                yesCallback: APIUtil.RequestLogin,
                yesCallbackContext: APIUtil
            });
        };
        APIUtil.ShowSignInFailedWindow = function () {
            GameUtil.game.createWindow({
                titleText: "Sign In Failed",
                type: DinogenArena.Window.TYPE_MESSAGE,
                descText: "There was a problem connecting your " + APIUtil.GetCurrentAPIName() + " account!"
            });
        };
        APIUtil.ShowSignOutWindow = function () {
            GameUtil.game.createWindow({
                titleText: "Logged Out",
                type: DinogenArena.Window.TYPE_MESSAGE,
                descText: "You've disconnected your " + APIUtil.GetCurrentAPIName() + " account.",
                icon: APIUtil.GetCurrentAPIIconId()
            });
        };
        APIUtil.ShowWelcomeWindow = function () {
            var userName = APIUtil.GetUserName();
            GameUtil.game.createWindow({
                titleText: "Signed In",
                type: DinogenArena.Window.TYPE_MESSAGE,
                descText: "Welcome " + userName + "!",
                icon: APIUtil.GetCurrentAPIIconId()
            });
        };
        APIUtil.LoadSurvivalLeaderboards = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                GameUtil.game.createWindow({
                    titleText: "Survival Leaderboards",
                    type: DinogenArena.Window.TYPE_MESSAGE,
                    descText: "Armor Games currently does not support leaderboards for HTML5 games! Check back soon..."
                });
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    APIUtil.ngio.callComponent("ScoreBoard.getScores", { id: 8185 }, APIUtil.OnNewgroundsSurvivalLeaderboardsLoaded);
                }
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                var loader = GameUtil.game.load.json("kong_leaderboards", "https://api.kongregate.com/api/high_scores/lifetime/134173.json", true);
                loader.crossOrigin = true;
                loader.start();
                loader.onLoadComplete.add(APIUtil.OnKongSurvivalLeaderboardsLoaded);
            }
            else {
                GameUtil.game.createWindow({
                    titleText: "Survival Leaderboards",
                    type: DinogenArena.Window.TYPE_MESSAGE,
                    descText: "Error loading leaderboards! Check your network connection."
                });
            }
        };
        APIUtil.OnKongSurvivalLeaderboardsLoaded = function () {
            var json = GameUtil.game.cache.getJSON("kong_leaderboards");
            var scores = json["lifetime_scores"];
            var playerList = [];
            var newItem;
            for (var i = 0; i < scores.length; i++) {
                var item = scores[i];
                newItem = {
                    name: item["username"],
                    score: item["score"],
                    url: "https://www.kongregate.com/accounts/" + item["username"]
                };
                playerList.push(newItem);
            }
            APIUtil.ShowSurvivalLeaderboards(playerList);
        };
        APIUtil.OnNewgroundsSurvivalLeaderboardsLoaded = function (_result) {
            if (_result && _result.success) {
                var scoreboard = _result.scoreboard;
                var scores = _result.scores;
                var playerList = [];
                var newItem;
                for (var i = 0; i < scores.length; i++) {
                    var item = scores[i];
                    var user = item["user"];
                    newItem = {
                        name: user.name,
                        score: item["value"],
                        url: "http://" + user.name + ".newgrounds.com"
                    };
                    playerList.push(newItem);
                }
                APIUtil.ShowSurvivalLeaderboards(playerList);
            }
            else {
                GameUtil.game.createWindow({
                    titleText: "Survival Leaderboards",
                    type: DinogenArena.Window.TYPE_MESSAGE,
                    descText: "Error loading leaderboards! Check your network connection."
                });
            }
        };
        APIUtil.OnSurvivalScoreSubmitted = function (_result) {
            if (_result && _result.success) {
                APIUtil.LoadSurvivalLeaderboards();
            }
            else {
                GameUtil.game.createWindow({
                    titleText: "Submit Score",
                    type: DinogenArena.Window.TYPE_MESSAGE,
                    descText: "Error submitting score! Check your network connection."
                });
            }
        };
        APIUtil.ShowSurvivalLeaderboards = function (_playerList) {
            GameUtil.game.createWindow({
                titleText: "Survival Leaderboards",
                type: DinogenArena.Window.TYPE_SURVIVAL_LEADERBOARDS,
                descText: "Check out the top ranked players!",
                playerList: _playerList,
                icon: APIUtil.GetCurrentAPIIconId()
            });
        };
        APIUtil.UnlockAchievement = function (_id) {
            var item = DinogenArena.Achievements.GetById(_id);
            if (!item) {
                return;
            }
            console.log("APIUtil::UnlockAchievement " + _id);
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    APIUtil.ngio.callComponent("Medal.unlock", { id: item["numId"] }, APIUtil.OnMedalUnlocked);
                }
            }
        };
        APIUtil.OnMedalUnlocked = function (_result) {
            console.log(_result);
        };
        APIUtil.SaveProfileData = function () {
            if (!PlayerManager.profiles) {
                return;
            }
            var profileData = PlayerManager.profiles[0];
            console.log(profileData);
            if (profileData) {
                if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                    if (APIUtil.ag) {
                        APIUtil.ag.saveGame("profile", { profileData: profileData.toObject }).then(function (response) {
                            console.log(response);
                            //key, success
                        }).catch(function (error) {
                            console.error(error);
                        });
                    }
                }
            }
        };
        APIUtil.LoadProfileData = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_ARMOR_GAMES) {
                if (APIUtil.ag) {
                    APIUtil.ag.retrieveGame("profile").then(function (response) {
                        var data = response.profile;
                        console.log(data);
                        if (data && data.profileData) {
                            if (PlayerManager.CurrentProfile) {
                                PlayerManager.CurrentProfile.fromObject(data.profileData);
                            }
                            else {
                                console.log("No current profile");
                            }
                        }
                    }).catch(function (error) {
                        console.error(error);
                    });
                }
            }
        };
        APIUtil.RequestLogin = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    APIUtil.ngio.requestLogin(APIUtil.OnLoggedIn, APIUtil.OnLoginFailed, APIUtil.OnLoginCancelled);
                }
            }
            else if (APIUtil.CurrentAPI == APIUtil.API_KONGREGATE) {
                try {
                    if (APIUtil.kong) {
                        APIUtil.kong.services.showRegistrationBox();
                    }
                }
                catch (e) {
                    console.log(e);
                }
            }
        };
        APIUtil.OnLoggedIn = function () {
            //APIUtil.ShowWelcomeWindow();
            if (PlayerManager.CurrentProfile) {
                PlayerManager.CurrentProfile.name = APIUtil.GetUserName();
            }
            //APIUtil.LoadProfileData();
            GameUtil.game.refreshMainMenu();
        };
        APIUtil.OnLoginFailed = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    APIUtil.ShowSignInFailedWindow();
                }
            }
        };
        APIUtil.OnLoginCancelled = function () {
            if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    APIUtil.ShowSignInFailedWindow();
                }
            }
        };
        APIUtil.Logout = function () {
            APIUtil.CurrentUserName = null;
            if (APIUtil.CurrentAPI == APIUtil.API_NEWGROUNDS) {
                if (APIUtil.ngio) {
                    APIUtil.ngio.logOut(function () {
                        APIUtil.ShowSignOutWindow();
                        GameUtil.game.refreshMainMenu();
                    });
                }
            }
        };
        APIUtil.LogEvent = function (_id) {
            //...
        };
        APIUtil.API_ARMOR_GAMES = "API_ARMOR_GAMES";
        APIUtil.API_NEWGROUNDS = "API_NEWGROUNDS";
        APIUtil.API_KONGREGATE = "API_KONGREGATE";
        APIUtil.API_GAME_DISTRIBUTION = "API_GAME_DISTRIBUTION";
        APIUtil.CurrentAPI = null;
        APIUtil.CurrentUserName = null;
        return APIUtil;
    }());
    DinogenArena.APIUtil = APIUtil;
    var AdUtil = /** @class */ (function () {
        function AdUtil() {
        }
        AdUtil.OnPauseGame = function () {
            console.log("OnPauseGame");
            AdUtil.bGameWasMuted = SoundManager.IsMuted();
            SoundManager.SetMute(true);
            AdUtil.bPaused = true;
        };
        AdUtil.OnResumeGame = function () {
            console.log("OnResumeGame");
            GameUtil.ForceStartAudio();
            if (!AdUtil.bGameWasMuted) {
                SoundManager.SetMute(false);
            }
            AdUtil.bPaused = false;
        };
        AdUtil.IsPaused = function () {
            return AdUtil.bPaused;
        };
        AdUtil.ShowAd = function () {
            console.log("Attemping to show ad");
            if (GameUtil.AdsEnabled()) {
                var ads = GameUtil.game.ads;
                if (ads) {
                    console.log("Show ad");
                    ads.showAd();
                }
                else {
                    console.warn("Invalid GameUtil.game.ads instance");
                }
            }
            else {
                console.log("Ads are not enabled");
            }
        };
        AdUtil.bPaused = false;
        AdUtil.bGameWasMuted = false;
        return AdUtil;
    }());
    DinogenArena.AdUtil = AdUtil;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var Achievements = /** @class */ (function () {
        function Achievements() {
        }
        Achievements.Initialize = function () {
            Achievements.achievements = {};
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_TUTORIAL, "Newbie", "Complete the tutorial", 55082);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_KILLS_1, "Kills I", "Get 10 kills", 55083);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_KILLS_2, "Kills II", "Get 100 kills", 55084);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_KILLS_3, "Kills III", "Get 500 kills", 55085);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_DINO_KILL, "Predator", "Kill an enemy as a dinosaur in a Ranked game", 55089);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_CTF_CAPTURE, "Captor", "Capture the enemy flag in a Capture the Flag game", 55086);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_TDM_MVP, "MVP", "Place 1st in a Team Deathmach game", 55090);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_FIRST_BLOOD, "Bloodthirsty", "Get the first kill in a Ranked game", 55091);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_PRESTIGE, "Royalty", "Prestige in Ranked mode", 55088);
            Achievements.CreateAchievement(Achievements.achievements, Achievements.ACH_SURVIVAL, "Survivor", "Complete wave 5 in Survival mode", 55087);
        };
        Achievements.GetAchievements = function () {
            return Achievements.achievements;
        };
        Achievements.GetById = function (_id) {
            return Achievements.achievements[_id];
        };
        Achievements.CreateAchievement = function (_obj, _id, _name, _desc, _numId) {
            var obj = {
                id: _id,
                name: _name,
                desc: _desc,
                numId: _numId,
                bUnlocked: false
            };
            _obj[_id] = obj;
        };
        Achievements.GetAllIds = function () {
            return [
                Achievements.ACH_TUTORIAL,
                Achievements.ACH_KILLS_1,
                Achievements.ACH_KILLS_2,
                Achievements.ACH_KILLS_3,
                Achievements.ACH_DINO_KILL,
                Achievements.ACH_CTF_CAPTURE,
                Achievements.ACH_TDM_MVP,
                Achievements.ACH_FIRST_BLOOD,
                Achievements.ACH_PRESTIGE,
                Achievements.ACH_SURVIVAL
            ];
        };
        Achievements.ACH_TUTORIAL = "ACH_TUTORIAL";
        Achievements.ACH_KILLS_1 = "ACH_KILLS_1";
        Achievements.ACH_KILLS_2 = "ACH_KILLS_2";
        Achievements.ACH_KILLS_3 = "ACH_KILLS_3";
        Achievements.ACH_DINO_KILL = "ACH_DINO_KILL";
        Achievements.ACH_CTF_CAPTURE = "ACH_CTF_CAPTURE";
        Achievements.ACH_TDM_MVP = "ACH_TDM_MVP";
        Achievements.ACH_FIRST_BLOOD = "ACH_FIRST_BLOOD";
        Achievements.ACH_PRESTIGE = "ACH_PRESTIGE";
        Achievements.ACH_SURVIVAL = "ACH_SURVIVAL";
        return Achievements;
    }());
    DinogenArena.Achievements = Achievements;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var PerkManager = /** @class */ (function () {
        function PerkManager() {
        }
        PerkManager.Initialize = function () {
            this.db = {};
            var perk;
            /* PLAYER */
            perk = new Perk();
            perk.type = Perk.TYPE_PLAYER;
            perk.id = PerkManager.PERK_PLAYER_SPEED;
            perk.unlockLevel = 1;
            perk.name = "Lightweight";
            perk.desc = "Faster movement";
            perk.modifiers = [{ id: "move_speed", value: 1.25 }];
            perk.cost = 4000;
            this.db[PerkManager.PERK_PLAYER_SPEED] = perk;
            perk = new Perk();
            perk.type = Perk.TYPE_PLAYER;
            perk.id = PerkManager.PERK_PLAYER_EYE;
            perk.unlockLevel = 4;
            perk.name = "Eagle Eye";
            perk.desc = "Increased view distance";
            perk.modifiers = [{ id: "view_distance", value: 1.35 }];
            perk.cost = 2000;
            this.db[PerkManager.PERK_PLAYER_EYE] = perk;
            perk = new Perk();
            perk.type = Perk.TYPE_PLAYER;
            perk.id = PerkManager.PERK_PLAYER_DINO;
            perk.unlockLevel = 9;
            perk.name = "Crusader";
            perk.desc = "Less damage from dinosaurs";
            perk.modifiers = [{ id: "damage_receive_dino", value: 0.5 }];
            perk.cost = 8000;
            this.db[PerkManager.PERK_PLAYER_DINO] = perk;
            perk = new Perk();
            perk.type = Perk.TYPE_PLAYER;
            perk.id = PerkManager.PERK_PLAYER_REGEN;
            perk.unlockLevel = 14;
            perk.name = "Specialist";
            perk.desc = "Faster health recovery";
            perk.modifiers = [{ id: "regen_max", value: 0.5 }, { id: "regen_speed", value: 8 }];
            perk.cost = 6000;
            this.db[PerkManager.PERK_PLAYER_REGEN] = perk;
            perk = new Perk();
            perk.type = Perk.TYPE_PLAYER;
            perk.id = PerkManager.PERK_PLAYER_VEST;
            perk.unlockLevel = 18;
            perk.name = "Kevlar";
            perk.desc = "Less damage from bullets";
            perk.modifiers = [{ id: "damage_receive_bullet", value: 0.75 }];
            this.db[PerkManager.PERK_PLAYER_VEST] = perk;
            /* WEAPON */
            perk = new Perk();
            perk.type = Perk.TYPE_WEAPON;
            perk.id = PerkManager.PERK_WEAPON_AMMO;
            perk.unlockLevel = 1;
            perk.name = "Bandolier";
            perk.desc = "Increased starting ammo";
            perk.modifiers = [{ id: "ammo", value: 2 }];
            this.db[PerkManager.PERK_WEAPON_AMMO] = perk;
            perk = new Perk();
            perk.type = Perk.TYPE_WEAPON;
            perk.id = PerkManager.PERK_WEAPON_ACCURACY;
            perk.unlockLevel = 7;
            perk.name = "Steady Aim";
            perk.desc = "Increased accuracy";
            perk.modifiers = [{ id: "accuracy", value: 0.5 }];
            perk.cost = 2000;
            this.db[PerkManager.PERK_WEAPON_ACCURACY] = perk;
            perk = new Perk();
            perk.type = Perk.TYPE_WEAPON;
            perk.id = PerkManager.PERK_WEAPON_RELOAD;
            perk.unlockLevel = 14;
            perk.name = "Quick Hands";
            perk.desc = "Faster reload speed";
            perk.modifiers = [{ id: "reload_speed", value: 0.35 }];
            perk.cost = 4000;
            this.db[PerkManager.PERK_WEAPON_RELOAD] = perk;
            perk = new Perk();
            perk.type = Perk.TYPE_WEAPON;
            perk.id = PerkManager.PERK_WEAPON_DAMAGE;
            perk.unlockLevel = 19;
            perk.name = "Stopping Power";
            perk.desc = "Increased bullet damage";
            perk.modifiers = [{ id: "damage_inflict_bullet", value: 1.25 }];
            perk.cost = 6000;
            this.db[PerkManager.PERK_WEAPON_DAMAGE] = perk;
            perk = new Perk();
            perk.type = Perk.TYPE_WEAPON;
            perk.id = PerkManager.PERK_WEAPON_ROF;
            perk.unlockLevel = 26;
            perk.name = "Rapid Fire";
            perk.desc = "Increased fire rate";
            perk.modifiers = [{ id: "fire_rate", value: 0.8 }];
            perk.cost = 8000;
            this.db[PerkManager.PERK_WEAPON_ROF] = perk;
        };
        PerkManager.GetPlayerPerkIDs = function () {
            return [
                PerkManager.PERK_PLAYER_SPEED,
                PerkManager.PERK_PLAYER_EYE,
                PerkManager.PERK_PLAYER_DINO,
                PerkManager.PERK_PLAYER_REGEN,
                PerkManager.PERK_PLAYER_VEST
            ];
        };
        PerkManager.GetWeaponPerkIDs = function () {
            return [
                PerkManager.PERK_WEAPON_AMMO,
                PerkManager.PERK_WEAPON_ACCURACY,
                PerkManager.PERK_WEAPON_RELOAD,
                PerkManager.PERK_WEAPON_DAMAGE,
                PerkManager.PERK_WEAPON_ROF
            ];
        };
        PerkManager.GetPerk = function (_id) {
            var perk = this.db[_id];
            return perk;
        };
        PerkManager.GetAll = function () {
            var arr = [];
            var id;
            for (id in this.db) {
                arr.push(PerkManager.GetPerk(id));
            }
            return arr;
        };
        PerkManager.GetSurvivalPerks = function () {
            var player = [
                PerkManager.PERK_PLAYER_EYE,
                PerkManager.PERK_PLAYER_SPEED,
                PerkManager.PERK_PLAYER_REGEN,
                PerkManager.PERK_PLAYER_DINO
            ];
            var weapon = [
                PerkManager.PERK_WEAPON_ACCURACY,
                PerkManager.PERK_WEAPON_RELOAD,
                PerkManager.PERK_WEAPON_DAMAGE,
                PerkManager.PERK_WEAPON_ROF
            ];
            return [player, weapon];
        };
        PerkManager.IsPlayerPerk = function (_id) {
            var perk = PerkManager.GetPerk(_id);
            if (perk) {
                return perk.type == "player";
            }
            return false;
        };
        PerkManager.PERK_PLAYER_SPEED = "perk_player_speed";
        PerkManager.PERK_PLAYER_REGEN = "perk_player_regen";
        PerkManager.PERK_PLAYER_DINO = "perk_player_dino";
        PerkManager.PERK_PLAYER_VEST = "perk_player_vest";
        PerkManager.PERK_PLAYER_EYE = "perk_player_eye";
        PerkManager.PERK_WEAPON_RELOAD = "perk_weapon_reload";
        PerkManager.PERK_WEAPON_DAMAGE = "perk_weapon_damage";
        PerkManager.PERK_WEAPON_AMMO = "perk_weapon_ammo";
        PerkManager.PERK_WEAPON_ACCURACY = "perk_weapon_accuracy";
        PerkManager.PERK_WEAPON_ROF = "perk_weapon_rof";
        return PerkManager;
    }());
    DinogenArena.PerkManager = PerkManager;
    var Perk = /** @class */ (function () {
        function Perk() {
            this.unlockLevel = 1;
            this.cost = 0;
        }
        Perk.prototype.getUnlockLevel = function () {
            return this.unlockLevel;
        };
        Perk.TYPE_PLAYER = "player";
        Perk.TYPE_WEAPON = "weapon";
        return Perk;
    }());
    DinogenArena.Perk = Perk;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var Challenges = /** @class */ (function () {
        function Challenges() {
            this.kills = 0;
            this.firstBloods = 0;
            this.wins = 0;
            this.captures = 0;
            this.killsAsDino = 0;
            this.multiKills = 0;
            this.meleeKills = 0;
            this.mvps = 0;
            this.kingKills = 0;
            this.tiers = {};
            this.tiers[Challenges.TIER_GENERIC] = [
                5,
                25,
                50
            ];
            this.tiers[Challenges.TIER_KILLS] = [
                50,
                250,
                500
            ];
            this.tiers[Challenges.TIER_WEAPON_KILLS] = [
                10,
                50,
                100
            ];
            this.reset();
        }
        Challenges.prototype.destroy = function () {
            this.tiers = null;
            this.weaponKills = null;
        };
        Challenges.prototype.toObject = function () {
            return {
                kills: this.kills,
                weaponKills: this.weaponKills,
                wins: this.wins,
                captures: this.captures,
                killsAsDino: this.killsAsDino,
                multiKills: this.multiKills,
                meleeKills: this.meleeKills,
                mvps: this.mvps,
                kingKills: this.kingKills
            };
        };
        Challenges.prototype.fromObject = function (_obj) {
            this.kills = _obj["kills"];
            this.weaponKills = _obj["weaponKills"];
            this.wins = _obj["wins"];
            this.captures = _obj["captures"];
            this.killsAsDino = _obj["killsAsDino"];
            this.multiKills = _obj["multiKills"];
            this.meleeKills = _obj["meleeKills"];
            this.mvps = _obj["mvps"];
            this.kingKills = _obj["kingKills"];
        };
        Challenges.prototype.reset = function () {
            this.kills = 0;
            this.firstBloods = 0;
            this.wins = 0;
            this.captures = 0;
            this.meleeKills = 0;
            this.killsAsDino = 0;
            this.weaponKills = {};
            /* Prestige */
            this.multiKills = 0;
            this.mvps = 0;
            this.kingKills = 0;
            /*
            var arr = InventoryManager.GetAll();
            for (var i = 0; i < arr.length; i++)
            {
                this.weaponKills[arr[i].getId()] = 49; //WilkinUtil.GenerateRandomNumber(0, 100);
            }
            */
        };
        Challenges.prototype.addKill = function () {
            this.kills++;
            return this.kills;
        };
        Challenges.prototype.addWeaponKill = function (_id) {
            if (this.weaponKills[_id] == undefined) {
                this.weaponKills[_id] = 0;
            }
            this.weaponKills[_id]++;
            return this.weaponKills[_id];
        };
        Challenges.prototype.addKillAsDino = function () {
            this.killsAsDino++;
            return this.killsAsDino;
        };
        Challenges.prototype.addWin = function () {
            this.wins++;
            return this.wins;
        };
        Challenges.prototype.addCapture = function () {
            this.captures++;
            return this.captures;
        };
        Challenges.prototype.addFirstBlood = function () {
            this.firstBloods++;
            return this.firstBloods;
        };
        Challenges.prototype.addMultiKill = function () {
            this.multiKills++;
            return this.multiKills;
        };
        Challenges.prototype.addKingKill = function () {
            this.kingKills++;
            return this.kingKills;
        };
        Challenges.prototype.addMeleeKill = function () {
            this.meleeKills++;
            return this.meleeKills;
        };
        Challenges.prototype.addMVPs = function () {
            this.mvps++;
            return this.mvps;
        };
        Challenges.prototype.getTierGoalFor = function (_id, _index) {
            return this.tiers[_id][_index];
        };
        Challenges.prototype.getTierFor = function (_id, _val) {
            var arr = this.tiers[_id];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == _val) {
                    return i + 1;
                }
            }
            return 0;
        };
        Challenges.XP_BONUS = 500;
        Challenges.TIER_GENERIC = "generic";
        Challenges.TIER_KILLS = "kills";
        Challenges.TIER_WEAPON_KILLS = "weapon_kills";
        return Challenges;
    }());
    DinogenArena.Challenges = Challenges;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var Loadout = /** @class */ (function () {
        function Loadout() {
        }
        Loadout.prototype.clone = function () {
            var loadout = new Loadout();
            loadout.id = this.id;
            loadout.name = this.id;
            loadout.weaponPrimary = this.weaponPrimary;
            loadout.weaponSecondary = this.weaponSecondary;
            return loadout;
        };
        Loadout.prototype.toObject = function () {
            return {
                id: this.id,
                name: this.name,
                weaponPrimary: this.weaponPrimary,
                weaponSecondary: this.weaponSecondary,
                perkPlayer: this.perkPlayer,
                perkWeapon: this.perkWeapon
            };
        };
        Loadout.prototype.fromObject = function (_obj) {
            this.id = _obj["id"];
            this.name = _obj["name"];
            this.weaponPrimary = _obj["weaponPrimary"];
            this.weaponSecondary = _obj["weaponSecondary"];
            this.perkPlayer = _obj["perkPlayer"];
            this.perkWeapon = _obj["perkWeapon"];
        };
        return Loadout;
    }());
    DinogenArena.Loadout = Loadout;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var PlayerProfile = /** @class */ (function () {
        function PlayerProfile() {
            this.totalKills = 0;
            this.totalMeleeKills = 0;
            this.totalDinoKills = 0;
            this.totalDeaths = 0;
            this.customXP = 0;
            this.customLevel = 1;
            this.customPrestige = 0;
            this.bestSurvivalScore = 0;
            this.bTutorialComplete = false;
            this.controls = new PlayerControls();
            this.settings = new PlayerSettings();
            this.challenges = new DinogenArena.Challenges();
            this.loadouts = DinogenArena.InventoryManager.GetDefaultLoadouts().slice(0);
            this.resetProfile();
        }
        PlayerProfile.prototype.destroy = function () {
            this.controls = null;
            this.settings = null;
            this.challenges = null;
            this.tutorials = null;
            this.newUnlocks = null;
        };
        PlayerProfile.prototype.clone = function () {
            var newProfile = new PlayerProfile();
            newProfile.fromObject(this.toObject());
            return newProfile;
        };
        PlayerProfile.prototype.getXPMultiplier = function () {
            return 1;
        };
        PlayerProfile.prototype.load = function () {
            DinogenArena.SoundManager.UpdateMusicVolume();
        };
        PlayerProfile.prototype.toObject = function () {
            var loadoutsArray = [
                this.loadouts[0].toObject(),
                this.loadouts[1].toObject(),
                this.loadouts[2].toObject()
            ];
            var obj = {
                name: this.name,
                lastMenuId: this.lastMenuId,
                lastRankedSettings: DinogenArena.WilkinUtil.CloneObject(this.lastRankedSettings),
                totalKills: this.totalKills,
                totalMeleeKills: this.totalMeleeKills,
                totalDinoKills: this.totalDinoKills,
                totalDeaths: this.totalDeaths,
                customXP: this.customXP,
                customLevel: this.customLevel,
                customPrestige: this.customPrestige,
                bestSurvivalScore: this.bestSurvivalScore,
                tutorials: this.tutorials,
                newUnlocks: DinogenArena.WilkinUtil.CloneObject(this.newUnlocks),
                challenges: DinogenArena.WilkinUtil.CloneObject(this.challenges.toObject()),
                loadouts: loadoutsArray,
                bTutorialComplete: this.bTutorialComplete,
                achievements: this.achievements,
                settings: this.settings.toObject()
            };
            return obj;
        };
        PlayerProfile.prototype.fromObject = function (_obj) {
            console.log(_obj);
            try {
                this.name = _obj["name"];
                this.lastMenuId = _obj["lastMenuId"];
                this.totalKills = _obj["totalKills"];
                this.totalMeleeKills = _obj["totalMeleeKills"];
                this.totalDinoKills = _obj["totalDinoKills"];
                this.totalDeaths = _obj["totalDeaths"];
                this.customXP = _obj["customXP"];
                this.customLevel = _obj["customLevel"];
                this.customPrestige = _obj["customPrestige"];
                this.bestSurvivalScore = _obj["bestSurvivalScore"];
                this.tutorials = _obj["tutorials"];
                this.newUnlocks = _obj["newUnlocks"];
                this.challenges.fromObject(_obj["challenges"]);
                this.loadouts = DinogenArena.InventoryManager.GetDefaultLoadouts();
                var loadoutsArray = _obj["loadouts"];
                if (loadoutsArray) {
                    for (var i = 0; i < loadoutsArray.length; i++) {
                        this.loadouts[i].fromObject(loadoutsArray[i]);
                    }
                }
                this.bTutorialComplete = _obj["bTutorialComplete"];
                if (_obj["achievements"]) {
                    this.achievements = _obj["achievements"];
                    if (!this.achievements[DinogenArena.Achievements.ACH_TUTORIAL]) {
                        //this.resetAchievements();
                    }
                }
                this.controls.resetToDefaults();
                this.settings.fromObject(_obj["settings"]);
            }
            catch (error) {
                console.log("Invalid data supplied to PlayerProfile, resetting profile");
                this.resetProfile();
            }
        };
        PlayerProfile.prototype.resetProfile = function () {
            this.name = "Player";
            this.lastMenuId = null;
            this.lastRankedSettings = null;
            this.totalKills = 0;
            this.totalMeleeKills = 0;
            this.totalDinoKills = 0;
            this.totalDeaths = 0;
            this.customLevel = 1; //PlayerProfile.MAX_CUSTOM_LEVEL;
            this.customXP = 0;
            this.customPrestige = 0;
            this.bestSurvivalScore = 0;
            this.controls.resetToDefaults();
            this.settings.resetToDefaults();
            this.tutorials = {};
            this.bTutorialComplete = false;
            this.newUnlocks = {
                primary: [],
                secondary: [],
                perkPlayer: [],
                perkWeapon: []
            };
            this.resetAchievements();
            if (DinogenArena.GameUtil.IsDebugging()) {
                this.bTutorialComplete = true;
                this.tutorials["bTutorial"] = true;
                this.tutorials["bCustomMode"] = true;
                this.tutorials["bEditLoadouts"] = true;
                //this.createStoryCharacter(CampaignManager.CHARACTER_CLASS_COMMANDO);
            }
        };
        PlayerProfile.prototype.setLastRankedSettings = function (_data) {
            this.lastRankedSettings = _data;
        };
        PlayerProfile.prototype.clearLastRankedSettings = function () {
            this.lastRankedSettings = null;
        };
        PlayerProfile.prototype.getLastRankedSettings = function () {
            return this.lastRankedSettings;
        };
        PlayerProfile.prototype.resetAchievements = function () {
            console.log("Reset achievements");
            this.achievements = DinogenArena.Achievements.GetAchievements();
        };
        PlayerProfile.prototype.unlockAchievement = function (_id) {
            if (this.achievements) {
                if (!this.achievements[_id]["bUnlocked"]) {
                    this.achievements[_id]["bUnlocked"] = true;
                    DinogenArena.GameUtil.game.pushAchievement(_id);
                    DinogenArena.Engine.SaveProfileData();
                }
                DinogenArena.APIUtil.UnlockAchievement(_id);
            }
        };
        PlayerProfile.prototype.setTutorialComplete = function () {
            this.bTutorialComplete = true;
            this.unlockAchievement(DinogenArena.Achievements.ACH_TUTORIAL);
        };
        PlayerProfile.prototype.hasCompletedTutorial = function () {
            return this.bTutorialComplete;
        };
        PlayerProfile.prototype.clearAllNewUnlocks = function () {
            this.newUnlocks["primary"] = [];
            this.newUnlocks["secondary"] = [];
            this.newUnlocks["perkPlayer"] = [];
            this.newUnlocks["perkWeapon"] = [];
        };
        PlayerProfile.prototype.addNewWeaponUnlock = function (_id) {
            var bSecondary = DinogenArena.InventoryManager.IsSecondary(_id);
            this.newUnlocks[bSecondary ? "secondary" : "primary"].push(_id);
        };
        PlayerProfile.prototype.addNewPerkUnlock = function (_id) {
            var bPlayerPerk = DinogenArena.PerkManager.IsPlayerPerk(_id);
            this.newUnlocks[bPlayerPerk ? "perkPlayer" : "perkWeapon"].push(_id);
        };
        PlayerProfile.prototype.removeNewUnlock = function (_id) {
            var arr;
            arr = this.newUnlocks["primary"];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == _id) {
                    arr.splice(i, 1);
                    return;
                }
            }
            arr = this.newUnlocks["secondary"];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == _id) {
                    arr.splice(i, 1);
                    return;
                }
            }
            arr = this.newUnlocks["perkPlayer"];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == _id) {
                    arr.splice(i, 1);
                    return;
                }
            }
            arr = this.newUnlocks["perkWeapon"];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == _id) {
                    arr.splice(i, 1);
                    return;
                }
            }
        };
        PlayerProfile.prototype.hasNewUnlocks = function () {
            if (!this.newUnlocks) {
                return false;
            }
            return (this.newUnlocks["primary"].length > 0 ||
                this.newUnlocks["secondary"].length > 0 ||
                this.newUnlocks["perkPlayer"].length > 0 ||
                this.newUnlocks["perkWeapon"].length > 0);
        };
        PlayerProfile.prototype.hasNewWeaponFromCategory = function (_category) {
            if (!this.hasNewUnlocks()) {
                return false;
            }
            var weapons = this.newUnlocks["primary"].concat(this.newUnlocks["secondary"]);
            for (var i = 0; i < weapons.length; i++) {
                var item = DinogenArena.InventoryManager.GetItemById(weapons[i]);
                if (item.getFirearmType() == _category) {
                    return true;
                }
            }
            return false;
        };
        PlayerProfile.prototype.getAllNewPerkUnlocks = function () {
            return this.newUnlocks["perkPlayer"].concat(this.newUnlocks["perkWeapon"]);
        };
        PlayerProfile.prototype.getAllNewWeaponUnlocks = function () {
            return this.newUnlocks["primary"].concat(this.newUnlocks["secondary"]);
        };
        PlayerProfile.prototype.setBestSurvivalScore = function (_val) {
            this.bestSurvivalScore = Math.max(_val, this.bestSurvivalScore);
        };
        PlayerProfile.prototype.getBestSurvivalScore = function () {
            return this.bestSurvivalScore;
        };
        PlayerProfile.prototype.prestigePlayer = function () {
            this.customLevel = 1;
            this.customXP = 0;
            this.customPrestige++;
            this.challenges.reset();
            this.loadouts = DinogenArena.InventoryManager.GetDefaultLoadouts();
        };
        PlayerProfile.prototype.addTotalKills = function (_val) {
            this.totalKills += _val;
            if (this.totalKills == 500) {
                this.unlockAchievement(DinogenArena.Achievements.ACH_KILLS_3);
                this.unlockAchievement(DinogenArena.Achievements.ACH_KILLS_2);
                this.unlockAchievement(DinogenArena.Achievements.ACH_KILLS_1);
            }
            if (this.totalKills == 100) {
                this.unlockAchievement(DinogenArena.Achievements.ACH_KILLS_2);
                this.unlockAchievement(DinogenArena.Achievements.ACH_KILLS_1);
            }
            if (this.totalKills == 10) {
                this.unlockAchievement(DinogenArena.Achievements.ACH_KILLS_1);
            }
        };
        PlayerProfile.prototype.addTotalMeleeKills = function (_val) {
            this.totalMeleeKills += _val;
        };
        PlayerProfile.prototype.addTotalDinoKill = function () {
            this.totalDinoKills++;
        };
        PlayerProfile.prototype.getTotalKills = function () {
            return this.totalKills;
        };
        PlayerProfile.prototype.getTotalMeleeKills = function () {
            return this.totalMeleeKills;
        };
        PlayerProfile.prototype.getTotalDinoKills = function () {
            return this.totalDinoKills;
        };
        PlayerProfile.prototype.addTotalDeaths = function (_val) {
            this.totalDeaths += _val;
        };
        PlayerProfile.prototype.getTotalDeaths = function () {
            return this.totalDeaths;
        };
        PlayerProfile.prototype.getKDR = function () {
            var kdr = this.totalKills / this.totalDeaths;
            if (kdr == Infinity) {
                kdr = this.totalKills;
            }
            return isNaN(kdr) ? 0 : kdr;
        };
        PlayerProfile.prototype.isNewPlayer = function () {
            return true;
        };
        PlayerProfile.prototype.addCustomXP = function (_val) {
            this.customXP += _val;
            if (this.customLevel < PlayerProfile.MAX_CUSTOM_LEVEL) {
                var req = this.getRequiredXPForNextCustomLevel();
                if (this.customXP >= req) {
                    this.levelUpCustom();
                }
            }
        };
        PlayerProfile.prototype.levelUpCustom = function () {
            this.customLevel++;
            DinogenArena.GameUtil.GetGameState().playerController.getHUD().addToNotifier({
                labelText: "Level " + this.customLevel,
                descText: "You've been promoted!",
                icon: DinogenArena.GameUtil.GetRankIconForLevel(this.customLevel),
                sound: "ui_level_up",
                timer: 300
            });
            var arr = PlayerProfile.GetUnlocksForCustomLevel(this.customLevel);
            for (var i = 0; i < arr.length; i++) {
                var cur = arr[i];
                if (cur.type == "weapon") {
                    this.addNewWeaponUnlock(cur.id);
                }
                else if (cur.type == "perk") {
                    this.addNewPerkUnlock(cur.id);
                }
            }
        };
        PlayerProfile.prototype.getCustomXP = function () {
            return this.customXP;
        };
        PlayerProfile.prototype.isMaxCustomLevel = function () {
            return this.customLevel >= PlayerProfile.MAX_CUSTOM_LEVEL;
        };
        PlayerProfile.prototype.getCustomLevel = function () {
            return this.customLevel;
        };
        PlayerProfile.prototype.getCustomPrestige = function () {
            return this.customPrestige;
        };
        PlayerProfile.prototype.isCustomPrestiged = function () {
            return this.customPrestige > 0;
        };
        PlayerProfile.prototype.getRequiredXPForNextCustomLevel = function () {
            return this.getRequiredXPForCustomLevel(this.customLevel + 1);
        };
        PlayerProfile.prototype.getPercentToNextCustomLevel = function () {
            return (this.customXP - this.getRequiredXPForCustomLevel(this.customLevel)) / (this.getRequiredXPForNextCustomLevel() - this.getRequiredXPForCustomLevel(this.customLevel));
        };
        PlayerProfile.prototype.getRequiredXPForCustomLevel = function (_level) {
            if (_level <= 1) {
                return 0;
            }
            else if (_level >= PlayerProfile.MAX_CUSTOM_LEVEL) {
                return this.customXP;
            }
            return this.getRequiredXPForCustomLevel(_level - 1) + (50 * (_level * 5));
        };
        PlayerProfile.prototype.setLastMenuId = function (_val) {
            this.lastMenuId = _val;
        };
        PlayerProfile.prototype.getLastMenuId = function () {
            return this.lastMenuId;
        };
        PlayerProfile.GetUnlocksForCustomLevel = function (_level) {
            var arr = [];
            var items = DinogenArena.InventoryManager.GetAll();
            for (var i = 0; i < items.length; i++) {
                if (items[i].getUnlockLevel() == _level) {
                    arr.push({ type: "weapon", id: items[i].getId() });
                }
            }
            var perks = DinogenArena.PerkManager.GetAll();
            for (var i = 0; i < perks.length; i++) {
                if (perks[i].getUnlockLevel() == _level) {
                    arr.push({ type: "perk", id: perks[i].id });
                }
            }
            return arr;
        };
        PlayerProfile.MAX_CUSTOM_LEVEL = 30;
        return PlayerProfile;
    }());
    DinogenArena.PlayerProfile = PlayerProfile;
    var PlayerSettings = /** @class */ (function () {
        function PlayerSettings() {
            this.bAbsoluteMovement = true;
            this.bEffects = true;
            this.bDecals = true;
            this.bGibs = true;
            this.bDeadBodies = true;
            this.resetToDefaults();
        }
        PlayerSettings.prototype.resetToDefaults = function () {
            this.bAbsoluteMovement = true;
            this.bEffects = true;
            this.bGibs = true;
            this.bDeadBodies = true;
            this.bDecals = true;
            this.gameVolume = 0.8;
            this.musicVolume = 1;
        };
        PlayerSettings.prototype.fromObject = function (_obj) {
            console.log("Settings from object:");
            console.log(_obj);
            try {
                this.bAbsoluteMovement = _obj["bAbsoluteMovement"];
                this.bEffects = _obj["bEffects"];
                this.bGibs = _obj["bGibs"];
                this.bDeadBodies = _obj["bDeadBodies"];
                this.bDecals = _obj["bDecals"];
                this.gameVolume = _obj["gameVolume"];
                this.musicVolume = _obj["musicVolume"];
            }
            catch (e) {
                console.error(e);
            }
        };
        PlayerSettings.prototype.toObject = function () {
            return {
                bAbsoluteMovement: this.bAbsoluteMovement,
                bEffects: this.bEffects,
                bGibs: this.bGibs,
                bDeadBodies: this.bDeadBodies,
                bDecals: this.bDecals,
                gameVolume: this.gameVolume,
                musicVolume: this.musicVolume
            };
        };
        PlayerSettings.prototype.setMusicVolume = function (_val, _bUnmute) {
            if (_bUnmute === void 0) { _bUnmute = true; }
            this.musicVolume = _val;
            if (_bUnmute && DinogenArena.SoundManager.IsMuted()) {
                DinogenArena.SoundManager.SetMute(false);
            }
            DinogenArena.SoundManager.UpdateMusicVolume();
        };
        PlayerSettings.prototype.setGameVolume = function (_val, _bUnmute) {
            if (_bUnmute === void 0) { _bUnmute = true; }
            this.gameVolume = _val;
            if (_bUnmute && DinogenArena.SoundManager.IsMuted()) {
                DinogenArena.SoundManager.SetMute(false);
            }
            DinogenArena.SoundManager.UpdateAmbienceVolume();
        };
        return PlayerSettings;
    }());
    DinogenArena.PlayerSettings = PlayerSettings;
    var PlayerControls = /** @class */ (function () {
        function PlayerControls() {
            this.db = {};
            this.resetToDefaults();
        }
        PlayerControls.prototype.resetToDefaults = function () {
            this.setKey(PlayerControls.KEY_LEFT, Phaser.KeyCode.A);
            this.setKey(PlayerControls.KEY_RIGHT, Phaser.KeyCode.D);
            this.setKey(PlayerControls.KEY_UP, Phaser.KeyCode.W);
            this.setKey(PlayerControls.KEY_DOWN, Phaser.KeyCode.S);
            this.setKey(PlayerControls.KEY_SPRINT, Phaser.KeyCode.SHIFT);
            this.setKey(PlayerControls.KEY_SWITCH_WEAPON, Phaser.KeyCode.Q);
            this.setKey(PlayerControls.KEY_INTERACT, Phaser.KeyCode.E);
            this.setKey(PlayerControls.KEY_MELEE, Phaser.KeyCode.SPACEBAR);
            this.setKey(PlayerControls.KEY_RELOAD, Phaser.KeyCode.R);
            this.setKey(PlayerControls.KEY_SCOREBOARD, Phaser.KeyCode.TAB);
        };
        PlayerControls.prototype.fromObject = function (_obj) {
            try {
                this.setKey(PlayerControls.KEY_LEFT, _obj[PlayerControls.KEY_LEFT]);
                this.setKey(PlayerControls.KEY_RIGHT, _obj[PlayerControls.KEY_RIGHT]);
                this.setKey(PlayerControls.KEY_UP, _obj[PlayerControls.KEY_UP]);
                this.setKey(PlayerControls.KEY_DOWN, _obj[PlayerControls.KEY_DOWN]);
                this.setKey(PlayerControls.KEY_SPRINT, _obj[PlayerControls.KEY_SPRINT]);
                this.setKey(PlayerControls.KEY_SWITCH_WEAPON, _obj[PlayerControls.KEY_SWITCH_WEAPON]);
                this.setKey(PlayerControls.KEY_INTERACT, _obj[PlayerControls.KEY_INTERACT]);
                this.setKey(PlayerControls.KEY_MELEE, _obj[PlayerControls.KEY_MELEE]);
                this.setKey(PlayerControls.KEY_RELOAD, _obj[PlayerControls.KEY_RELOAD]);
                this.setKey(PlayerControls.KEY_SCOREBOARD, _obj[PlayerControls.KEY_SCOREBOARD]);
            }
            catch (e) {
                console.error(e);
            }
        };
        PlayerControls.prototype.toObject = function () {
            var obj = {};
            obj[PlayerControls.KEY_LEFT] = this.getKey(PlayerControls.KEY_LEFT);
            obj[PlayerControls.KEY_RIGHT] = this.getKey(PlayerControls.KEY_RIGHT);
            obj[PlayerControls.KEY_UP] = this.getKey(PlayerControls.KEY_UP);
            obj[PlayerControls.KEY_DOWN] = this.getKey(PlayerControls.KEY_DOWN);
            obj[PlayerControls.KEY_SPRINT] = this.getKey(PlayerControls.KEY_SPRINT);
            obj[PlayerControls.KEY_SWITCH_WEAPON] = this.getKey(PlayerControls.KEY_SWITCH_WEAPON);
            obj[PlayerControls.KEY_INTERACT] = this.getKey(PlayerControls.KEY_INTERACT);
            obj[PlayerControls.KEY_MELEE] = this.getKey(PlayerControls.KEY_MELEE);
            obj[PlayerControls.KEY_RELOAD] = this.getKey(PlayerControls.KEY_RELOAD);
            obj[PlayerControls.KEY_SCOREBOARD] = this.getKey(PlayerControls.KEY_SCOREBOARD);
            return obj;
        };
        PlayerControls.prototype.setKey = function (_id, _key) {
            this.db[_id] = _key;
        };
        PlayerControls.prototype.getKeyStringFromId = function (_id) {
            var keyCode = this.getKey(_id);
            if (keyCode == Phaser.KeyCode.LEFT) {
                return "Left";
            }
            else if (keyCode == Phaser.KeyCode.RIGHT) {
                return "Right";
            }
            else if (keyCode == Phaser.KeyCode.UP) {
                return "Up";
            }
            else if (keyCode == Phaser.KeyCode.DOWN) {
                return "Down";
            }
            else if (keyCode == Phaser.KeyCode.SHIFT) {
                return "Shift";
            }
            else if (keyCode == Phaser.KeyCode.CONTROL) {
                return "Control";
            }
            else if (keyCode == Phaser.KeyCode.SPACEBAR) {
                return "Space";
            }
            else if (keyCode == Phaser.KeyCode.TAB) {
                return "Tab";
            }
            else if (keyCode == Phaser.KeyCode.ENTER) {
                return "Enter";
            }
            else if (keyCode == Phaser.KeyCode.ALT) {
                return "Alt";
            }
            return String.fromCharCode(keyCode);
        };
        PlayerControls.prototype.getKey = function (_id) {
            return this.db[_id];
        };
        PlayerControls.GetKeyDescription = function (_id) {
            if (_id == PlayerControls.KEY_LEFT) {
                return "Move left";
            }
            else if (_id == PlayerControls.KEY_RIGHT) {
                return "Move right";
            }
            else if (_id == PlayerControls.KEY_UP) {
                return "Move up";
            }
            else if (_id == PlayerControls.KEY_DOWN) {
                return "Move down";
            }
            else if (_id == PlayerControls.KEY_SPRINT) {
                return "Sprint";
            }
            else if (_id == PlayerControls.KEY_SWITCH_WEAPON) {
                return "Switch weapon";
            }
            else if (_id == PlayerControls.KEY_INTERACT) {
                return "Interact";
            }
            else if (_id == PlayerControls.KEY_MELEE) {
                return "Melee attack";
            }
            else if (_id == PlayerControls.KEY_RELOAD) {
                return "Reload";
            }
            else if (_id == PlayerControls.KEY_SCOREBOARD) {
                return "View scoreboard";
            }
            return null;
        };
        PlayerControls.GetAllIds = function () {
            return [
                PlayerControls.KEY_LEFT,
                PlayerControls.KEY_RIGHT,
                PlayerControls.KEY_UP,
                PlayerControls.KEY_DOWN,
                PlayerControls.KEY_SPRINT,
                PlayerControls.KEY_SWITCH_WEAPON,
                PlayerControls.KEY_INTERACT,
                PlayerControls.KEY_MELEE,
                PlayerControls.KEY_RELOAD,
                PlayerControls.KEY_SCOREBOARD
            ];
        };
        PlayerControls.KEY_LEFT = "KEY_LEFT";
        PlayerControls.KEY_RIGHT = "KEY_RIGHT";
        PlayerControls.KEY_UP = "KEY_UP";
        PlayerControls.KEY_DOWN = "KEY_DOWN";
        PlayerControls.KEY_SPRINT = "KEY_SPRINT";
        PlayerControls.KEY_SWITCH_WEAPON = "KEY_SWITCH_WEAPON";
        PlayerControls.KEY_INTERACT = "KEY_INTERACT";
        PlayerControls.KEY_MELEE = "KEY_MELEE";
        PlayerControls.KEY_RELOAD = "KEY_RELOAD";
        PlayerControls.KEY_SCOREBOARD = "KEY_SCOREBOARD";
        return PlayerControls;
    }());
    DinogenArena.PlayerControls = PlayerControls;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var Skills = /** @class */ (function () {
        function Skills() {
        }
        Skills.SKILL_COMMANDO_RELOAD = "SKILL_COMMANDO_RELOAD";
        Skills.SKILL_COMMANDO_DAMAGE = "SKILL_COMMANDO_DAMAGE";
        Skills.SKILL_COMMANDO_ROF = "SKILL_COMMANDO_ROF";
        Skills.SKILL_COMMANDO_PISTOL = "SKILL_COMMANDO_PISTOL";
        Skills.SKILL_COMMANDO_RIFLE = "SKILL_COMMANDO_RIFLE";
        Skills.SKILL_COMMANDO_LMG = "SKILL_COMMANDO_LMG";
        return Skills;
    }());
    DinogenArena.Skills = Skills;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var PreloaderState = /** @class */ (function (_super) {
        __extends(PreloaderState, _super);
        function PreloaderState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PreloaderState.prototype.init = function () {
            this.stage.backgroundColor = 0x333333; //0x666666;
            this.engine = this.game;
            this.engine.initialize();
            this.container = this.game.add.group();
            var bg = this.game.add.image(0, 0, "preload_bg");
            this.container.add(bg);
            var titleText = this.game.add.text(0, 0, "Dinogen Arena", { font: "32px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            titleText.anchor.set(0.5, 0);
            titleText.x = this.game.width * 0.5;
            titleText.y = (this.game.height * 0.5) - 50;
            this.container.add(titleText);
            var wilkinTextButton = new DinogenArena.MenuButton(DinogenArena.GameUtil.OpenWilkinHomepage, DinogenArena.GameUtil, null, true, 300);
            //wilkinTextButton.setBaseAlpha(0.2);
            wilkinTextButton.setLabelText("Developed by XWILKINX");
            wilkinTextButton.x = (this.game.width * 0.5) - (wilkinTextButton.width * 0.5);
            wilkinTextButton.y = titleText.y + titleText.height;
            this.container.add(wilkinTextButton);
            this.loadingBar = new DinogenArena.UIBar(this.game.width * 0.95, 0xFFFFFF, false, 0x666666, false);
            this.loadingBar.height = 2;
            this.loadingBar.x = (this.game.width * 0.5) - (this.loadingBar.width * 0.5);
            this.loadingBar.y = this.game.height * 0.9;
            this.container.add(this.loadingBar);
            this.loadingText = this.game.add.text(0, 0, "", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center" });
            this.loadingText.alpha = 0.2;
            this.loadingText.anchor.set(0.5, 0);
            this.loadingText.x = this.game.width * 0.5;
            this.loadingText.y = this.loadingBar.y + this.loadingBar.height + 8;
            this.container.add(this.loadingText);
            this.tipText = this.game.add.text(0, 0, "Tip", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            this.tipText.alpha = 0.8;
            this.tipText.setTextBounds(0, 0, 400, 32);
            this.tipText.x = (this.game.width * 0.5) - (this.tipText.textBounds.halfWidth);
            this.tipText.y = this.loadingBar.y - this.tipText.height;
            this.container.add(this.tipText);
            this.versionText = this.game.add.text(this.game.width * 0.5, 2, DinogenArena.GameUtil.GetCurrentVersion(), { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            this.versionText.alpha = 0.2;
            this.versionText.anchor.set(0.5, 0);
            this.container.add(this.versionText);
            this.loadRandomTip();
            if (DinogenArena.GameUtil.IsDebugging()) {
                var debugText = this.game.add.text(0, 0, "DEBUG VERSION", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFCC00" });
                debugText.anchor.set(0.5, 0);
                debugText.x = this.game.width * 0.5;
                debugText.y = wilkinTextButton.y + wilkinTextButton.height + 100;
                this.container.add(debugText);
            }
            //AdUtil.ShowAd();
        };
        PreloaderState.prototype.loadUpdate = function () {
            this.loadingText.setText("Loading: " + this.load.progress + "%");
            this.loadingBar.setBarScale(this.load.progress * 0.01, true);
        };
        PreloaderState.prototype.preload = function () {
            /* ATLASES */
            this.game.load.atlas("atlas_ui", "assets/images/atlas_ui/atlas_ui.png", "assets/images/atlas_ui/atlas_ui.json");
            this.game.load.atlas("atlas_medals", "assets/images/atlas_medals/atlas_medals.png", "assets/images/atlas_medals/atlas_medals.json");
            this.game.load.atlas("atlas_impacts", "assets/images/atlas_impacts/atlas_impacts.png", "assets/images/atlas_impacts/atlas_impacts.json");
            this.game.load.atlas("atlas_effects", "assets/images/atlas_effects/atlas_effects.png", "assets/images/atlas_effects/atlas_effects.json");
            this.game.load.atlas("atlas_char", "assets/images/character/atlas_char.png", "assets/images/character/atlas_char.json");
            this.game.load.atlas("atlas_char_legs", "assets/images/character/atlas_char_legs.png", "assets/images/character/atlas_char_legs.json");
            this.game.load.atlas("atlas_char_dead", "assets/images/character/atlas_char_dead.png", "assets/images/character/atlas_char_dead.json");
            this.game.load.atlas("atlas_weapons", "assets/images/atlas_weapons/atlas_weapons.png", "assets/images/atlas_weapons/atlas_weapons.json");
            this.game.load.atlas("atlas_weapons_world", "assets/images/atlas_weapons_world/atlas_weapons_world.png", "assets/images/atlas_weapons_world/atlas_weapons_world.json");
            this.game.load.atlas("atlas_dilo", "assets/images/dinosaurs/atlas_dilo.png", "assets/images/dinosaurs/atlas_dilo.json");
            this.game.load.atlas("atlas_raptor", "assets/images/dinosaurs/atlas_raptor.png", "assets/images/dinosaurs/atlas_raptor.json");
            this.game.load.atlas("atlas_compy", "assets/images/dinosaurs/atlas_compy.png", "assets/images/dinosaurs/atlas_compy.json");
            this.game.load.atlas("atlas_spinosaurus", "assets/images/dinosaurs/atlas_spinosaurus.png", "assets/images/dinosaurs/atlas_spinosaurus.json");
            this.game.load.atlas("atlas_trex", "assets/images/dinosaurs/atlas_trex.png", "assets/images/dinosaurs/atlas_trex.json");
            this.game.load.atlas("atlas_allosaurus", "assets/images/dinosaurs/atlas_allosaurus.png", "assets/images/dinosaurs/atlas_allosaurus.json");
            this.game.load.atlas("atlas_needler", "assets/images/dinosaurs/atlas_needler.png", "assets/images/dinosaurs/atlas_needler.json");
            this.game.load.atlas("atlas_explosions", "assets/images/atlas_explosions/atlas_explosions.png", "assets/images/atlas_explosions/atlas_explosions.json");
            this.game.load.atlas("atlas_objects", "assets/images/atlas_objects/atlas_objects.png", "assets/images/atlas_objects/atlas_objects.json");
            this.game.load.atlas("atlas_vehicles", "assets/images/atlas_vehicles/atlas_vehicles.png", "assets/images/atlas_vehicles/atlas_vehicles.json");
            this.game.load.atlas("atlas_map_overlays", "assets/images/maps/atlas_map_overlays.png", "assets/images/maps/atlas_map_overlays.json");
            /* MAPS */
            var maps = [
                DinogenArena.MapManager.MAP_RIVERSIDE,
                DinogenArena.MapManager.MAP_COMPLEX,
                DinogenArena.MapManager.MAP_METRO,
                DinogenArena.MapManager.MAP_VAULT,
                DinogenArena.MapManager.MAP_HEXAGON,
                DinogenArena.MapManager.MAP_SURVIVAL,
                DinogenArena.MapManager.MAP_TUTORIAL
            ];
            for (var i = 0; i < maps.length; i++) {
                var mapId = maps[i];
                this.game.load.image(mapId, "assets/images/maps/" + mapId + ".jpg");
                this.game.load.json(mapId + "_data", "assets/json/maps/" + mapId + ".json");
            }
            /* TRIGGERS */
            this.game.load.json("triggers_tutorial", "assets/json/triggers/triggers_tutorial.json");
            /* IMAGES */
            this.game.load.image("dinogen_bg", "assets/images/bg/dinogen_bg.jpg");
            this.game.load.image("xwilkinx_logo", "assets/images/xwilkinx/xwilkinx_logo.png");
            this.game.load.image("xwilkinx_logo_half", "assets/images/xwilkinx/xwilkinx_logo_half.png");
            this.game.load.image("hud_overlay_damage", "assets/images/hud/hud_overlay_damage.png");
            this.game.load.image("world_overlay", "assets/images/world/world_overlay.png");
            this.game.load.image("sponsor_armor_games", "assets/images/sponsors/sponsor_armor_games.png");
            this.game.load.image("sponsor_armor_games_small", "assets/images/sponsors/sponsor_armor_games_small.png");
            /* AUDIO */
            this.game.load.audio("music_menu", "assets/sounds/music/music_menu.mp3");
            this.game.load.audio("music_survival", "assets/sounds/music/music_survival.mp3");
            this.game.load.audio("music_game_1", "assets/sounds/music/music_game_1.mp3");
            this.game.load.audio("music_game_2", "assets/sounds/music/music_game_2.mp3");
            this.game.load.audio("music_game_3", "assets/sounds/music/music_game_3.mp3");
            this.game.load.audio("music_game_4", "assets/sounds/music/music_game_4.mp3");
            this.game.load.audio("music_game_5", "assets/sounds/music/music_game_5.mp3");
            this.game.load.audio("music_postgame_default", "assets/sounds/music/music_postgame_default.mp3");
            this.game.load.audio("music_postgame_victory", "assets/sounds/music/music_postgame_victory.mp3");
            this.game.load.audio("amb_default", "assets/sounds/ambience/amb_default.mp3");
            this.game.load.audio("ui_level_up", "assets/sounds/ui/ui_level_up.mp3");
            this.game.load.audio("ui_challenge_complete", "assets/sounds/ui/ui_challenge_complete.mp3");
            this.game.load.audio("ui_bonus", "assets/sounds/ui/ui_bonus.mp3");
            this.game.load.audio("ui_killstreak_end", "assets/sounds/ui/ui_killstreak_end.mp3");
            this.game.load.audio("ui_wave_complete", "assets/sounds/ui/ui_wave_complete.mp3");
            this.game.load.audio("ui_wave_start", "assets/sounds/ui/ui_wave_start.mp3");
            this.game.load.audio("ui_purchase", "assets/sounds/ui/ui_purchase.mp3");
            this.game.load.audio("ui_loadout_equip", "assets/sounds/ui/ui_loadout_equip.mp3");
            this.game.load.audio("ui_equip", "assets/sounds/ui/ui_equip.mp3");
            this.game.load.audio("ui_unlock_perk", "assets/sounds/ui/ui_unlock_perk.mp3");
            this.game.load.audio("ui_unlock_weapon", "assets/sounds/ui/ui_unlock_weapon.mp3");
            this.game.load.audio("ui_match_start", "assets/sounds/ui/ui_match_start.mp3");
            this.game.load.audio("ui_match_end", "assets/sounds/ui/ui_match_end.mp3");
            this.game.load.audio("ui_interact", "assets/sounds/ui/ui_interact.mp3");
            this.game.load.audio("ui_node", "assets/sounds/ui/ui_node.mp3");
            this.game.load.audio("ui_xwilkinx", "assets/sounds/ui/ui_xwilkinx.mp3");
            this.game.load.audio("ui_game_prepare", "assets/sounds/ui/ui_game_prepare.mp3");
            this.game.load.audio("ui_new_unlocks", "assets/sounds/ui/ui_new_unlocks.mp3");
            this.game.load.audio("ui_window_open", "assets/sounds/ui/ui_window_open.mp3");
            this.game.load.audio("ui_window_close", "assets/sounds/ui/ui_window_close.mp3");
            this.game.load.audio("ui_match_stop", "assets/sounds/ui/ui_match_stop.mp3");
            this.game.load.audio("ui_armory", "assets/sounds/ui/ui_armory.mp3");
            this.game.load.audio("ui_beep", "assets/sounds/ui/ui_beep.mp3");
            this.game.load.audio("ui_heli", "assets/sounds/ui/ui_heli.mp3");
            this.game.load.audio("ui_equip_perk", "assets/sounds/ui/ui_equip_perk.mp3");
            this.game.load.audio("ui_prestige", "assets/sounds/ui/ui_prestige.mp3");
            this.game.load.audio("ui_turret", "assets/sounds/ui/ui_turret.mp3");
            this.game.load.audio("ui_turret_upgrade", "assets/sounds/ui/ui_turret_upgrade.mp3");
            this.game.load.audio("ui_point", "assets/sounds/ui/ui_point.mp3");
            this.game.load.audio("ui_error", "assets/sounds/ui/ui_error.mp3");
            this.game.load.audio("ui_team_human", "assets/sounds/ui/ui_team_human.mp3");
            this.game.load.audio("ui_team_dinosaur", "assets/sounds/ui/ui_team_dinosaur.mp3");
            this.game.load.audio("ui_evolve", "assets/sounds/ui/ui_evolve.mp3");
            this.game.load.audio("ui_player_killed", "assets/sounds/ui/ui_player_killed.mp3");
            this.game.load.audio("ui_ctf_flag_captured_ally", "assets/sounds/ui/ui_ctf_flag_captured_ally.mp3");
            this.game.load.audio("ui_ctf_flag_captured_enemy", "assets/sounds/ui/ui_ctf_flag_captured_enemy.mp3");
            this.game.load.audio("ui_ctf_flag_pickedup_ally", "assets/sounds/ui/ui_ctf_flag_pickedup_ally.mp3");
            this.game.load.audio("ui_ctf_flag_pickedup_enemy", "assets/sounds/ui/ui_ctf_flag_pickedup_enemy.mp3");
            this.game.load.audio("ui_ctf_flag_returned_ally", "assets/sounds/ui/ui_ctf_flag_returned_ally.mp3");
            this.game.load.audio("ui_ctf_flag_returned_enemy", "assets/sounds/ui/ui_ctf_flag_returned_ally.mp3");
            this.game.load.audio("char_step_1", "assets/sounds/steps/char_step_1.mp3");
            this.game.load.audio("char_step_2", "assets/sounds/steps/char_step_2.mp3");
            this.game.load.audio("char_step_3", "assets/sounds/steps/char_step_3.mp3");
            this.game.load.audio("char_step_4", "assets/sounds/steps/char_step_4.mp3");
            this.game.load.audio("dino_step_normal_1", "assets/sounds/steps/dino_step_normal_1.mp3");
            this.game.load.audio("dino_step_normal_2", "assets/sounds/steps/dino_step_normal_2.mp3");
            this.game.load.audio("dino_step_normal_3", "assets/sounds/steps/dino_step_normal_3.mp3");
            this.game.load.audio("dino_step_normal_4", "assets/sounds/steps/dino_step_normal_4.mp3");
            this.game.load.audio("dino_step_big_1", "assets/sounds/steps/dino_step_big_1.mp3");
            this.game.load.audio("dino_step_big_2", "assets/sounds/steps/dino_step_big_2.mp3");
            this.game.load.audio("dino_step_big_3", "assets/sounds/steps/dino_step_big_3.mp3");
            this.game.load.audio("dino_step_big_4", "assets/sounds/steps/dino_step_big_4.mp3");
            this.game.load.audio("physics_button_press", "assets/sounds/physics/button/physics_button_press.mp3");
            this.game.load.audio("physics_body_fall", "assets/sounds/physics/body/physics_body_fall.mp3");
            this.game.load.audio("physics_body_hit_1", "assets/sounds/physics/body/physics_body_hit_1.mp3");
            this.game.load.audio("physics_body_hit_2", "assets/sounds/physics/body/physics_body_hit_2.mp3");
            this.game.load.audio("physics_body_hit_3", "assets/sounds/physics/body/physics_body_hit_3.mp3");
            this.game.load.audio("physics_flesh_gib_1", "assets/sounds/physics/flesh/physics_flesh_gib_1.mp3");
            this.game.load.audio("physics_flesh_gib_2", "assets/sounds/physics/flesh/physics_flesh_gib_2.mp3");
            this.game.load.audio("physics_flesh_headshot_1", "assets/sounds/physics/flesh/physics_flesh_headshot_1.mp3");
            this.game.load.audio("physics_flesh_headshot_2", "assets/sounds/physics/flesh/physics_flesh_headshot_2.mp3");
            this.game.load.audio("physics_flesh_headshot_3", "assets/sounds/physics/flesh/physics_flesh_headshot_3.mp3");
            this.game.load.audio("physics_flesh_impact_bullet_1", "assets/sounds/physics/flesh/physics_flesh_impact_bullet_1.mp3");
            this.game.load.audio("physics_flesh_impact_bullet_2", "assets/sounds/physics/flesh/physics_flesh_impact_bullet_2.mp3");
            this.game.load.audio("physics_flesh_impact_bullet_3", "assets/sounds/physics/flesh/physics_flesh_impact_bullet_3.mp3");
            this.game.load.audio("physics_flesh_impact_needle_1", "assets/sounds/physics/flesh/physics_flesh_impact_needle_1.mp3");
            this.game.load.audio("physics_flesh_impact_needle_2", "assets/sounds/physics/flesh/physics_flesh_impact_needle_2.mp3");
            this.game.load.audio("physics_flesh_impact_needle_3", "assets/sounds/physics/flesh/physics_flesh_impact_needle_3.mp3");
            this.game.load.audio("physics_concrete_impact_bullet_1", "assets/sounds/physics/concrete/physics_concrete_impact_bullet_1.mp3");
            this.game.load.audio("physics_concrete_impact_bullet_2", "assets/sounds/physics/concrete/physics_concrete_impact_bullet_2.mp3");
            this.game.load.audio("physics_concrete_impact_bullet_3", "assets/sounds/physics/concrete/physics_concrete_impact_bullet_3.mp3");
            this.game.load.audio("physics_flesh_break_1", "assets/sounds/physics/flesh/physics_flesh_break_1.mp3");
            this.game.load.audio("physics_flesh_break_2", "assets/sounds/physics/flesh/physics_flesh_break_2.mp3");
            this.game.load.audio("physics_flesh_break_3", "assets/sounds/physics/flesh/physics_flesh_break_3.mp3");
            this.game.load.audio("physics_grenade_bounce", "assets/sounds/physics/grenade/physics_grenade_bounce.mp3");
            this.game.load.audio("physics_shell_generic_1", "assets/sounds/physics/shell/physics_shell_generic_1.mp3");
            this.game.load.audio("physics_shell_generic_2", "assets/sounds/physics/shell/physics_shell_generic_2.mp3");
            this.game.load.audio("physics_shell_generic_3", "assets/sounds/physics/shell/physics_shell_generic_3.mp3");
            this.game.load.audio("physics_shell_shotgun_1", "assets/sounds/physics/shell/physics_shell_shotgun_1.mp3");
            this.game.load.audio("physics_shell_shotgun_2", "assets/sounds/physics/shell/physics_shell_shotgun_2.mp3");
            this.game.load.audio("physics_shell_shotgun_3", "assets/sounds/physics/shell/physics_shell_shotgun_3.mp3");
            this.game.load.audio("physics_bullet_flyby_1", "assets/sounds/physics/bullet/physics_bullet_flyby_1.mp3");
            this.game.load.audio("physics_bullet_flyby_2", "assets/sounds/physics/bullet/physics_bullet_flyby_2.mp3");
            this.game.load.audio("physics_bullet_flyby_3", "assets/sounds/physics/bullet/physics_bullet_flyby_3.mp3");
            this.game.load.audio("physics_bullet_flyby_4", "assets/sounds/physics/bullet/physics_bullet_flyby_4.mp3");
            this.game.load.audio("physics_bullet_flyby_5", "assets/sounds/physics/bullet/physics_bullet_flyby_5.mp3");
            this.game.load.audio("physics_crate_fall", "assets/sounds/physics/crate/physics_crate_fall.mp3");
            this.game.load.audio("physics_crate_open_1", "assets/sounds/physics/crate/physics_crate_open_1.mp3");
            this.game.load.audio("physics_crate_open_2", "assets/sounds/physics/crate/physics_crate_open_2.mp3");
            this.game.load.audio("physics_weapon_drop_1", "assets/sounds/physics/weapon/physics_weapon_drop_1.mp3");
            this.game.load.audio("physics_weapon_drop_2", "assets/sounds/physics/weapon/physics_weapon_drop_2.mp3");
            this.game.load.audio("physics_weapon_drop_3", "assets/sounds/physics/weapon/physics_weapon_drop_3.mp3");
            this.game.load.audio("explosion_1", "assets/sounds/explosions/explosion_1.mp3");
            this.game.load.audio("explosion_2", "assets/sounds/explosions/explosion_2.mp3");
            this.game.load.audio("explosion_3", "assets/sounds/explosions/explosion_3.mp3");
            this.game.load.audio("wpn_melee", "assets/sounds/weapons/wpn_melee.mp3");
            this.game.load.audio("wpn_melee_hit", "assets/sounds/weapons/wpn_melee_hit.mp3");
            this.game.load.audio("wpn_fire_glock", "assets/sounds/weapons/wpn_fire_glock.mp3");
            this.game.load.audio("wpn_fire_fiveseven", "assets/sounds/weapons/wpn_fire_fiveseven.mp3");
            this.game.load.audio("wpn_fire_ak74u", "assets/sounds/weapons/wpn_fire_ak74u.mp3");
            this.game.load.audio("wpn_fire_mp5", "assets/sounds/weapons/wpn_fire_mp5.mp3");
            this.game.load.audio("wpn_fire_ump45", "assets/sounds/weapons/wpn_fire_ump45.mp3");
            this.game.load.audio("wpn_fire_mp7", "assets/sounds/weapons/wpn_fire_mp7.mp3");
            this.game.load.audio("wpn_fire_p90", "assets/sounds/weapons/wpn_fire_p90.mp3");
            this.game.load.audio("wpn_fire_tar21", "assets/sounds/weapons/wpn_fire_tar21.mp3");
            this.game.load.audio("wpn_fire_m4", "assets/sounds/weapons/wpn_fire_m4.mp3");
            this.game.load.audio("wpn_fire_famas", "assets/sounds/weapons/wpn_fire_famas.mp3");
            this.game.load.audio("wpn_fire_m1014", "assets/sounds/weapons/wpn_fire_m1014.mp3");
            this.game.load.audio("wpn_fire_spas12", "assets/sounds/weapons/wpn_fire_spas12.mp3");
            this.game.load.audio("wpn_fire_m3", "assets/sounds/weapons/wpn_fire_m3.mp3");
            this.game.load.audio("wpn_fire_tpr", "assets/sounds/weapons/wpn_fire_tpr.mp3");
            this.game.load.audio("wpn_fire_msr", "assets/sounds/weapons/wpn_fire_msr.mp3");
            this.game.load.audio("wpn_fire_hamr", "assets/sounds/weapons/wpn_fire_hamr.mp3");
            this.game.load.audio("wpn_fire_qbb95", "assets/sounds/weapons/wpn_fire_qbb95.mp3");
            this.game.load.audio("wpn_fire_aughbar", "assets/sounds/weapons/wpn_fire_aughbar.mp3");
            this.game.load.audio("wpn_fire_ak47", "assets/sounds/weapons/wpn_fire_ak47.mp3");
            this.game.load.audio("wpn_fire_m16a4", "assets/sounds/weapons/wpn_fire_m16a4.mp3");
            this.game.load.audio("wpn_fire_mossberg", "assets/sounds/weapons/wpn_fire_mossberg.mp3");
            this.game.load.audio("wpn_fire_m9", "assets/sounds/weapons/wpn_fire_m9.mp3");
            this.game.load.audio("wpn_fire_deagle", "assets/sounds/weapons/wpn_fire_deagle.mp3");
            this.game.load.audio("wpn_fire_m40a3", "assets/sounds/weapons/wpn_fire_m40a3.mp3");
            this.game.load.audio("wpn_fire_m249", "assets/sounds/weapons/wpn_fire_m249.mp3");
            this.game.load.audio("wpn_fire_usp45", "assets/sounds/weapons/wpn_fire_usp45.mp3");
            this.game.load.audio("wpn_fire_rsass", "assets/sounds/weapons/wpn_fire_rsass.mp3");
            this.game.load.audio("wpn_fire_ksg", "assets/sounds/weapons/wpn_fire_ksg.mp3");
            this.game.load.audio("wpn_fire_mg4", "assets/sounds/weapons/wpn_fire_mg4.mp3");
            this.game.load.audio("wpn_fire_hk417", "assets/sounds/weapons/wpn_fire_hk417.mp3");
            this.game.load.audio("wpn_fire_magnum", "assets/sounds/weapons/wpn_fire_magnum.mp3");
            this.game.load.audio("wpn_fire_rpg", "assets/sounds/weapons/wpn_fire_rpg.mp3");
            this.game.load.audio("wpn_fire_m203", "assets/sounds/weapons/wpn_fire_m203.mp3");
            this.game.load.audio("wpn_fire_bow", "assets/sounds/weapons/wpn_fire_bow.mp3");
            this.game.load.audio("wpn_fire_crossbow", "assets/sounds/weapons/wpn_fire_crossbow.mp3");
            this.game.load.audio("wpn_fire_xm25", "assets/sounds/weapons/wpn_fire_xm25.mp3");
            this.game.load.audio("wpn_fire_turret", "assets/sounds/weapons/wpn_fire_turret.mp3");
            this.game.load.audio("wpn_fire_minigun", "assets/sounds/weapons/wpn_fire_minigun.mp3");
            this.game.load.audio("wpn_fire_quadra", "assets/sounds/weapons/wpn_fire_quadra.mp3");
            this.game.load.audio("wpn_fire_jackhammer", "assets/sounds/weapons/wpn_fire_jackhammer.mp3");
            this.game.load.audio("wpn_fire_augpara", "assets/sounds/weapons/wpn_fire_augpara.mp3");
            this.game.load.audio("wpn_fire_samr", "assets/sounds/weapons/wpn_fire_samr.mp3");
            this.game.load.audio("wpn_fire_scarl", "assets/sounds/weapons/wpn_fire_scarl.mp3");
            this.game.load.audio("wpn_fire_magnum500", "assets/sounds/weapons/wpn_fire_magnum500.mp3");
            this.game.load.audio("wpn_reload_start", "assets/sounds/weapons/wpn_reload_start.mp3");
            this.game.load.audio("wpn_reload_end", "assets/sounds/weapons/wpn_reload_end.mp3");
            this.game.load.audio("wpn_reload_shell", "assets/sounds/weapons/wpn_reload_shell.mp3");
            this.game.load.audio("wpn_reload_shell_start", "assets/sounds/weapons/wpn_reload_shell_start.mp3");
            this.game.load.audio("wpn_empty", "assets/sounds/weapons/wpn_empty.mp3");
            this.game.load.audio("wpn_ammo", "assets/sounds/weapons/wpn_ammo.mp3");
            this.game.load.audio("wpn_deploy_firearm_1", "assets/sounds/weapons/wpn_deploy_firearm_1.mp3");
            this.game.load.audio("wpn_deploy_firearm_2", "assets/sounds/weapons/wpn_deploy_firearm_2.mp3");
            this.game.load.audio("wpn_deploy_firearm_3", "assets/sounds/weapons/wpn_deploy_firearm_3.mp3");
            this.game.load.audio("wpn_deploy_bow", "assets/sounds/weapons/wpn_deploy_bow.mp3");
            this.game.load.audio("char_death_1", "assets/sounds/character/char_death_1.mp3");
            this.game.load.audio("char_death_2", "assets/sounds/character/char_death_2.mp3");
            this.game.load.audio("char_death_3", "assets/sounds/character/char_death_3.mp3");
            this.game.load.audio("char_death_4", "assets/sounds/character/char_death_4.mp3");
            this.game.load.audio("char_death_5", "assets/sounds/character/char_death_5.mp3");
            this.game.load.audio("dino_dilo_attack_1", "assets/sounds/dinosaurs/dilo/dino_dilo_attack_1.mp3");
            this.game.load.audio("dino_dilo_attack_2", "assets/sounds/dinosaurs/dilo/dino_dilo_attack_2.mp3");
            this.game.load.audio("dino_dilo_attack_3", "assets/sounds/dinosaurs/dilo/dino_dilo_attack_3.mp3");
            this.game.load.audio("dino_dilo_death_1", "assets/sounds/dinosaurs/dilo/dino_dilo_death_1.mp3");
            this.game.load.audio("dino_dilo_death_2", "assets/sounds/dinosaurs/dilo/dino_dilo_death_2.mp3");
            this.game.load.audio("dino_dilo_death_3", "assets/sounds/dinosaurs/dilo/dino_dilo_death_3.mp3");
            this.game.load.audio("dino_raptor_attack_1", "assets/sounds/dinosaurs/raptor/dino_raptor_attack_1.mp3");
            this.game.load.audio("dino_raptor_attack_2", "assets/sounds/dinosaurs/raptor/dino_raptor_attack_2.mp3");
            this.game.load.audio("dino_raptor_attack_3", "assets/sounds/dinosaurs/raptor/dino_raptor_attack_3.mp3");
            this.game.load.audio("dino_raptor_death_1", "assets/sounds/dinosaurs/raptor/dino_raptor_death_1.mp3");
            this.game.load.audio("dino_raptor_death_2", "assets/sounds/dinosaurs/raptor/dino_raptor_death_2.mp3");
            this.game.load.audio("dino_raptor_death_3", "assets/sounds/dinosaurs/raptor/dino_raptor_death_3.mp3");
            this.game.load.audio("dino_compy_attack_1", "assets/sounds/dinosaurs/compy/dino_compy_attack_1.mp3");
            this.game.load.audio("dino_compy_attack_2", "assets/sounds/dinosaurs/compy/dino_compy_attack_2.mp3");
            this.game.load.audio("dino_compy_attack_3", "assets/sounds/dinosaurs/compy/dino_compy_attack_3.mp3");
            this.game.load.audio("dino_needler_attack_1", "assets/sounds/dinosaurs/needler/dino_needler_attack_1.mp3");
            this.game.load.audio("dino_needler_attack_2", "assets/sounds/dinosaurs/needler/dino_needler_attack_2.mp3");
            this.game.load.audio("dino_needler_attack_3", "assets/sounds/dinosaurs/needler/dino_needler_attack_3.mp3");
            this.game.load.audio("dino_needler_death_1", "assets/sounds/dinosaurs/needler/dino_needler_death_1.mp3");
            this.game.load.audio("dino_needler_death_2", "assets/sounds/dinosaurs/needler/dino_needler_death_2.mp3");
            this.game.load.audio("dino_needler_death_3", "assets/sounds/dinosaurs/needler/dino_needler_death_3.mp3");
            this.game.load.audio("dino_trex_attack_1", "assets/sounds/dinosaurs/trex/dino_trex_attack_1.mp3");
            this.game.load.audio("dino_trex_attack_2", "assets/sounds/dinosaurs/trex/dino_trex_attack_2.mp3");
            this.game.load.audio("dino_trex_attack_3", "assets/sounds/dinosaurs/trex/dino_trex_attack_3.mp3");
            this.game.load.audio("dino_trex_death_1", "assets/sounds/dinosaurs/trex/dino_trex_death_1.mp3");
            this.game.load.audio("dino_trex_death_2", "assets/sounds/dinosaurs/trex/dino_trex_death_2.mp3");
            this.game.load.audio("dino_trex_death_3", "assets/sounds/dinosaurs/trex/dino_trex_death_3.mp3");
            this.game.load.audio("dino_allosaurus_attack_1", "assets/sounds/dinosaurs/allosaurus/dino_allosaurus_attack_1.mp3");
            this.game.load.audio("dino_allosaurus_attack_2", "assets/sounds/dinosaurs/allosaurus/dino_allosaurus_attack_2.mp3");
            this.game.load.audio("dino_allosaurus_attack_3", "assets/sounds/dinosaurs/allosaurus/dino_allosaurus_attack_3.mp3");
            this.game.load.audio("dino_allosaurus_death_1", "assets/sounds/dinosaurs/allosaurus/dino_allosaurus_death_1.mp3");
            this.game.load.audio("dino_allosaurus_death_2", "assets/sounds/dinosaurs/allosaurus/dino_allosaurus_death_2.mp3");
            this.game.load.audio("dino_allosaurus_death_3", "assets/sounds/dinosaurs/allosaurus/dino_allosaurus_death_3.mp3");
            this.game.load.audio("dino_spinosaurus_attack_1", "assets/sounds/dinosaurs/spinosaurus/dino_spinosaurus_attack_1.mp3");
            this.game.load.audio("dino_spinosaurus_attack_2", "assets/sounds/dinosaurs/spinosaurus/dino_spinosaurus_attack_2.mp3");
            this.game.load.audio("dino_spinosaurus_attack_3", "assets/sounds/dinosaurs/spinosaurus/dino_spinosaurus_attack_3.mp3");
            this.game.load.audio("dino_spinosaurus_death_1", "assets/sounds/dinosaurs/spinosaurus/dino_spinosaurus_death_1.mp3");
            this.game.load.audio("dino_spinosaurus_death_2", "assets/sounds/dinosaurs/spinosaurus/dino_spinosaurus_death_2.mp3");
            this.game.load.audio("dino_spinosaurus_death_3", "assets/sounds/dinosaurs/spinosaurus/dino_spinosaurus_death_3.mp3");
            this.game.load.audio("apache_idle_loop", "assets/sounds/vehicles/apache_idle_loop.mp3");
            this.game.load.audio("cobra_idle_loop", "assets/sounds/vehicles/cobra_idle_loop.mp3");
            this.game.load.audio("seaknight_idle_loop", "assets/sounds/vehicles/seaknight_idle_loop.mp3");
            this.game.load.audio("osprey_idle_loop", "assets/sounds/vehicles/osprey_idle_loop.mp3");
            /* VOX */
            this.game.load.json("vox", "assets/json/misc/vox.json");
            for (var i = 0; i < 33; i++) {
                var id = i + 1;
                this.game.load.audio("vox_tut_" + id, "assets/sounds/vox/tut/vox_tut_" + id + ".mp3");
            }
            this.game.load.audio("vox_tut_12_2", "assets/sounds/vox/tut/vox_tut_12_2.mp3");
            this.game.load.audio("vox_tut_17_2", "assets/sounds/vox/tut/vox_tut_17_2.mp3");
            this.game.load.audio("vox_char_affirmative_1", "assets/sounds/vox/char/vox_char_affirmative_1.mp3");
            this.game.load.audio("vox_char_affirmative_2", "assets/sounds/vox/char/vox_char_affirmative_2.mp3");
            this.game.load.audio("vox_char_affirmative_3", "assets/sounds/vox/char/vox_char_affirmative_3.mp3");
            this.game.load.audio("vox_char_affirmative_4", "assets/sounds/vox/char/vox_char_affirmative_4.mp3");
            this.game.load.audio("vox_char_affirmative_5", "assets/sounds/vox/char/vox_char_affirmative_5.mp3");
            this.game.load.audio("vox_char_cover_1", "assets/sounds/vox/char/vox_char_cover_1.mp3");
            this.game.load.audio("vox_char_cover_2", "assets/sounds/vox/char/vox_char_cover_2.mp3");
            this.game.load.audio("vox_char_cover_3", "assets/sounds/vox/char/vox_char_cover_3.mp3");
            this.game.load.audio("vox_char_start_1", "assets/sounds/vox/char/vox_char_start_1.mp3");
            this.game.load.audio("vox_char_start_2", "assets/sounds/vox/char/vox_char_start_2.mp3");
            this.game.load.audio("vox_char_start_3", "assets/sounds/vox/char/vox_char_start_3.mp3");
            this.game.load.audio("vox_char_start_4", "assets/sounds/vox/char/vox_char_start_4.mp3");
            this.game.load.audio("vox_char_start_5", "assets/sounds/vox/char/vox_char_start_5.mp3");
            this.game.load.audio("vox_char_need_help_1", "assets/sounds/vox/char/vox_char_need_help_1.mp3");
            this.game.load.audio("vox_char_need_help_2", "assets/sounds/vox/char/vox_char_need_help_2.mp3");
            this.game.load.audio("vox_char_need_help_3", "assets/sounds/vox/char/vox_char_need_help_3.mp3");
            this.game.load.audio("vox_char_need_help_4", "assets/sounds/vox/char/vox_char_need_help_4.mp3");
            this.game.load.audio("vox_char_need_help_5", "assets/sounds/vox/char/vox_char_need_help_5.mp3");
            this.game.load.audio("vox_char_celebrate_1", "assets/sounds/vox/char/vox_char_celebrate_1.mp3");
            this.game.load.audio("vox_char_celebrate_2", "assets/sounds/vox/char/vox_char_celebrate_2.mp3");
            this.game.load.audio("vox_char_celebrate_3", "assets/sounds/vox/char/vox_char_celebrate_3.mp3");
            this.game.load.audio("vox_char_celebrate_4", "assets/sounds/vox/char/vox_char_celebrate_4.mp3");
            this.game.load.audio("vox_char_celebrate_5", "assets/sounds/vox/char/vox_char_celebrate_5.mp3");
            this.game.load.audio("vox_char_sniper_1", "assets/sounds/vox/char/vox_char_sniper_1.mp3");
            this.game.load.audio("vox_char_sniper_2", "assets/sounds/vox/char/vox_char_sniper_2.mp3");
            this.game.load.audio("vox_char_sniper_3", "assets/sounds/vox/char/vox_char_sniper_3.mp3");
            this.game.load.audio("vox_char_enemy_killed_1", "assets/sounds/vox/char/vox_char_enemy_killed_1.mp3");
            this.game.load.audio("vox_char_enemy_killed_2", "assets/sounds/vox/char/vox_char_enemy_killed_2.mp3");
            this.game.load.audio("vox_char_enemy_killed_3", "assets/sounds/vox/char/vox_char_enemy_killed_3.mp3");
            this.game.load.audio("vox_char_enemy_killed_4", "assets/sounds/vox/char/vox_char_enemy_killed_4.mp3");
            this.game.load.audio("vox_char_enemy_killed_5", "assets/sounds/vox/char/vox_char_enemy_killed_5.mp3");
            this.game.load.audio("vox_char_enemy_lost_1", "assets/sounds/vox/char/vox_char_enemy_lost_1.mp3");
            this.game.load.audio("vox_char_enemy_lost_2", "assets/sounds/vox/char/vox_char_enemy_lost_2.mp3");
            this.game.load.audio("vox_char_enemy_lost_3", "assets/sounds/vox/char/vox_char_enemy_lost_3.mp3");
            this.game.load.audio("vox_char_enemy_seen_1", "assets/sounds/vox/char/vox_char_enemy_seen_1.mp3");
            this.game.load.audio("vox_char_enemy_seen_2", "assets/sounds/vox/char/vox_char_enemy_seen_2.mp3");
            this.game.load.audio("vox_char_enemy_seen_3", "assets/sounds/vox/char/vox_char_enemy_seen_3.mp3");
            this.game.load.audio("vox_char_enemy_seen_4", "assets/sounds/vox/char/vox_char_enemy_seen_4.mp3");
            this.game.load.audio("vox_char_enemy_seen_5", "assets/sounds/vox/char/vox_char_enemy_seen_5.mp3");
            this.game.load.audio("vox_char_enemy_seen_dino_1", "assets/sounds/vox/char/vox_char_enemy_seen_dino_1.mp3");
            this.game.load.audio("vox_char_enemy_seen_dino_2", "assets/sounds/vox/char/vox_char_enemy_seen_dino_2.mp3");
            this.game.load.audio("vox_char_enemy_seen_dino_3", "assets/sounds/vox/char/vox_char_enemy_seen_dino_3.mp3");
            this.game.load.audio("vox_char_enemy_seen_dino_4", "assets/sounds/vox/char/vox_char_enemy_seen_dino_4.mp3");
            this.game.load.audio("vox_char_enemy_seen_dino_5", "assets/sounds/vox/char/vox_char_enemy_seen_dino_5.mp3");
            /* FILTERS */
            this.game.load.script("BlurX", "lib/BlurX.js");
            this.game.load.script("BlurY", "lib/BlurY.js");
            this.game.load.script("Gray", "lib/Gray.js");
        };
        PreloaderState.prototype.create = function () {
            this.onLoadComplete();
        };
        PreloaderState.prototype.updateVersionText = function () {
            this.versionText.setText(DinogenArena.GameUtil.GetCurrentVersion(), true);
        };
        PreloaderState.prototype.onLoadComplete = function () {
            if (DinogenArena.GameUtil.IsDebugging()) {
                DinogenArena.Engine.ClearProfileData();
            }
            var profileData = DinogenArena.Engine.LoadProfileData();
            if (!profileData) {
                console.log("No profile data found");
                DinogenArena.Engine.InitProfileData();
            }
            else {
                console.log(profileData);
                DinogenArena.PlayerManager.SetFromData(profileData);
            }
            DinogenArena.SoundManager.PlayUISound("ui_evolve", 0.5);
            this.loadingText.visible = false;
            var button = new DinogenArena.MenuButton(this.onPlayClicked, this, null, true, 200);
            button.tint = 0x00FF00;
            button.setLabelText("Start Game!");
            button.x = (this.game.width * 0.5) - (button.width * 0.5);
            button.y = this.loadingText.y;
            this.container.add(button);
            var tweenDelay = 0;
            if (DinogenArena.APIUtil.IsAutoPlay() || DinogenArena.GameUtil.IsDebugging()) {
                this.onPlayClicked();
            }
            else {
                if (DinogenArena.GameUtil.AdsEnabled()) {
                    tweenDelay = 2000;
                    DinogenArena.AdUtil.ShowAd();
                }
            }
            var tween = this.game.add.tween(button).from({ y: this.game.height }, 500, Phaser.Easing.Exponential.Out, true, tweenDelay);
            var clickBox = this.game.add.graphics(0, 0);
            clickBox.beginFill(0x000000, 0.5);
            clickBox.drawRoundedRect(0, 0, 300, 60, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            this.container.add(clickBox);
            clickBox.x = Math.round((this.game.width * 0.5) - (clickBox.width * 0.5));
            clickBox.y = Math.round((this.game.height * 0.7) - (clickBox.height * 0.5));
            var clickText = this.game.add.text(0, 3, "Click to regain focus\nGame will pause when focus is lost", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center", boundsAlignV: "middle" });
            clickText.setTextBounds(clickBox.x, clickBox.y, clickBox.width, clickBox.height);
            this.container.add(clickText);
            this.updateVersionText();
        };
        PreloaderState.prototype.loadRandomTip = function () {
            this.tipText.setText(DinogenArena.GameUtil.GetRandomTip(), true);
            var timer = this.game.time.create(true);
            timer.add(5000, this.loadRandomTip, this);
            timer.start();
        };
        PreloaderState.prototype.onPlayClicked = function () {
            var func;
            if (DinogenArena.GameUtil.IsDebugging()) {
                func = this.engine.loadMainMenu;
            }
            else {
                func = DinogenArena.APIUtil.UseSponsorState() ? this.engine.loadSponsor : this.engine.loadIntro;
            }
            this.engine.fadeToBlack(func, this.engine);
        };
        PreloaderState.prototype.onWilkinClicked = function () {
            DinogenArena.GameUtil.OpenWilkinHomepage();
        };
        return PreloaderState;
    }(Phaser.State));
    DinogenArena.PreloaderState = PreloaderState;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var SponsorState = /** @class */ (function (_super) {
        __extends(SponsorState, _super);
        function SponsorState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SponsorState.prototype.create = function () {
            this.container = this.game.add.group();
            var gfx = this.game.add.graphics(0, 0);
            gfx.beginFill(0x000000, 1);
            gfx.drawRect(0, 0, this.game.width, this.game.height);
            this.bg = this.game.add.sprite(0, 0, gfx.generateTexture());
            gfx.destroy();
            this.container.add(this.bg);
            this.logo = this.game.add.image(0, 0, "sponsor_armor_games");
            this.logo.anchor.set(0.5, 0.5);
            this.logo.x = this.game.width * 0.5;
            this.logo.y = this.game.height * 0.5;
            this.container.add(this.logo);
            this.start();
            this.bg.inputEnabled = true;
            this.bg.events.onInputUp.add(this.onClicked, this);
            DinogenArena.GameUtil.game.fadeFromBlack();
        };
        SponsorState.prototype.start = function () {
            var tween = this.game.add.tween(this.logo).from({ alpha: 0 }, 2000, Phaser.Easing.Exponential.InOut, true);
            tween.onComplete.add(this.onTweenComplete, this);
        };
        SponsorState.prototype.onTweenComplete = function () {
            var tween = this.game.add.tween(this.logo).to({ alpha: 0 }, 2000, Phaser.Easing.Exponential.InOut, true, 1000);
            tween.onComplete.add(this.complete, this);
        };
        SponsorState.prototype.complete = function () {
            DinogenArena.GameUtil.game.loadIntro();
        };
        SponsorState.prototype.onClicked = function () {
            DinogenArena.APIUtil.OpenCurrentAPIHomepage();
        };
        return SponsorState;
    }(Phaser.State));
    DinogenArena.SponsorState = SponsorState;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var ButtonBase = /** @class */ (function (_super) {
        __extends(ButtonBase, _super);
        function ButtonBase(_callback, _callbackContext, _parameters, _key) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            if (_key === void 0) { _key = null; }
            var _this = _super.call(this, DinogenArena.GameUtil.game, 0, 0, _key) || this;
            _this.baseAlpha = 0.5;
            _this.tweenTime = 100;
            _this.bSoundsEnabled = true;
            _this.bEnabled = true;
            _this.bMouseOver = false;
            _this.bAlphaWhenDisabled = false;
            _this.bCanClick = true;
            _this.callback = _callback;
            _this.callbackContext = _callbackContext;
            _this.parameters = _parameters;
            _this.setBaseAlpha(_this.baseAlpha);
            _this.inputEnabled = true;
            _this.ignoreChildInput = true;
            _this.signalOnUp = _this.events.onInputUp.add(_this.onUp, _this);
            _this.signalOnOver = _this.events.onInputOver.add(_this.onOver, _this);
            _this.signalOnOut = _this.events.onInputOut.add(_this.onOut, _this);
            return _this;
        }
        ButtonBase.prototype.destroy = function () {
            this.key = null;
            this.data = null;
            this.setEnabled(false);
            this.tween = null;
            this.signalOnUp.detach();
            this.signalOnOver.detach();
            this.signalOnOut.detach();
            this.signalOnUp = null;
            this.signalOnOver = null;
            this.signalOnOut = null;
            this.inputEnabled = false;
            this.events.destroy();
            this.input.destroy();
            this.kill();
            _super.prototype.destroy.call(this);
        };
        ButtonBase.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.actionKey) {
                if (this.actionKey.isDown) {
                    this.actionKey = null;
                    //this.simulateClick();
                }
            }
        };
        ButtonBase.prototype.simulateClick = function () {
            this.onUp();
            if (this.callback) {
                this.callback.apply(this.callbackContext, this.parameters);
            }
        };
        ButtonBase.prototype.setKeyForClick = function (_val) {
            var num = 1;
            if (_val == 1) {
                num = Phaser.Keyboard.ONE;
            }
            else if (_val == 2) {
                num = Phaser.Keyboard.TWO;
            }
            else if (_val == 3) {
                num = Phaser.Keyboard.THREE;
            }
            this.actionKey = this.game.input.keyboard.addKey(num);
        };
        ButtonBase.prototype.setEnabled = function (_bVal) {
            this.bEnabled = _bVal;
            this.inputEnabled = this.bEnabled;
            this.signalOnUp.active = this.bEnabled;
            this.signalOnOver.active = this.bEnabled;
            this.signalOnOut.active = this.bEnabled;
            if (this.tween) {
                this.tween.stop();
            }
            this.bMouseOver = false;
            if (!_bVal) {
                if (this.bAlphaWhenDisabled) {
                    this.alpha = this.baseAlpha * 0.35;
                }
                else {
                    this.alpha = this.baseAlpha;
                }
            }
            else {
                this.alpha = this.baseAlpha;
            }
        };
        ButtonBase.prototype.setBaseAlpha = function (_val) {
            this.baseAlpha = _val;
            this.alpha = this.baseAlpha;
            this.onOut();
        };
        ButtonBase.prototype.onUp = function () {
            if (!this.bEnabled || !this.bCanClick) {
                return;
            }
            if (this.bSoundsEnabled) {
                DinogenArena.SoundManager.PlayUISound("ui_button_click");
            }
            if (this.tween) {
                this.tween.stop();
            }
            this.alpha = 0;
            if (this.callback) {
                this.callback.apply(this.callbackContext, this.parameters);
            }
            this.onOut();
        };
        ButtonBase.prototype.onOver = function () {
            if (!this.bEnabled) {
                return;
            }
            if (this.bSoundsEnabled && !this.bMouseOver) {
                DinogenArena.SoundManager.PlayUISound("ui_button_over");
            }
            this.bMouseOver = true;
            if (this.tween) {
                this.tween.stop();
            }
            this.tween = this.game.add.tween(this).to({ alpha: 1 }, this.tweenTime, Phaser.Easing.Cubic.Out, true);
        };
        ButtonBase.prototype.onOut = function () {
            if (!this.bEnabled) {
                return;
            }
            this.bMouseOver = false;
            if (this.tween) {
                this.tween.stop();
            }
            this.tween = this.game.add.tween(this).to({ alpha: this.baseAlpha }, this.tweenTime, Phaser.Easing.Cubic.Out, true);
        };
        ButtonBase.prototype.setData = function (_data) {
            this.data = _data;
        };
        return ButtonBase;
    }(Phaser.Sprite));
    DinogenArena.ButtonBase = ButtonBase;
    var ImageButton = /** @class */ (function (_super) {
        __extends(ImageButton, _super);
        function ImageButton(_callback, _callbackContext, _parameters, _key, _frame) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = _super.call(this, _callback, _callbackContext, _parameters) || this;
            if (_key) {
                if (_frame) {
                    _this.image = _this.game.add.image(0, 0, _key, _frame);
                }
                else {
                    _this.image = _this.game.add.image(0, 0, _key);
                }
                _this.addChild(_this.image);
            }
            else {
                DinogenArena.GameUtil.Alert("ImageButton --> missing _key");
            }
            return _this;
        }
        ImageButton.prototype.destroy = function () {
            this.image = null;
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(ImageButton.prototype, "width", {
            get: function () {
                if (!this.image) {
                    return 32;
                }
                return this.image.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageButton.prototype, "height", {
            get: function () {
                if (!this.image) {
                    return 32;
                }
                return this.image.height;
            },
            enumerable: true,
            configurable: true
        });
        return ImageButton;
    }(ButtonBase));
    DinogenArena.ImageButton = ImageButton;
    var MenuButton = /** @class */ (function (_super) {
        __extends(MenuButton, _super);
        function MenuButton(_callback, _callbackContext, _parameters, _bShowBackground, _width) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            if (_bShowBackground === void 0) { _bShowBackground = false; }
            if (_width === void 0) { _width = 120; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.beginFill(0xFFFFFF, _bShowBackground ? 0.2 : 0);
            //graphics.drawRect(0, 0, _width, 32);
            graphics.drawRoundedRect(0, 0, _width, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.labelText = _this.game.add.text(0, 2, "");
            _this.addChild(_this.labelText);
            _this.setSelected(false);
            return _this;
        }
        MenuButton.prototype.destroy = function () {
            this.labelText = null;
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        MenuButton.prototype.setLabelText = function (_str, _colour) {
            if (_colour === void 0) { _colour = null; }
            this.labelText.setText(_str, true);
            this.labelText.setTextBounds(0, 0, this.width, this.height);
            if (_colour) {
                this.labelText.addColor(_colour, 0);
            }
        };
        MenuButton.prototype.setDefaultStyle = function (_style) {
            this.labelText.setStyle(_style);
        };
        MenuButton.prototype.setSelected = function (_bVal) {
            if (_bVal) {
                this.labelText.setStyle({ font: "16px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_THEME_STRING, boundsAlignH: "center", boundsAlignV: "middle" });
                this.setBaseAlpha(1);
            }
            else {
                this.labelText.setStyle({ font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
                this.setBaseAlpha(0.5);
            }
            this.setEnabled(!_bVal);
        };
        MenuButton.prototype.setTabSelected = function (_bVal) {
            if (_bVal) {
                //this.labelText.setStyle({ font: "16px " + GameUtil.FONT, fill: GameUtil.COLOUR_THEME_STRING, boundsAlignH: "center", boundsAlignV: "middle" });
                this.setBaseAlpha(1);
            }
            else {
                //this.labelText.setStyle({ font: "16px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
                this.setBaseAlpha(0.5);
            }
            this.setEnabled(!_bVal);
        };
        return MenuButton;
    }(ButtonBase));
    DinogenArena.MenuButton = MenuButton;
    var ModuleButton = /** @class */ (function (_super) {
        __extends(ModuleButton, _super);
        function ModuleButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = _super.call(this, _callback, _callbackContext, _parameters, DinogenArena.GameUtil.CreateRect(180, 32)) || this;
            _this.currentColour = 0x000000;
            _this.bAlphaWhenDisabled = true;
            _this.setBaseAlpha(0.65);
            _this.labelText = _this.game.add.text(0, 3, "Button", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.labelText.alpha = 0.8;
            _this.addChild(_this.labelText);
            _this.lockIcon = _this.game.add.image(0, 0, "atlas_ui", "icon_lock_small");
            _this.lockIcon.anchor.set(1, 0.5);
            _this.lockIcon.x = _this.width - 4;
            _this.lockIcon.y = _this.height * 0.5;
            _this.addChild(_this.lockIcon);
            _this.lockIcon.visible = false;
            _this.resetToDefault();
            return _this;
        }
        ModuleButton.prototype.destroy = function () {
            this.labelText = null;
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        ModuleButton.prototype.setHasItems = function (_bVal) {
            if (_bVal) {
                this.labelText.y = 1;
            }
            else {
                this.labelText.y = 3;
            }
        };
        ModuleButton.prototype.setSelected = function (_bVal) {
            this.setEnabled(!_bVal);
            this.alpha = this.baseAlpha * (_bVal ? 1 : 0.5);
        };
        /*
        public get width(): number
        {
            return this.bg.width;
        }

        public get height(): number
        {
            return this.bg.height;
        }
        */
        ModuleButton.prototype.setWidth = function (_val) {
            this.setColour(this.currentColour, _val);
        };
        ModuleButton.prototype.resetToDefault = function () {
            this.setColour(DinogenArena.GameUtil.COLOUR_THEME);
        };
        ModuleButton.prototype.setColour = function (_val, _width) {
            if (_width === void 0) { _width = 180; }
            if (this.bg != null) {
                this.bg.destroy();
            }
            this.currentColour = _val;
            var graphics = this.game.add.graphics(0, 0);
            graphics.beginFill(_val, 1);
            graphics.drawRoundedRect(0, 0, _width, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            this.bg = this.game.add.sprite(0, 0, graphics.generateTexture(), null);
            graphics.destroy();
            this.addChildAt(this.bg, 0);
            this.labelText.setTextBounds(0, 0, this.bg.width, this.bg.height);
        };
        ModuleButton.prototype.setLabelText = function (_val) {
            this.labelText.setText(_val, true);
        };
        return ModuleButton;
    }(ButtonBase));
    DinogenArena.ModuleButton = ModuleButton;
    var SliderThumbButton = /** @class */ (function (_super) {
        __extends(SliderThumbButton, _super);
        function SliderThumbButton() {
            var _this = _super.call(this) || this;
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 1);
            graphics.drawCircle(0, 0, 10);
            _this.thumb = _this.game.add.image(0, 0, graphics.generateTexture());
            _this.thumb.anchor.set(0.5, 0.5);
            _this.addChild(_this.thumb);
            _this.setBaseAlpha(1);
            _this.anchor.set(0.5, 0.5);
            return _this;
        }
        SliderThumbButton.prototype.destroy = function () {
            this.thumb = null;
            _super.prototype.destroy.call(this);
        };
        return SliderThumbButton;
    }(ButtonBase));
    DinogenArena.SliderThumbButton = SliderThumbButton;
    var TeamSelectButton = /** @class */ (function (_super) {
        __extends(TeamSelectButton, _super);
        function TeamSelectButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics(0, 0);
            graphics.lineStyle(1, 0xFFFFFF, 0.8);
            graphics.beginFill(0xFFFFFF, 0.1); //0.2
            graphics.drawRoundedRect(0, 0, 200, 240, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.numText = _this.game.add.text(0, 0, "0", { font: "32px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.numText.alpha = 0.2;
            _this.numText.anchor.set(0.5, 0);
            _this.numText.position.set(_this.width * 0.5, 4);
            _this.addChild(_this.numText);
            return _this;
        }
        TeamSelectButton.prototype.destroy = function () {
            this.icon = null;
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        TeamSelectButton.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            this.setIcon(this.data["team"], this.data["race"]);
        };
        TeamSelectButton.prototype.setIcon = function (_team, _frame) {
            if (this.icon) {
                this.icon.destroy();
                this.icon = null;
            }
            this.icon = this.game.add.sprite(0, 0, "atlas_ui", "race_" + _frame);
            this.icon.anchor.set(0.5, 0.5);
            this.icon.position.set(this.width * 0.5, this.height * 0.5);
            this.icon.tint = DinogenArena.GameModeManager.GetColourForTeam(_team);
            if ((_team + 1) % 2 == 0) {
                this.icon.scale.x = -1;
            }
            this.addChild(this.icon);
        };
        TeamSelectButton.prototype.setNumber = function (_val) {
            this.numText.setText(_val.toString(), true);
            this.setKeyForClick(_val);
        };
        return TeamSelectButton;
    }(ButtonBase));
    DinogenArena.TeamSelectButton = TeamSelectButton;
    var LabelButton = /** @class */ (function (_super) {
        __extends(LabelButton, _super);
        function LabelButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = _super.call(this, _callback, _callbackContext, _parameters) || this;
            var graphics = DinogenArena.GameUtil.game.add.graphics(0, 0);
            graphics.beginFill(0x666666, 1);
            graphics.drawRect(0, 0, 150, 32);
            graphics.beginFill(DinogenArena.GameUtil.COLOUR_THEME, 1);
            graphics.drawRect(0, 0, 150, 2);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.labelText = _this.game.add.text(0, 0, "Label", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.labelText.anchor.set(0.5, 0.5);
            _this.labelText.position.set(_this.width * 0.5, (_this.height * 0.5) + 2);
            _this.addChild(_this.labelText);
            return _this;
        }
        LabelButton.prototype.destroy = function () {
            this.labelText = null;
            _super.prototype.destroy.call(this);
        };
        LabelButton.prototype.setLabel = function (_val) {
            this.labelText.setText(_val, true);
        };
        return LabelButton;
    }(ButtonBase));
    DinogenArena.LabelButton = LabelButton;
    var SurvivalPerkButton = /** @class */ (function (_super) {
        __extends(SurvivalPerkButton, _super);
        function SurvivalPerkButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics(0, 0);
            graphics.beginFill(0xFFFFFF, 0);
            graphics.drawRect(0, 0, 120, 85);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.bg = _this.game.add.graphics();
            _this.bg.lineStyle(1, 0xFFFFFF, 0.8);
            _this.bg.beginFill(0xFFFFFF, 0.1);
            _this.bg.drawRoundedRect(0, 0, _this.width, _this.height, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.addChild(_this.bg);
            _this.labelText = _this.game.add.text(0, 0, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.width * 0.5, 1);
            _this.addChild(_this.labelText);
            _this.costText = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
            _this.costText.anchor.set(0.5, 1);
            _this.costText.position.set(_this.width * 0.5, _this.height + 4);
            _this.addChild(_this.costText);
            _this.lockIcon = _this.game.add.image(_this.width * 0.5, _this.height * 0.5, "atlas_ui", "icon_lock_small");
            _this.lockIcon.anchor.set(0.5, 0.5);
            _this.addChild(_this.lockIcon);
            return _this;
        }
        SurvivalPerkButton.prototype.destroy = function () {
            this.bg = null;
            this.labelText = null;
            this.icon = null;
            this.perk = null;
            _super.prototype.destroy.call(this);
        };
        SurvivalPerkButton.prototype.getPerk = function () {
            return this.perk;
        };
        SurvivalPerkButton.prototype.setPerk = function (_perk, _bOwned) {
            this.perk = _perk;
            if (this.icon) {
                this.icon.destroy();
            }
            this.icon = this.game.add.image(0, 0, "atlas_ui", _perk.id);
            this.icon.anchor.set(0.5, 0.5);
            this.icon.scale.set(0.5, 0.5);
            this.icon.x = this.width * 0.5;
            this.icon.y = this.height * 0.5;
            this.addChildAt(this.icon, 0);
            this.labelText.setText(_perk.name, true);
            if (_bOwned) {
                this.bg.visible = false;
                this.costText.setText("Active", true);
                this.costText.addColor(DinogenArena.GameUtil.COLOUR_NEW_STRING, 0);
            }
            else {
                this.icon.alpha = 0.2;
                this.costText.setText("$" + DinogenArena.WilkinUtil.FormatNum(_perk.cost), true);
            }
            //this.setEnabled(!_bOwned);
            this.bCanClick = !_bOwned;
        };
        SurvivalPerkButton.prototype.setLockIconVisible = function (_bVal) {
            this.lockIcon.visible = _bVal;
            this.bg.visible = !_bVal && this.bCanClick;
        };
        return SurvivalPerkButton;
    }(ButtonBase));
    DinogenArena.SurvivalPerkButton = SurvivalPerkButton;
    var SurvivalButton = /** @class */ (function (_super) {
        __extends(SurvivalButton, _super);
        function SurvivalButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics(0, 0);
            graphics.lineStyle(1, 0xFFFFFF, 0.8);
            graphics.beginFill(0xFFFFFF, 0.1);
            graphics.drawRoundedRect(0, 0, 220, 140, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.bAlphaWhenDisabled = true;
            _this.labelText = _this.game.add.text(0, 0, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.width * 0.5, 4);
            _this.addChild(_this.labelText);
            _this.descText = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            //this.descText.alpha = 0.5;
            _this.descText.setTextBounds(0, 0, _this.width, 18);
            _this.descText.y = _this.height - _this.descText.textBounds.height;
            _this.addChild(_this.descText);
            return _this;
        }
        SurvivalButton.prototype.destroy = function () {
            this.icon = null;
            this.labelText = null;
            _super.prototype.destroy.call(this);
        };
        SurvivalButton.prototype.setLabelText = function (_val) {
            this.labelText.setText(_val, true);
        };
        SurvivalButton.prototype.setDescText = function (_val) {
            this.descText.setText(_val, true);
        };
        SurvivalButton.prototype.setEnabled = function (_bVal) {
            _super.prototype.setEnabled.call(this, _bVal);
            this.descText.addColor(_bVal ? DinogenArena.GameUtil.COLOUR_NEW_STRING : "#FFFFFF", 0);
        };
        SurvivalButton.prototype.setIcon = function (_key, _frame) {
            if (this.icon) {
                this.icon.destroy();
            }
            this.icon = this.game.add.image(this.width * 0.5, this.height * 0.5, _key, _frame);
            this.icon.anchor.set(0.5, 0.5);
            this.addChild(this.icon);
        };
        return SurvivalButton;
    }(ButtonBase));
    DinogenArena.SurvivalButton = SurvivalButton;
    var SpawnSelectButton = /** @class */ (function (_super) {
        __extends(SpawnSelectButton, _super);
        function SpawnSelectButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics(0, 0);
            graphics.lineStyle(1, 0xFFFFFF, 0.8);
            graphics.beginFill(0xFFFFFF, 0.1); //0.2
            graphics.drawRoundedRect(0, 0, 290, 320, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.bAlphaWhenDisabled = true;
            _this.numText = _this.game.add.text(0, 0, "0", { font: "32px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.numText.alpha = 0.2;
            _this.numText.anchor.set(0.5, 0);
            _this.numText.position.set(_this.width * 0.5, 4);
            _this.addChild(_this.numText);
            _this.labelText = _this.game.add.text(0, 0, "Label", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.width * 0.5, _this.numText.y + _this.numText.height);
            _this.addChild(_this.labelText);
            _this.descText = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.descText.anchor.set(0.5, 1);
            _this.descText.position.set(_this.width * 0.5, _this.height);
            _this.addChild(_this.descText);
            _this.lockedText = _this.game.add.text(0, 0, "", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.lockedText.anchor.set(0.5, 0);
            _this.lockedText.x = (_this.width * 0.5);
            _this.lockedText.y = (_this.height * 0.5) + 48;
            _this.addChild(_this.lockedText);
            _this.lockedText.visible = false;
            _this.lockIcon = _this.game.add.image(_this.width * 0.5, _this.lockedText.y + _this.lockedText.height + 8, "atlas_ui", "icon_lock");
            _this.lockIcon.anchor.set(0.5, 0);
            _this.addChild(_this.lockIcon);
            _this.lockIcon.visible = false;
            return _this;
        }
        SpawnSelectButton.prototype.destroy = function () {
            this.labelText = null;
            this.descText = null;
            this.lockedText = null;
            this.lockIcon = null;
            this.stats = null;
            _super.prototype.destroy.call(this);
        };
        SpawnSelectButton.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            if (_data instanceof DinogenArena.Loadout) {
                var loadout = _data;
                this.labelText.setText(loadout.name, true);
                var arr = [loadout.weaponPrimary, loadout.weaponSecondary];
                var padding = 32;
                var weapons = this.game.add.group();
                this.addChild(weapons);
                for (var i = 0; i < arr.length; i++) {
                    var wpnContainer = this.game.add.group();
                    var gfx = this.game.add.graphics();
                    gfx.beginFill(0xFFFFFF, 0.1);
                    gfx.drawRoundedRect(0, 0, 138, 80, DinogenArena.GameUtil.RECTANGLE_RADIUS);
                    wpnContainer.add(gfx);
                    var wpnText = this.game.add.text(wpnContainer.width * 0.5, 0, DinogenArena.InventoryManager.GetNameForId(arr[i]), { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    wpnText.alpha = 0.5;
                    wpnText.anchor.set(0.5, 0);
                    wpnText.setTextBounds(0, 0, wpnContainer.width, 12);
                    wpnContainer.add(wpnText);
                    var wpnIcon = this.game.add.image(wpnContainer.width * 0.5, (wpnContainer.height * 0.5) + 4, "atlas_weapons", arr[i]);
                    wpnIcon.anchor.set(0.5, 0.5);
                    wpnContainer.add(wpnIcon);
                    wpnContainer.x = i * (wpnContainer.width + 4);
                    weapons.add(wpnContainer);
                }
                weapons.y = this.labelText.y + this.labelText.height + 4;
                weapons.x = (this.width * 0.5) - (weapons.width * 0.5);
                var perks = this.game.add.group();
                this.addChild(perks);
                var arr = [loadout.perkPlayer, loadout.perkWeapon];
                for (var i = 0; i < arr.length; i++) {
                    var perkGroup = this.game.add.group();
                    perks.add(perkGroup);
                    var perk = DinogenArena.PerkManager.GetPerk(arr[i]);
                    var perkIcon = this.game.add.image(0, 0, "atlas_ui", perk.id);
                    perkIcon.scale.set(0.8, 0.8);
                    perkGroup.add(perkIcon);
                    var perkName = this.game.add.text(perkIcon.x + perkIcon.width + 8, perkIcon.y + (perkIcon.height * 0.5) - 4, perk.name, { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    perkName.anchor.set(0, 0.5);
                    perkGroup.add(perkName);
                    var perkDesc = this.game.add.text(perkName.x, (perkName.y + (perkName.height * 0.5)) - 6, perk.desc, { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    perkDesc.alpha = 0.5;
                    perkGroup.add(perkDesc);
                    perkGroup.y = i * (perkGroup.height + 12);
                }
                perks.position.set((this.width * 0.5) - (perks.width * 0.5), weapons.y + weapons.height + 12);
            }
            else if (_data["type"] == "dinosaur") {
                var dinoInfo = DinogenArena.DinosaurManager.GetDinosaurInfo(_data["id"]);
                this.labelText.setText(dinoInfo["name"], true);
                var dinoIcon = this.game.add.image(0, 0, "atlas_ui", "dino_" + dinoInfo["id"]);
                dinoIcon.anchor.set(0.5, 0.5);
                this.descText.setText(dinoInfo["desc"], true);
                dinoIcon.scale.set(0.8, 0.8);
                dinoIcon.x = this.width * 0.5;
                dinoIcon.y = this.height * 0.5;
                dinoIcon.width = Math.min(dinoIcon.width, (this.width - 4));
                dinoIcon.scale.y = dinoIcon.scale.x;
                this.addChild(dinoIcon);
                /* Stats */
                this.stats = this.game.add.group();
                var speed = new DinogenArena.DinoStat("Speed", dinoInfo["speed"]);
                this.stats.addChild(speed);
                var damage = new DinogenArena.DinoStat("Damage", dinoInfo["damage"]);
                damage.y = speed.y + speed.height;
                this.stats.addChild(damage);
                var health = new DinogenArena.DinoStat("Health", dinoInfo["health"]);
                health.y = damage.y + damage.height;
                this.stats.addChild(health);
                this.addChild(this.stats);
                this.stats.x = (this.width * 0.5) - (this.stats.width * 0.5);
                this.stats.y = this.descText.y - this.descText.height - this.stats.height;
            }
        };
        SpawnSelectButton.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.data) {
                if (DinogenArena.GameUtil.IsDebugging()) {
                    this.data["unlockSeconds"] = undefined;
                }
                if (this.data["unlockSeconds"] != undefined) {
                    var gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
                    if (gameMode.getSecondsSinceMatchStart() > this.data["unlockSeconds"]) {
                        if (!this.bEnabled) {
                            this.setEnabled(true);
                        }
                    }
                    else {
                        if (this.bEnabled) {
                            this.setEnabled(false);
                        }
                        if (gameMode.matchHasStarted()) {
                            this.setLockedText("Available in " + DinogenArena.WilkinUtil.ConvertToTimeString(this.data["unlockSeconds"] - DinogenArena.GameUtil.GetGameState().gameMode.getSecondsSinceMatchStart()));
                        }
                        else {
                            this.setLockedText("");
                        }
                    }
                }
            }
        };
        SpawnSelectButton.prototype.setNumber = function (_val) {
            this.numText.setText(_val.toString(), true);
            this.setKeyForClick(_val);
        };
        SpawnSelectButton.prototype.setEnabled = function (_bVal) {
            _super.prototype.setEnabled.call(this, _bVal);
            this.updateLocks();
        };
        SpawnSelectButton.prototype.updateLocks = function () {
            if (this.data) {
                this.lockIcon.visible = !this.bEnabled;
                this.lockedText.visible = !this.bEnabled;
                this.stats.visible = this.bEnabled;
            }
        };
        SpawnSelectButton.prototype.setLockedText = function (_val) {
            this.lockedText.setText(_val, true);
        };
        return SpawnSelectButton;
    }(ButtonBase));
    DinogenArena.SpawnSelectButton = SpawnSelectButton;
    var CloseButton = /** @class */ (function (_super) {
        __extends(CloseButton, _super);
        function CloseButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = _super.call(this, _callback, _callbackContext, _parameters) || this;
            _this.close = DinogenArena.GameUtil.game.add.image(0, 0, "atlas_ui", "close");
            _this.close.anchor.set(0.5, 0.5);
            _this.addChild(_this.close);
            return _this;
        }
        Object.defineProperty(CloseButton.prototype, "width", {
            get: function () {
                return this.close.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CloseButton.prototype, "height", {
            get: function () {
                return this.close.height;
            },
            enumerable: true,
            configurable: true
        });
        CloseButton.prototype.destroy = function () {
            this.close = null;
            _super.prototype.destroy.call(this);
        };
        return CloseButton;
    }(ButtonBase));
    DinogenArena.CloseButton = CloseButton;
    var CustomModeButton = /** @class */ (function (_super) {
        __extends(CustomModeButton, _super);
        function CustomModeButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.lineStyle(1, 0xFFFFFF, 0.8);
            graphics.beginFill(0xFFFFFF, 0.1); //0x000000
            //graphics.drawRect(0, 0, 195, 60); //194, height 80
            graphics.drawRoundedRect(0, 0, 195, 60, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.bAlphaWhenDisabled = true;
            _this.labelText = _this.game.add.text(0, 3, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.labelText.setTextBounds(0, 0, _this.width, _this.height);
            _this.addChild(_this.labelText);
            return _this;
        }
        CustomModeButton.prototype.setLabelText = function (_val) {
            this.labelText.setText(_val, true);
        };
        CustomModeButton.prototype.setIcon = function (_val) {
            if (this.icon) {
                this.icon.destroy();
            }
            this.icon = this.game.add.image(this.width * 0.5, this.height * 0.5, "atlas_ui", _val);
            this.icon.anchor.set(0.5, 0.5);
            this.icon.alpha = 0.2;
            this.addChildAt(this.icon, 0);
        };
        /*
        public get width(): number
        {
            return 197; //this.bg.width;
        }

        public get height(): number
        {
            return 60;
        }
        */
        CustomModeButton.prototype.destroy = function () {
            this.icon = null;
            this.labelText = null;
            _super.prototype.destroy.call(this);
        };
        return CustomModeButton;
    }(ButtonBase));
    DinogenArena.CustomModeButton = CustomModeButton;
    var LoadoutItemButton = /** @class */ (function (_super) {
        __extends(LoadoutItemButton, _super);
        function LoadoutItemButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.lineStyle(1, 0xFFFFFF, 0.8);
            graphics.beginFill(0xFFFFFF, 0.1); //0.2
            //graphics.drawRect(0, 0, 220, 130);
            graphics.drawRoundedRect(0, 0, 220, 130, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.labelText = _this.game.add.text(_this.width * 0.5, 2, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.labelText.anchor.set(0.5, 0);
            _this.addChild(_this.labelText);
            _this.costText = _this.game.add.text(_this.width * 0.5, (_this.labelText.y + _this.labelText.height) - 6, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
            _this.costText.anchor.set(0.5, 0);
            _this.addChild(_this.costText);
            _this.descText = _this.game.add.text(_this.width * 0.5, _this.height, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.descText.anchor.set(0.5, 1);
            _this.descText.alpha = 0.5;
            _this.addChild(_this.descText);
            _this.lockIcon = _this.game.add.image(0, 0, "atlas_ui", "icon_lock_small");
            _this.lockIcon.anchor.set(0.5, 1);
            _this.lockIcon.x = _this.width * 0.5;
            _this.lockIcon.y = _this.height - 4;
            _this.addChild(_this.lockIcon);
            _this.lockIcon.visible = false;
            return _this;
        }
        LoadoutItemButton.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            if (_data["type"] == "weapon") {
                var firearm;
                if (_data["firearm"]) {
                    firearm = _data["firearm"];
                }
                else {
                    firearm = DinogenArena.InventoryManager.GetItemById(_data["weaponId"]);
                }
                if (firearm.isSurvivalOnly()) {
                    var survivalIcon = this.game.add.image(0, 0, "atlas_ui", "icon_survival_small");
                    var padding = 4;
                    survivalIcon.x = this.width - survivalIcon.width - padding;
                    survivalIcon.y = this.height - survivalIcon.height - padding;
                    this.addChild(survivalIcon);
                }
                this.icon = this.game.add.image(this.width * 0.5, this.height * 0.5, "atlas_weapons", firearm.getId());
                this.icon.anchor.set(0.5, 0.5);
                this.addChild(this.icon);
                this.labelText.setText(firearm.getName());
                if (_data["bSurvival"]) {
                    this.costText.setText("$" + DinogenArena.WilkinUtil.FormatNum(firearm.getCost()));
                }
                this.descText.setText(firearm.getFireModeString() + " - " + firearm.getMagMax() + "/" + firearm.getAmmoMax());
            }
            else if (_data["type"] == "perk") {
                var perk = _data["perk"];
                this.icon = this.game.add.image(this.width * 0.5, this.height * 0.5, "atlas_ui", perk.id);
                //this.icon.scale.set(0.6, 0.6);
                this.icon.anchor.set(0.5, 0.5);
                this.addChild(this.icon);
                this.labelText.setText(perk.name);
                this.descText.setText(perk.desc);
            }
            if (_data["titleText"] != undefined) {
                this.labelText.setText(_data["titleText"]);
            }
            if (_data["descText"] != undefined) {
                this.descText.setText(_data["descText"]);
            }
            if (_data["bLocked"] == true) {
                this.setEnabled(false);
            }
            this.lockIcon.visible = _data["bLocked"] && !_data["bSurvival"];
        };
        LoadoutItemButton.prototype.setNewUnlocks = function (_bVal) {
            if (_bVal) {
                var newImage = this.game.add.image(this.width - 4, this.height * 0.5, "atlas_ui", "icon_new");
                newImage.anchor.set(1, 0.5);
                this.addChild(newImage);
            }
        };
        return LoadoutItemButton;
    }(ButtonBase));
    DinogenArena.LoadoutItemButton = LoadoutItemButton;
    var SurvivalSupportButton = /** @class */ (function (_super) {
        __extends(SurvivalSupportButton, _super);
        function SurvivalSupportButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.lineStyle(1, 0xFFFFFF, 0.8);
            graphics.beginFill(0xFFFFFF, 0.1);
            graphics.drawRoundedRect(0, 0, 400, 180, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.bAlphaWhenDisabled = true;
            return _this;
        }
        SurvivalSupportButton.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        SurvivalSupportButton.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            var nameText = this.game.add.text(0, 0, _data["name"], { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            nameText.anchor.set(0.5, 0);
            nameText.position.set(this.width * 0.5, 4);
            this.addChild(nameText);
            var descText = this.game.add.text(0, 0, this.bEnabled ? _data["desc"] : "Not enough money", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            descText.alpha = 0.5;
            descText.anchor.set(0.5, 0);
            descText.position.set(this.width * 0.5, (nameText.y + nameText.height) - 4);
            this.addChild(descText);
            var costText = this.game.add.text(0, 0, "$" + DinogenArena.WilkinUtil.FormatNum(_data["cost"]), { font: "18px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
            costText.anchor.set(0.5, 0);
            costText.position.set(this.width * 0.5, this.height - costText.height);
            this.addChild(costText);
            var icon;
            if (_data["type"] == DinogenArena.SurvivalManager.SUPPORT_AIR) {
                icon = this.game.add.image(0, 0, "atlas_ui", "heli_" + _data["id"]);
            }
            else if (_data["type"] == DinogenArena.SurvivalManager.SUPPORT_SOLDIER) {
                icon = this.game.add.image(0, 0, "atlas_ui", _data["id"]);
            }
            if (icon) {
                icon.anchor.set(0.5, 0.5);
                icon.position.set(this.width * 0.5, (this.height * 0.5) + 6);
                this.addChild(icon);
            }
        };
        return SurvivalSupportButton;
    }(ButtonBase));
    DinogenArena.SurvivalSupportButton = SurvivalSupportButton;
    var SkillButton = /** @class */ (function (_super) {
        __extends(SkillButton, _super);
        function SkillButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 0.2);
            graphics.drawRect(0, 0, 100, 100);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.labelText = _this.game.add.text(0, 0, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.labelText.setTextBounds(0, 0, _this.width, 24);
            _this.labelText.y = _this.height - _this.labelText.height;
            _this.addChild(_this.labelText);
            return _this;
        }
        SkillButton.prototype.destroy = function () {
            this.labelText = null;
            _super.prototype.destroy.call(this);
        };
        SkillButton.prototype.setLabelText = function (_val) {
            this.labelText.setText(_val, true);
        };
        return SkillButton;
    }(ButtonBase));
    DinogenArena.SkillButton = SkillButton;
    var CharacterClassButton = /** @class */ (function (_super) {
        __extends(CharacterClassButton, _super);
        function CharacterClassButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 0.2);
            graphics.drawRect(0, 0, 260, 400);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.bAlphaWhenDisabled = false;
            _this.selection = _this.game.add.graphics();
            _this.selection.beginFill(DinogenArena.GameUtil.COLOUR_THEME, 0.8);
            _this.selection.drawRect(0, 0, _this.width, _this.height);
            _this.selection.alpha = 0;
            _this.addChild(_this.selection);
            return _this;
        }
        CharacterClassButton.prototype.destroy = function () {
            this.selection = null;
            _super.prototype.destroy.call(this);
        };
        CharacterClassButton.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            var nameText = this.game.add.text(this.width * 0.5, 4, _data["name"], { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            nameText.anchor.set(0.5, 0);
            this.addChild(nameText);
            var styleText = this.game.add.text(this.width * 0.5, nameText.y + nameText.height, _data["style"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            styleText.alpha = 0.5;
            styleText.anchor.set(0.5, 0);
            this.addChild(styleText);
            var icon = this.game.add.image(this.width * 0.5, this.height * 0.4, "atlas_ui", ("class_" + _data["id"]));
            icon.anchor.set(0.5, 0.5);
            this.addChild(icon);
            var focusHeaderText = this.game.add.text(this.width * 0.5, this.height * 0.6, "Focus:", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center" });
            focusHeaderText.anchor.set(0.5, 0);
            this.addChild(focusHeaderText);
            var focusText = this.game.add.text(this.width * 0.5, focusHeaderText.y + focusHeaderText.height, _data["focus"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center" });
            focusText.alpha = 0.5;
            focusText.anchor.set(0.5, 0);
            this.addChild(focusText);
            var preferredHeaderText = this.game.add.text(this.width * 0.5, focusText.y + focusText.height + 8, "Preferred Weapons:", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center" });
            preferredHeaderText.anchor.set(0.5, 0);
            this.addChild(preferredHeaderText);
            var descText = this.game.add.text(this.width * 0.5, preferredHeaderText.y + preferredHeaderText.height, _data["preferredWeapons"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center" });
            descText.alpha = 0.5;
            descText.anchor.set(0.5, 0);
            this.addChild(descText);
        };
        CharacterClassButton.prototype.setSelected = function (_bVal) {
            this.setEnabled(!_bVal);
            if (_bVal) {
                this.alpha = 1;
            }
            else {
                this.onOut();
            }
            var tween = this.game.add.tween(this.selection).to({ alpha: _bVal ? 1 : 0 }, 350, Phaser.Easing.Exponential.Out, true);
            //this.selection.visible = _bVal;
        };
        return CharacterClassButton;
    }(ButtonBase));
    DinogenArena.CharacterClassButton = CharacterClassButton;
    var ScrollThumbButton = /** @class */ (function (_super) {
        __extends(ScrollThumbButton, _super);
        function ScrollThumbButton(_callback, _callbackContext, _parameters, _w, _h) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 1);
            graphics.drawRoundedRect(0, 0, _w, _h, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            graphics.destroy();
            _this.bCanClick = false;
            var gfx = _this.game.add.graphics();
            gfx.beginFill(0x000000, 0.5);
            for (var i = 0; i < 3; i++) {
                gfx.drawRect(0, i * 2, 4, 1);
            }
            var dragger = _this.game.add.image(0, 0, gfx.generateTexture());
            gfx.destroy();
            _this.addChild(dragger);
            dragger.x = Math.round((_this.width * 0.5) - (dragger.width * 0.5));
            dragger.y = Math.round((_this.height * 0.5) - (dragger.height * 0.5));
            return _this;
        }
        return ScrollThumbButton;
    }(ButtonBase));
    DinogenArena.ScrollThumbButton = ScrollThumbButton;
    var AchievementButton = /** @class */ (function (_super) {
        __extends(AchievementButton, _super);
        function AchievementButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 0);
            graphics.drawRect(0, 0, 50, 60);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            _this.bCanClick = false;
            _this.icon = _this.game.add.image(0, 0, "atlas_ui", "icon_achievement_locked");
            _this.addChild(_this.icon);
            _this.labelText = _this.game.add.text(0, _this.icon.height + 2, "", { font: "11px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.labelText.setTextBounds(0, 0, _this.width, 20);
            _this.addChild(_this.labelText);
            return _this;
        }
        AchievementButton.prototype.setLabelText = function (_val) {
            this.labelText.setText(_val, true);
        };
        AchievementButton.prototype.setUnlocked = function (_bVal) {
            this.icon.frameName = "icon_achievement_" + (_bVal ? "unlocked" : "locked");
        };
        return AchievementButton;
    }(ButtonBase));
    DinogenArena.AchievementButton = AchievementButton;
    var KeyButton = /** @class */ (function (_super) {
        __extends(KeyButton, _super);
        function KeyButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 0);
            graphics.drawRect(0, 0, 200, 80);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            _this.setWarning(false);
            _this.keyIcon = new DinogenArena.KeyIcon();
            _this.keyIcon.x = (_this.width * 0.5) - (_this.keyIcon.width * 0.5);
            _this.keyIcon.y = (_this.height * 0.5) - (_this.keyIcon.height * 0.5) - 4;
            _this.addChild(_this.keyIcon);
            _this.descText = _this.game.add.text(0, _this.height * 0.5, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.descText.anchor.set(0.5, 0);
            _this.descText.x = _this.width * 0.5;
            _this.descText.y = _this.keyIcon.y + _this.keyIcon.height + 4;
            _this.addChild(_this.descText);
            return _this;
        }
        KeyButton.prototype.destroy = function () {
            this.bg = null;
            this.keyIcon = null;
            this.descText = null;
            _super.prototype.destroy.call(this);
        };
        KeyButton.prototype.getKeyCode = function () {
            return this.keyCode;
        };
        KeyButton.prototype.setWarning = function (_bVal) {
            if (this.bg) {
                this.bg.destroy();
            }
            this.bg = this.game.add.graphics();
            this.bg.beginFill(_bVal ? 0xFF0000 : 0xFFFFFF, 0.2);
            this.bg.drawRoundedRect(0, 0, this.width, this.height, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            this.addChildAt(this.bg, 0);
        };
        KeyButton.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            this.keyCode = DinogenArena.PlayerManager.CurrentProfile.controls.getKey(_data["keyId"]);
            var keyString = DinogenArena.PlayerManager.CurrentProfile.controls.getKeyStringFromId(_data["keyId"]);
            this.keyIcon.setKey(keyString);
            this.descText.setText(DinogenArena.PlayerControls.GetKeyDescription(_data["keyId"]), true);
            this.keyIcon.x = Math.round((this.width * 0.5) - (this.keyIcon.width * 0.5));
        };
        return KeyButton;
    }(ButtonBase));
    DinogenArena.KeyButton = KeyButton;
    var ProfileButton = /** @class */ (function (_super) {
        __extends(ProfileButton, _super);
        function ProfileButton(_callback, _callbackContext, _parameters) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            if (_parameters === void 0) { _parameters = null; }
            var _this = this;
            var graphics = DinogenArena.GameUtil.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 0);
            graphics.drawRect(0, 0, 200, 120);
            _this = _super.call(this, _callback, _callbackContext, _parameters, graphics.generateTexture()) || this;
            var bg = _this.game.add.graphics();
            bg.beginFill(0xFFFFFF, 0.2);
            bg.drawRoundedRect(0, 0, _this.width, _this.height, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.addChild(bg);
            var icon = _this.game.add.image(_this.width * 0.5, _this.height * 0.5, "atlas_ui", "race_human");
            icon.anchor.set(0.5, 0.5);
            icon.alpha = 0.1;
            _this.addChild(icon);
            _this.levelText = _this.game.add.text(0, 0, "1", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "bottom" });
            _this.levelText.setTextBounds(0, 0, _this.width, _this.height * 0.5);
            _this.addChild(_this.levelText);
            _this.labelText = _this.game.add.text(0, _this.height * 0.5, "Player", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "top" });
            _this.labelText.alpha = 0.5;
            _this.labelText.setTextBounds(0, 0, _this.width, _this.height * 0.5);
            _this.addChild(_this.labelText);
            return _this;
        }
        ProfileButton.prototype.setLevel = function (_val) {
            if (_val > 0) {
                this.levelText.setText("Level " + _val.toString(), true);
            }
            else {
                this.levelText.setText("No Data", true);
            }
        };
        ProfileButton.prototype.setLabelText = function (_val) {
            this.labelText.setText(_val, true);
        };
        ProfileButton.prototype.destroy = function () {
            this.labelText = null;
            _super.prototype.destroy.call(this);
        };
        return ProfileButton;
    }(ButtonBase));
    DinogenArena.ProfileButton = ProfileButton;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var SettingsModifier = /** @class */ (function (_super) {
        __extends(SettingsModifier, _super);
        function SettingsModifier(_game, _label, _width, _type, _data) {
            var _this = _super.call(this, _game) || this;
            _this.updateEvent = new Phaser.Signal();
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 0.1);
            graphics.drawRect(0, 0, 200, 32);
            _this.bg = _this.game.add.sprite(0, 0, graphics.generateTexture(), null, _this);
            graphics.destroy();
            _this.addAt(_this.bg, 0);
            _this.labelText = _this.game.add.text(0, 0, "Default", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignV: "center" }, _this);
            _this.labelText.alpha = 0.5;
            _this.labelText.anchor.set(0, 0.5);
            _this.labelText.position.set(8, (_this.bg.height * 0.5) + 3);
            _this.add(_this.labelText);
            _this.game.add.existing(_this);
            _this.setLabel(_label);
            _this.setWidth(_width);
            _this.setType(_type, _data);
            return _this;
        }
        SettingsModifier.prototype.setLabel = function (_val) {
            this.labelText.setText(_val);
        };
        SettingsModifier.prototype.setWidth = function (_val) {
            if (this.bg) {
                this.bg.destroy();
            }
            var graphics = this.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 1);
            graphics.drawRoundedRect(0, 0, _val, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            this.bg = this.game.add.sprite(0, 0, graphics.generateTexture(), null, this);
            this.bg.alpha = 0.1;
            this.addAt(this.bg, 0);
            graphics.destroy();
            this.updateModifier();
        };
        SettingsModifier.prototype.setType = function (_type, _data) {
            this.modifierType = _type;
            this.data = _data;
            if (_type == SettingsModifier.MODULE_BUTTON) {
                this.module = new SettingsModifierModule_Button();
            }
            else if (_type == SettingsModifier.MODULE_SLIDER) {
                this.module = new SettingsModifierModule_Slider();
            }
            else if (_type == SettingsModifier.MODULE_LABEL) {
                this.module = new SettingsModifierModule_Label();
            }
            else if (_type == SettingsModifier.MODULE_IMAGE) {
                this.module = new SettingsModifierModule_Image();
            }
            this.updateModifier();
            if (this.module) {
                this.addChild(this.module);
                this.module.setData(_data);
                this.module.updateEvent.add(this.onModuleChange, this);
            }
            if (_data) {
                if (_data["bHideBackground"] == true) {
                    //this.bg.visible = false;
                    this.bg.alpha = 0.35;
                    this.bg.tint = 0x000000;
                    this.bg.parent.setChildIndex(this.bg, 0);
                    this.labelText.x = this.bg.width * 0.5;
                    this.labelText.anchor.x = 0.5;
                    this.labelText.setStyle({ font: "16px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_THEME_STRING }, true);
                    this.labelText.alpha = 0.8;
                }
            }
        };
        SettingsModifier.prototype.randomizeModule = function () {
            if (this.module) {
                this.module.randomize();
            }
        };
        SettingsModifier.prototype.removeModule = function () {
            if (this.module) {
                this.removeChild(this.module);
                this.module.destroy();
                this.module = null;
            }
        };
        SettingsModifier.prototype.updateModifier = function () {
            if (this.module) {
                this.module.x = this.bg.width - this.module.width;
            }
        };
        SettingsModifier.prototype.dispatchUpdate = function () {
            this.onModuleChange();
        };
        SettingsModifier.prototype.onModuleChange = function () {
            this.updateEvent.dispatch(this);
        };
        SettingsModifier.prototype.destroy = function () {
            this.removeModule();
            this.data = null;
            _super.prototype.destroy.call(this);
        };
        SettingsModifier.MODULE_BUTTON = "MODULE_BUTTON";
        SettingsModifier.MODULE_SLIDER = "MODULE_SLIDER";
        SettingsModifier.MODULE_LABEL = "MODULE_LABEL";
        SettingsModifier.MODULE_IMAGE = "MODULE_IMAGE";
        return SettingsModifier;
    }(Phaser.Group));
    DinogenArena.SettingsModifier = SettingsModifier;
    var SettingsModifierModule = /** @class */ (function (_super) {
        __extends(SettingsModifierModule, _super);
        function SettingsModifierModule() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.game.add.existing(_this);
            _this.updateEvent = new Phaser.Signal();
            return _this;
        }
        SettingsModifierModule.prototype.randomize = function () {
            return;
        };
        SettingsModifierModule.prototype.getCurrentValue = function () {
            return null;
        };
        SettingsModifierModule.prototype.setData = function (_data) {
            this.data = _data;
        };
        SettingsModifierModule.prototype.getSelectedData = function () {
            return null;
        };
        SettingsModifierModule.prototype.dispatchUpdate = function () {
            this.updateEvent.dispatch();
        };
        SettingsModifierModule.prototype.destroy = function () {
            this.updateEvent.removeAll();
            this.updateEvent = null;
            this.data = null;
            _super.prototype.destroy.call(this, true);
        };
        return SettingsModifierModule;
    }(Phaser.Group));
    DinogenArena.SettingsModifierModule = SettingsModifierModule;
    var SettingsModifierModule_Button = /** @class */ (function (_super) {
        __extends(SettingsModifierModule_Button, _super);
        function SettingsModifierModule_Button() {
            var _this = _super.call(this) || this;
            _this.buttonBase = new DinogenArena.ModuleButton(_this.onClicked, _this);
            _this.addChild(_this.buttonBase);
            _this.items = [];
            return _this;
        }
        Object.defineProperty(SettingsModifierModule_Button.prototype, "width", {
            get: function () {
                return this.buttonBase.width;
            },
            enumerable: true,
            configurable: true
        });
        SettingsModifierModule_Button.prototype.getCurrentValue = function () {
            return this.itemIndex;
        };
        SettingsModifierModule_Button.prototype.randomize = function () {
            if (this.data) {
                do {
                    var newIndex = DinogenArena.WilkinUtil.GenerateRandomNumber(0, this.items.length - 1);
                    var cur = this.items[newIndex];
                } while (cur["bLocked"] == true);
                this.setFromIndex(newIndex);
                this.dispatchUpdate();
            }
        };
        SettingsModifierModule_Button.prototype.onClicked = function () {
            this.itemIndex++;
            if (this.itemIndex >= this.items.length) {
                this.itemIndex = 0;
            }
            this.setFromIndex(this.itemIndex);
            this.dispatchUpdate();
        };
        SettingsModifierModule_Button.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            if (this.data) {
                this.items = this.data["items"];
                if (_data["index"]) {
                    this.setFromIndex(this.data["index"]);
                }
                else {
                    this.setFromIndex(0);
                }
            }
        };
        SettingsModifierModule_Button.prototype.setFromIndex = function (_index) {
            var cur = this.items[_index];
            this.buttonBase.setLabelText(cur["label"]);
            this.itemIndex = _index;
            if (this.indicator) {
                this.indicator.destroy();
            }
            var graphics = this.game.add.graphics(0, 0);
            var bHasItems = this.items.length > 1;
            this.buttonBase.setHasItems(bHasItems);
            if (bHasItems) {
                for (var i = 0; i < this.items.length; i++) {
                    var bCurrent = i == this.itemIndex;
                    graphics.beginFill(0xFFFFFF, bCurrent ? 0.8 : 0.3);
                    var size = 4;
                    //graphics.drawRect(i * 8, 0, size, size);
                    graphics.drawCircle(i * 10, 0, size);
                }
            }
            this.indicator = this.game.add.sprite(0, 0, graphics.generateTexture());
            graphics.destroy();
            this.indicator.anchor.set(0.5, 0.5);
            this.indicator.position.set(this.width * 0.5, 28);
            this.addChild(this.indicator);
            if (cur["colour"] != undefined) {
                this.buttonBase.setColour(cur["colour"]);
            }
            else {
                this.buttonBase.resetToDefault();
            }
            this.buttonBase.lockIcon.visible = cur["bLocked"];
        };
        SettingsModifierModule_Button.prototype.getSelectedData = function () {
            return this.items[this.itemIndex]["id"];
        };
        return SettingsModifierModule_Button;
    }(SettingsModifierModule));
    DinogenArena.SettingsModifierModule_Button = SettingsModifierModule_Button;
    var SettingsModifierModule_Slider = /** @class */ (function (_super) {
        __extends(SettingsModifierModule_Slider, _super);
        function SettingsModifierModule_Slider() {
            var _this = _super.call(this) || this;
            _this.sliderWidth = 150;
            _this.min = 0;
            _this.max = 1;
            _this.value = 0;
            _this.bIsDragging = false;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(DinogenArena.GameUtil.COLOUR_THEME, 1);
            graphics.drawRoundedRect(0, 0, 150, 4, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.thumbBg = _this.game.add.sprite(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.thumbBg.anchor.set(0, 0.5);
            _this.thumbBg.position.set(0, 16);
            _this.addChild(_this.thumbBg);
            _this.thumb = new DinogenArena.SliderThumbButton();
            _this.thumb.position.set(_this.thumbBg.width * 0.5, _this.thumbBg.y);
            _this.addChild(_this.thumb);
            _this.thumb.input.enableDrag();
            _this.thumb.input.setDragLock(true, false);
            _this.thumb.input.boundsRect = new Phaser.Rectangle(_this.thumbBg.x - (_this.thumb.width * 0.5), _this.thumbBg.y - (_this.thumb.height * 0.5), _this.thumbBg.width + (_this.thumb.width), _this.thumb.height);
            _this.thumb.events.onDragStart.add(_this.onThumbDown, _this);
            _this.thumb.events.onDragStop.add(_this.onThumbUp, _this);
            _this.thumb.events.onDragUpdate.add(_this.onThumbUpdate, _this);
            graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0xFFFFFF, 0);
            graphics.drawRect(0, 0, 32, 32);
            _this.labelBg = _this.game.add.sprite(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.labelBg.width = 50;
            _this.labelBg.height = 32;
            _this.labelBg.position.set(_this.thumbBg.width, 0);
            _this.addChild(_this.labelBg);
            _this.labelText = _this.game.add.text(0, 0, "0", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.anchor.set(0.5, 0.5);
            _this.labelText.position.set(_this.labelBg.x + (_this.labelBg.width * 0.5), _this.thumbBg.y + 2);
            _this.addChild(_this.labelText);
            return _this;
        }
        SettingsModifierModule_Slider.prototype.getCurrentValue = function () {
            return this.value;
        };
        SettingsModifierModule_Slider.prototype.onThumbUpdate = function (sprite, pointer) {
            this.setValueFromPercent(this.thumb.x / this.sliderWidth);
        };
        SettingsModifierModule_Slider.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            if (this.data) {
                if (this.data["min"] != undefined) {
                    this.min = this.data["min"];
                }
                if (this.data["max"] != undefined) {
                    this.max = this.data["max"];
                }
                if (this.data["value"]) {
                    this.setValue(this.data["value"]);
                }
                else {
                    this.setValue(0);
                }
                this.updateThumb();
            }
        };
        SettingsModifierModule_Slider.prototype.onThumbDown = function (sprite, pointer) {
            this.bIsDragging = true;
        };
        SettingsModifierModule_Slider.prototype.onThumbUp = function (sprite, pointer) {
            this.bIsDragging = false;
            this.updateThumb();
        };
        SettingsModifierModule_Slider.prototype.updateThumb = function () {
            if (this.max > 1) {
                this.thumb.x = Math.floor((this.value / this.max) * this.sliderWidth);
            }
            else {
                this.thumb.x = Math.floor(this.value * this.sliderWidth);
            }
        };
        SettingsModifierModule_Slider.prototype.setValue = function (_val) {
            if (isNaN(_val)) {
                return;
            }
            this.value = _val;
            var str = this.value.toString();
            if (this.max <= 1) {
                str = Math.round(this.value * 100).toString();
            }
            this.labelText.setText(str);
        };
        SettingsModifierModule_Slider.prototype.setValueFromPercent = function (_val) {
            var val = (this.max * _val) + (this.min * _val);
            if (this.max > 1) {
                val = Math.round(val);
                val = Math.min(this.max, val);
                val = Math.max(this.min, val);
            }
            this.setValue(val);
            this.dispatchUpdate();
        };
        SettingsModifierModule_Slider.prototype.getSelectedData = function () {
            return this.value;
        };
        SettingsModifierModule_Slider.prototype.destroy = function () {
            this.thumb.destroy();
            this.thumb = null;
            _super.prototype.destroy.call(this);
        };
        return SettingsModifierModule_Slider;
    }(SettingsModifierModule));
    DinogenArena.SettingsModifierModule_Slider = SettingsModifierModule_Slider;
    var SettingsModifierModule_Label = /** @class */ (function (_super) {
        __extends(SettingsModifierModule_Label, _super);
        function SettingsModifierModule_Label() {
            var _this = _super.call(this) || this;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0xFFFFFF, 0.1);
            graphics.drawRoundedRect(0, 0, 180, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg = _this.game.add.sprite(0, 0, graphics.generateTexture());
            _this.addChild(_this.bg);
            graphics.destroy();
            _this.labelText = _this.game.add.text(0, 0, "", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" }, _this);
            _this.labelText.anchor.set(0.5, 0.5);
            _this.labelText.position.set(_this.bg.width * 0.5, (_this.bg.height * 0.5) + 3);
            _this.addChild(_this.labelText);
            return _this;
        }
        SettingsModifierModule_Label.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            if (this.data) {
                this.labelText.setText(this.data["label"]);
            }
        };
        return SettingsModifierModule_Label;
    }(SettingsModifierModule));
    DinogenArena.SettingsModifierModule_Label = SettingsModifierModule_Label;
    var SettingsModifierModule_Image = /** @class */ (function (_super) {
        __extends(SettingsModifierModule_Image, _super);
        function SettingsModifierModule_Image() {
            return _super.call(this) || this;
        }
        SettingsModifierModule_Image.prototype.setData = function (_data) {
            _super.prototype.setData.call(this, _data);
            if (this.data) {
                this.image = this.game.add.image(0, 0, this.data["key"]);
                this.image.height = 120;
                this.image.scale.x = this.image.scale.y;
                this.addChild(this.image);
            }
        };
        return SettingsModifierModule_Image;
    }(SettingsModifierModule));
    DinogenArena.SettingsModifierModule_Image = SettingsModifierModule_Image;
    var SurvivalPanel = /** @class */ (function (_super) {
        __extends(SurvivalPanel, _super);
        function SurvivalPanel() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var bg = _this.game.add.graphics();
            bg.beginFill(0xFFFFFF, 0);
            bg.drawRect(0, 0, 600, 150);
            _this.add(bg);
            var bestContainer = _this.game.add.group();
            _this.add(bestContainer);
            var gfx = _this.game.add.graphics();
            gfx.beginFill(0x000000, 0.2); //0xFFFFFF, 0.1
            gfx.drawRoundedRect(0, 0, 300, 60, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            bestContainer.add(gfx);
            var labelText = _this.game.add.text(0, 0, "Your best score:", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            labelText.alpha = 0.5;
            labelText.anchor.set(0.5, 1);
            labelText.position.set(gfx.x + (gfx.width * 0.5), gfx.y + (gfx.height * 0.5));
            bestContainer.add(labelText);
            var bestText = _this.game.add.text(0, 0, DinogenArena.WilkinUtil.FormatNum(DinogenArena.PlayerManager.CurrentProfile.getBestSurvivalScore()) + " kills", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignV: "middle" });
            bestText.anchor.set(0.5, 0);
            bestText.position.set(labelText.x, labelText.y);
            bestContainer.add(bestText);
            bestContainer.x = (bg.width * 0.5) - (bestContainer.width * 0.5);
            var buttonsContainer = _this.game.add.group();
            _this.add(buttonsContainer);
            _this.leaderboards = new DinogenArena.CustomModeButton(_this.onLeaderboardsClicked, _this);
            _this.leaderboards.setIcon("icon_button_leaderboards");
            _this.leaderboards.setLabelText("View Leaderboards"); //2605
            buttonsContainer.add(_this.leaderboards);
            /*
            this.guide = new CustomModeButton(this.onGuideClicked, this);
            this.guide.setIcon("icon_button_guide");
            this.guide.setLabelText("Game Guide"); //?
            this.guide.x = this.leaderboards.x + this.leaderboards.width + 4;
            buttonsContainer.add(this.guide);
            */
            buttonsContainer.x = (bg.width * 0.5) - (buttonsContainer.width * 0.5);
            buttonsContainer.y = bestContainer.y + bestContainer.height + 4;
            return _this;
        }
        SurvivalPanel.prototype.destroy = function () {
            this.leaderboards = null;
            _super.prototype.destroy.call(this);
        };
        /*
        public get height(): number
        {
            return this.leaderboards.height + 12;
        }
        */
        SurvivalPanel.prototype.onLeaderboardsClicked = function () {
            DinogenArena.APIUtil.LoadSurvivalLeaderboards();
        };
        SurvivalPanel.prototype.onGuideClicked = function () {
            DinogenArena.GameUtil.OpenDinogenArenaGuide();
        };
        return SurvivalPanel;
    }(Phaser.Group));
    DinogenArena.SurvivalPanel = SurvivalPanel;
    var CustomModeButtons = /** @class */ (function (_super) {
        __extends(CustomModeButtons, _super);
        function CustomModeButtons() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var padding = 5;
            _this.loadout = new DinogenArena.CustomModeButton(_this.onLoadoutsClicked, _this);
            _this.loadout.setIcon("icon_button_loadouts");
            _this.add(_this.loadout);
            _this.challenges = new DinogenArena.CustomModeButton(_this.onChallengesClicked, _this);
            _this.challenges.setIcon("icon_button_challenges");
            _this.challenges.setLabelText("View Challenges");
            _this.challenges.x = _this.loadout.x + _this.loadout.width + padding;
            _this.add(_this.challenges);
            _this.prestige = new DinogenArena.CustomModeButton(_this.onPrestigeClicked, _this);
            _this.prestige.setIcon("icon_button_prestige");
            if (DinogenArena.PlayerManager.CurrentProfile.getCustomPrestige() > 0) {
                _this.prestige.setLabelText("Prestiged"); //2714
            }
            else {
                _this.prestige.setLabelText("Prestige" + (!DinogenArena.PlayerManager.CurrentProfile.isMaxCustomLevel() ? ("\n(Unlocked at level " + DinogenArena.PlayerProfile.MAX_CUSTOM_LEVEL + ")") : ""));
            }
            _this.prestige.x = _this.challenges.x + _this.challenges.width + padding;
            _this.add(_this.prestige);
            _this.prestige.setEnabled(DinogenArena.PlayerManager.CurrentProfile.isMaxCustomLevel());
            _this.updateForNewUnlocks();
            return _this;
        }
        CustomModeButtons.prototype.updateForNewUnlocks = function () {
            var bNew = DinogenArena.PlayerManager.CurrentProfile.hasNewUnlocks();
            var str = "Edit Loadouts"; //270E 
            this.loadout.setLabelText(str + (bNew ? "\nNew Items!" : ""));
            if (bNew) {
                this.loadout.labelText.addColor(DinogenArena.GameUtil.COLOUR_NEW_STRING, str.length);
            }
        };
        CustomModeButtons.prototype.onLoadoutsClicked = function () {
            var menu = new DinogenArena.LoadoutMenu();
        };
        CustomModeButtons.prototype.onChallengesClicked = function () {
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Challenges",
                type: DinogenArena.Window.TYPE_CHALLENGES,
                descText: "Complete challenges for bonus XP."
            });
        };
        CustomModeButtons.prototype.onPrestigeClicked = function () {
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Prestige",
                type: DinogenArena.Window.TYPE_YES_NO,
                descText: "Prestiging resets your progress while unlocking new maps, game modes, and challenges.\n\nDifficulty is also increased.\n\nAre you sure you want to Prestige?",
                yesCallback: this.startPrestige,
                yesCallbackContext: this
            });
        };
        CustomModeButtons.prototype.startPrestige = function () {
            DinogenArena.PlayerManager.CurrentProfile.prestigePlayer();
            DinogenArena.GameUtil.GetMainMenuState().mainMenu.contentElement.refreshSubmenu();
            DinogenArena.PlayerManager.CurrentProfile.unlockAchievement(DinogenArena.Achievements.ACH_PRESTIGE);
        };
        Object.defineProperty(CustomModeButtons.prototype, "width", {
            get: function () {
                return this.challenges.x + this.challenges.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomModeButtons.prototype, "height", {
            get: function () {
                return this.loadout.height;
            },
            enumerable: true,
            configurable: true
        });
        CustomModeButtons.prototype.destroy = function () {
            this.loadout = null;
            this.challenges = null;
            _super.prototype.destroy.call(this);
        };
        return CustomModeButtons;
    }(Phaser.Group));
    DinogenArena.CustomModeButtons = CustomModeButtons;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var UIBase = /** @class */ (function (_super) {
        __extends(UIBase, _super);
        function UIBase() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_LEFT;
            _this.alignVertical = UIBase.ALIGN_VERTICAL_TOP;
            _this.offsetX = 0;
            _this.offsetY = 0;
            _this.tweenShowTime = 200;
            _this.tweenCloseTime = 50;
            _this.bAlign = true;
            _this.bIsShowing = false;
            _this.overlayAlpha = 0.7;
            _this.engine = _this.game;
            _this.alpha = 0;
            _this.engine.addUI(_this);
            return _this;
        }
        UIBase.prototype.destroy = function () {
            if (this.tween) {
                this.tween.stop();
            }
            this.tween = null;
            this.onCloseCallback = null;
            this.onCloseCallbackContext = null;
            this.onCloseCallbackParams = null;
            if (this.engine) {
                this.engine.removeUI(this);
                this.engine = null;
            }
            else {
                console.warn("Destroying already destroyed UIBase");
            }
            _super.prototype.destroy.call(this);
        };
        UIBase.prototype.onGetFocus = function () {
            return;
        };
        UIBase.prototype.createOverlay = function (_alpha, _colour) {
            if (_alpha === void 0) { _alpha = this.overlayAlpha; }
            if (_colour === void 0) { _colour = 0x000000; }
            var graphics = this.game.add.graphics();
            graphics.beginFill(_colour, _alpha);
            graphics.drawRect(0, 0, this.game.width, this.game.height);
            var bg = this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            bg.inputEnabled = true;
            return bg;
        };
        UIBase.prototype.enableEscapeKey = function () {
            if (!this.escKey) {
                //this.escKey = GameUtil.game.input.keyboard.addKey(Phaser.Keyboard.ESC);
                //this.escKey.onDown.add(this.onEscapeKeyPressed, this);
            }
        };
        UIBase.prototype.onEscapeKeyPressed = function () {
            this.close();
        };
        UIBase.prototype.setBlur = function (_bVal) {
            if (_bVal) {
                if (!DinogenArena.PlayerManager.CurrentProfile.settings.bEffects) {
                    this.filters = undefined;
                    return;
                }
                var blurX = this.game.add.filter("BlurX");
                var blurY = this.game.add.filter("BlurY");
                this.filters = [blurX, blurY];
            }
            else {
                this.filters = undefined;
            }
        };
        UIBase.prototype.show = function () {
            DinogenArena.GameUtil.game.updateUIBlurs();
            this.visible = true;
            this.bIsShowing = true;
            this.ignoreChildInput = false;
            if (this.tweenShowTime > 0) {
                if (this.tween) {
                    this.tween.stop();
                }
                this.alpha = 0;
                this.tween = this.game.add.tween(this).to({ alpha: 1 }, this.tweenShowTime, Phaser.Easing.Cubic.Out, true);
                this.tween.onComplete.add(this.onShow, this);
            }
            else {
                this.alpha = 1;
                this.onShow();
            }
            this.readjustToStage();
        };
        UIBase.prototype.close = function () {
            this.bIsShowing = false;
            this.ignoreChildInput = true;
            if (this.escKey) {
                this.escKey.onDown.removeAll(this);
                this.escKey = null;
            }
            if (this.tweenCloseTime > 0) {
                if (this.tween) {
                    this.tween.stop();
                }
                this.tween = DinogenArena.GameUtil.game.add.tween(this).to({ alpha: 0 }, this.tweenCloseTime, Phaser.Easing.Cubic.Out, true);
                this.tween.onComplete.add(this.onClose, this);
            }
            else {
                this.alpha = 0;
                this.onClose();
            }
        };
        UIBase.prototype.onShow = function () {
            return;
        };
        UIBase.prototype.onClose = function () {
            this.visible = false;
            DinogenArena.GameUtil.game.updateUIBlurs();
            if (this.onCloseCallback != null) {
                this.onCloseCallback.call(this.onCloseCallbackContext ? this.onCloseCallbackContext : this, this.onCloseCallbackParams);
            }
        };
        UIBase.prototype.setAlignToCenter = function () {
            this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_CENTER;
            this.alignVertical = UIBase.ALIGN_VERTICAL_MIDDLE;
        };
        UIBase.prototype.readjustToStage = function () {
            if (this.bAlign) {
                if (this.alignHorizontal == UIBase.ALIGN_HORIZONTAL_CENTER) {
                    this.x = (this.game.width * 0.5) - (this.width * 0.5);
                }
                else if (this.alignHorizontal == UIBase.ALIGN_HORIZONTAL_LEFT) {
                    this.x = 0;
                }
                else if (this.alignHorizontal == UIBase.ALIGN_HORIZONTAL_RIGHT) {
                    this.x = this.game.width - (this.width);
                }
                if (this.alignVertical == UIBase.ALIGN_VERTICAL_BOTTOM) {
                    this.y = this.game.height - (this.height);
                }
                else if (this.alignVertical == UIBase.ALIGN_VERTICAL_MIDDLE) {
                    this.y = (this.game.height * 0.5) - (this.height * 0.5);
                }
                else if (this.alignVertical == UIBase.ALIGN_VERTICAL_TOP) {
                    this.y = 0;
                }
                this.x = Math.floor(this.x + this.offsetX);
                this.y = Math.floor(this.y + this.offsetY);
            }
            /*
            var graphics: Phaser.Graphics = this.game.add.graphics(0, 0);
            graphics.beginFill(0xFF00FF, 0.1);
            graphics.drawRect(0, 0, this.width, this.height);
            this.addChild(graphics);
            */
        };
        UIBase.prototype.isShowing = function () {
            return this.bIsShowing;
        };
        UIBase.ALIGN_VERTICAL_TOP = "ALIGN_VERTICAL_TOP";
        UIBase.ALIGN_VERTICAL_MIDDLE = "ALIGN_VERTICAL_MIDDLE";
        UIBase.ALIGN_VERTICAL_BOTTOM = "ALIGN_VERTICAL_BOTTOM";
        UIBase.ALIGN_HORIZONTAL_LEFT = "ALIGN_HORIZONTAL_LEFT";
        UIBase.ALIGN_HORIZONTAL_CENTER = "ALIGN_HORIZONTAL_CENTER";
        UIBase.ALIGN_HORIZONTAL_RIGHT = "ALIGN_HORIZONTAL_RIGHT";
        return UIBase;
    }(Phaser.Group));
    DinogenArena.UIBase = UIBase;
    var Blurable = /** @class */ (function (_super) {
        __extends(Blurable, _super);
        function Blurable() {
            var _this = _super.call(this) || this;
            _this.bCanBlur = true;
            return _this;
        }
        Blurable.prototype.setCanBlur = function (_bVal) {
            this.bCanBlur = _bVal;
        };
        Blurable.prototype.canBlur = function () {
            return this.bCanBlur;
        };
        return Blurable;
    }(UIBase));
    DinogenArena.Blurable = Blurable;
    var LoginMenu = /** @class */ (function (_super) {
        __extends(LoginMenu, _super);
        function LoginMenu() {
            var _this = _super.call(this) || this;
            _this.setAlignToCenter();
            var overlay = _this.createOverlay(0);
            _this.add(overlay);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.8);
            graphics.drawRoundedRect(0, 0, 300, 240, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            var socialLayer = _this.game.add.group();
            _this.add(socialLayer);
            var socialItems = DinogenArena.GameUtil.CreateSocialItems();
            socialLayer.add(socialItems);
            var bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.add(bg);
            bg.x = (_this.width * 0.5) - (bg.width * 0.5);
            bg.y = (_this.height * 0.5) - (bg.height * 0.5);
            var titleText = _this.game.add.text(0, 0, "Welcome to Dinogen Arena", { font: "18px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_THEME_STRING });
            titleText.autoRound = true;
            titleText.anchor.set(0.5, 0);
            titleText.position.set(bg.x + (bg.width * 0.5), bg.y + 12);
            _this.addChild(titleText);
            var loginText = _this.game.add.text(0, 0, "Select a profile slot to begin", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            loginText.alpha = 0.5;
            loginText.anchor.set(0.5, 0);
            loginText.position.set(titleText.x, titleText.y + titleText.height);
            _this.addChild(loginText);
            var profilesContainer = _this.game.add.group();
            var numProfiles = 1;
            if (numProfiles == 1) {
                var profileIndex = 0;
                var singleButton = new DinogenArena.ProfileButton(_this.onProfileClicked, _this, [profileIndex]);
                var bExists = DinogenArena.PlayerManager.profiles.length > 0;
                var profile = DinogenArena.PlayerManager.profiles[profileIndex];
                if (bExists) {
                    singleButton.setLabelText(profile.name);
                    singleButton.setLevel(profile.getCustomLevel());
                }
                else {
                    singleButton.setLabelText("Create New Profile");
                    singleButton.setLevel(0);
                }
                if (!bExists) {
                    //singleButton.setBaseAlpha(0.2);
                }
                profilesContainer.add(singleButton);
            }
            else {
                for (var i = 0; i < numProfiles; i++) {
                    //\uFF0B
                    var profileButton = new DinogenArena.MenuButton(_this.onProfileClicked, _this, [i], true, 200);
                    var bExists = DinogenArena.PlayerManager.profiles.length > i;
                    var profile = DinogenArena.PlayerManager.profiles[i];
                    profileButton.setLabelText((bExists ? (profile.name + " (Level " + profile.getCustomLevel() + ")") : "Empty"));
                    profileButton.y = (profileButton.height + 4) * i;
                    if (!bExists) {
                        profileButton.setBaseAlpha(0.2);
                    }
                    profilesContainer.add(profileButton);
                }
            }
            _this.add(profilesContainer);
            profilesContainer.x = (bg.x + (bg.width * 0.5)) - (profilesContainer.width * 0.5);
            profilesContainer.y = loginText.y + loginText.height + 20;
            DinogenArena.PlayerManager.CurrentProfile = null;
            DinogenArena.SoundManager.UpdateMusicVolume();
            return _this;
        }
        LoginMenu.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        LoginMenu.prototype.onProfileClicked = function (_index) {
            var bExists = DinogenArena.PlayerManager.profiles[_index] != null;
            if (!bExists) {
                var name = DinogenArena.APIUtil.GetUserName(); //prompt("Enter a name for this profile.", "Player");
                var profile = DinogenArena.PlayerManager.CreateProfile();
                profile.name = name;
            }
            else {
                DinogenArena.PlayerManager.SelectProfile(_index);
            }
            DinogenArena.PlayerManager.CurrentProfile.load();
            DinogenArena.SoundManager.PlayUISound("ui_armory");
            this.close();
        };
        LoginMenu.prototype.onClose = function () {
            var menuState = this.game.state.getCurrentState();
            if (menuState) {
                menuState.createMainMenu();
            }
            this.destroy();
        };
        return LoginMenu;
    }(Blurable));
    DinogenArena.LoginMenu = LoginMenu;
    var MainMenu = /** @class */ (function (_super) {
        __extends(MainMenu, _super);
        function MainMenu() {
            var _this = _super.call(this) || this;
            _this.bg = _this.createOverlay(0.8);
            _this.addChild(_this.bg);
            var padding = 50;
            _this.buttonsElement = new MainMenu_ButtonsElement();
            _this.buttonsElement.x = padding;
            _this.buttonsElement.y = Math.round((_this.game.height * 0.5) - (_this.buttonsElement.height * 0.5));
            _this.add(_this.buttonsElement);
            _this.contentElement = new MainMenu_ContentElement();
            _this.contentElement.x = Math.round((_this.game.width - _this.contentElement.width) - padding);
            _this.contentElement.y = Math.round((_this.game.height * 0.5) - (_this.contentElement.height * 0.5));
            _this.add(_this.contentElement);
            var socialLayer = _this.game.add.group();
            _this.add(socialLayer);
            var socialItems = DinogenArena.GameUtil.CreateSocialItems();
            socialLayer.add(socialItems);
            return _this;
        }
        MainMenu.prototype.destroy = function () {
            this.bg = null;
            if (this.buttonsElement) {
                this.buttonsElement.destroy();
                this.buttonsElement = null;
            }
            if (this.contentElement) {
                this.contentElement.destroy();
                this.contentElement = null;
            }
            if (this.socialLayer) {
                this.socialLayer = null;
            }
            _super.prototype.destroy.call(this);
        };
        MainMenu.prototype.createSocialItems = function () {
            this.clearSocialItems();
            var baseAlpha = 0.35;
            var socialContainer = this.game.add.group();
            var desiredWidth = 80;
            var buttonPadding = 4;
            var wilkinButton = new DinogenArena.MenuButton(this.onWilkinButtonClicked, this, null, true, desiredWidth);
            wilkinButton.setBaseAlpha(baseAlpha);
            wilkinButton.setLabelText("XWILKINX");
            wilkinButton.labelText.setStyle({ font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" }, true);
            wilkinButton.labelText.setTextBounds(0, 0, desiredWidth, 32);
            wilkinButton.x = buttonPadding;
            wilkinButton.y = buttonPadding;
            socialContainer.add(wilkinButton);
            var guideButton = new DinogenArena.MenuButton(this.onGuideButtonClicked, this, null, true, desiredWidth);
            guideButton.setBaseAlpha(baseAlpha);
            guideButton.setLabelText("Game Guide");
            guideButton.labelText.setStyle({ font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" }, true);
            guideButton.labelText.setTextBounds(0, 0, desiredWidth, 32);
            guideButton.x = wilkinButton.x + wilkinButton.width + buttonPadding;
            guideButton.y = buttonPadding;
            socialContainer.add(guideButton);
            var dinogenButton = new DinogenArena.MenuButton(this.onDinogenButtonClicked, this, null, true, desiredWidth);
            dinogenButton.setBaseAlpha(baseAlpha);
            dinogenButton.setLabelText("Play Dinogen");
            dinogenButton.labelText.setStyle({ font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" }, true);
            dinogenButton.labelText.setTextBounds(0, 0, desiredWidth, 32);
            dinogenButton.x = guideButton.x + guideButton.width + buttonPadding;
            dinogenButton.y = buttonPadding;
            socialContainer.add(dinogenButton);
            /*
            var versionButton = new MenuButton(this.onVersionButtonClicked, this, null, true);
            versionButton.setBaseAlpha(0.2);
            versionButton.setLabelText("v1.0" + (GameUtil.IsDebugging() ? " debug" : ""));
            versionButton.y = this.height - versionButton.height;
            socialContainer.add(versionButton);
            */
            var socialIcons = this.game.add.group();
            var iconPadding = 4;
            var globe = new DinogenArena.ImageButton(DinogenArena.GameUtil.OpenWilkinHomepage, DinogenArena.GameUtil, null, "atlas_ui", "social_url");
            globe.setBaseAlpha(baseAlpha);
            socialIcons.add(globe);
            var facebook = new DinogenArena.ImageButton(DinogenArena.GameUtil.OpenWilkinFacebook, DinogenArena.GameUtil, null, "atlas_ui", "social_facebook");
            facebook.setBaseAlpha(baseAlpha);
            facebook.x = globe.x + globe.width + iconPadding;
            socialIcons.add(facebook);
            var youtube = new DinogenArena.ImageButton(DinogenArena.GameUtil.OpenWilkinYouTube, DinogenArena.GameUtil, null, "atlas_ui", "social_youtube");
            youtube.setBaseAlpha(baseAlpha);
            youtube.x = facebook.x + facebook.width + iconPadding;
            socialIcons.add(youtube);
            socialIcons.x = this.width - socialIcons.width;
            socialContainer.add(socialIcons);
            return socialContainer;
        };
        MainMenu.prototype.clearSocialItems = function () {
            this.socialLayer.removeAll(true);
        };
        MainMenu.prototype.onWilkinButtonClicked = function () {
            DinogenArena.GameUtil.OpenWilkinHomepage();
        };
        MainMenu.prototype.onGuideButtonClicked = function () {
            DinogenArena.GameUtil.OpenDinogenArenaGuide();
        };
        MainMenu.prototype.onDinogenButtonClicked = function () {
            DinogenArena.GameUtil.OpenDinogenGame();
        };
        MainMenu.prototype.onVersionButtonClicked = function () {
            DinogenArena.GameUtil.OpenLatestVersion();
        };
        MainMenu.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            this.destroy();
        };
        MainMenu.MENU_TUTORIAL = "story";
        MainMenu.MENU_RANKED = "custom";
        MainMenu.MENU_SURVIVAL = "survival";
        MainMenu.MENU_PROFILE = "profile";
        MainMenu.MENU_SETTINGS = "settings";
        MainMenu.MENU_BACK = "back";
        return MainMenu;
    }(Blurable));
    DinogenArena.MainMenu = MainMenu;
    var MainMenu_ButtonsElement = /** @class */ (function (_super) {
        __extends(MainMenu_ButtonsElement, _super);
        function MainMenu_ButtonsElement() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.titleText = _this.game.add.text(0, 0, "Dinogen Arena", { font: "24px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_THEME_STRING });
            _this.addChild(_this.titleText);
            var arr = [
                { label: "Tutorial", data: { id: MainMenu.MENU_TUTORIAL } },
                { label: "Ranked", data: { id: MainMenu.MENU_RANKED } },
                { label: "Survival", data: { id: MainMenu.MENU_SURVIVAL } },
                null,
                { label: "Profile", data: { id: MainMenu.MENU_PROFILE } },
                { label: "Settings", data: { id: MainMenu.MENU_SETTINGS } },
                null,
                { label: "Back", data: { id: MainMenu.MENU_BACK } },
            ];
            _this.createButtons(arr);
            return _this;
            //this.position.set(this.game.world.left + this.width + 32, this.game.world.centerY - 100);
        }
        MainMenu_ButtonsElement.prototype.destroy = function () {
            this.buttons = null;
            this.titleText = null;
            _super.prototype.destroy.call(this);
        };
        MainMenu_ButtonsElement.prototype.createButtons = function (_arr) {
            this.buttons = [];
            var container = this.game.add.group();
            var containerWidth = 120;
            for (var i = 0; i < _arr.length; i++) {
                var data = _arr[i];
                if (data) {
                    var button = new DinogenArena.MenuButton(this.onButtonClicked, this, [data["data"]["id"]]);
                    button.data = data["data"];
                    button.setLabelText(data["label"]);
                    button.x = (containerWidth * 0.5) - (button.width * 0.5);
                    button.y = container.height;
                    container.add(button);
                    this.buttons.push(button);
                }
                else {
                    var line = this.game.add.graphics();
                    line.beginFill(0xFFFFFF, 0.1);
                    line.drawRect(0, 0, containerWidth, 1);
                    line.y = container.height;
                    container.add(line);
                }
            }
            container.x = (this.titleText.x + (this.titleText.width * 0.5)) - (container.width * 0.5);
            container.y = this.titleText.y + this.titleText.height + 12;
            this.add(container);
        };
        MainMenu_ButtonsElement.prototype.onButtonClicked = function (_id) {
            var menuState = this.game.state.getCurrentState();
            if (_id == MainMenu.MENU_BACK) {
                this.goBack();
            }
            else {
                menuState.mainMenu.contentElement.loadSubmenu(_id);
            }
        };
        MainMenu_ButtonsElement.prototype.goBack = function () {
            var menuState = this.game.state.getCurrentState();
            menuState.mainMenu.onCloseCallback = menuState.createLoginMenu;
            menuState.mainMenu.close();
        };
        MainMenu_ButtonsElement.prototype.setButtonSelected = function (_id) {
            for (var i = 0; i < this.buttons.length; i++) {
                var cur = this.buttons[i];
                if (cur.data["id"] == _id) {
                    cur.setSelected(true);
                }
                else {
                    cur.setSelected(false);
                }
            }
        };
        return MainMenu_ButtonsElement;
    }(Phaser.Group));
    DinogenArena.MainMenu_ButtonsElement = MainMenu_ButtonsElement;
    var MainMenu_ContentElement = /** @class */ (function (_super) {
        __extends(MainMenu_ContentElement, _super);
        function MainMenu_ContentElement() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.CONTENT_PADDING = 4;
            _this.contentWidth = 600;
            _this.contentHeight = 584;
            _this.linePadding = 6;
            _this.lineMult = 0.9;
            _this.lastMapId = null;
            _this.lastGameModeId = null;
            _this.mainMenuState = _this.game.state.getCurrentState();
            _this.titleText = _this.game.add.text(0, 0, "Title", { font: "20px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_THEME_STRING });
            _this.titleText.position.set(_this.contentWidth * 0.5, 0);
            _this.titleText.anchor.set(0.5, 0);
            _this.addChild(_this.titleText);
            _this.descText = _this.game.add.text(0, 0, "Desc", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.descText.alpha = 0.8;
            _this.descText.position.set(_this.titleText.x, _this.titleText.height - 6);
            _this.descText.anchor.set(0.5, 0);
            _this.addChild(_this.descText);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0xFFFFFF, 0.2); //0xFFFFFF, 0.2
            graphics.drawRoundedRect(0, 0, _this.contentWidth + (_this.CONTENT_PADDING * 2), _this.contentHeight + (_this.CONTENT_PADDING * 2), DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            //this.bg.width = this.contentWidth + (this.CONTENT_PADDING * 2);
            //this.bg.height = this.contentHeight + (this.CONTENT_PADDING * 2);
            _this.bg.position.set(0, _this.descText.y + _this.descText.height);
            _this.addChild(_this.bg);
            return _this;
            //this.position.set((this.game.world.centerX - (this.bg.width * 0.5)) + 100, this.game.world.centerY - (this.bg.height * 0.5));
        }
        MainMenu_ContentElement.prototype.destroy = function () {
            this.titleText = null;
            this.descText = null;
            this.bg = null;
            this.contentGroup.destroy();
            this.contentGroup = null;
            this.mainMenuState = null;
            this.mapPreview = null;
            _super.prototype.destroy.call(this);
        };
        MainMenu_ContentElement.prototype.updateNewUnlocks = function () {
            if (this.currentSubmenu == MainMenu.MENU_RANKED) {
                var item = this.contentGroup.getByName("customModeButtons");
                item.updateForNewUnlocks();
            }
        };
        MainMenu_ContentElement.prototype.refreshSubmenu = function () {
            var prev = this.currentSubmenu;
            this.currentSubmenu = null;
            this.loadSubmenu(prev);
        };
        MainMenu_ContentElement.prototype.loadRankedGameSettings = function (_data) {
            if (this.currentSubmenu == MainMenu.MENU_RANKED) {
                console.log("loadRankedGameSettings");
                DinogenArena.PlayerManager.CurrentProfile.clearLastRankedSettings();
                console.log(_data);
                this.setModifierFromData("gameMode", _data);
                this.setModifierFromData("timeLimit", _data);
                this.setModifierFromData("scoreLimit", _data); /* This can be undefined for some game modes */
                this.setModifierFromData("players", _data);
                this.setModifierFromData("map", _data);
            }
        };
        MainMenu_ContentElement.prototype.setModifierFromData = function (_id, _data) {
            if (!_data || isNaN(_data[_id])) {
                return;
            }
            var modifier = this.getModifier(_id);
            if (modifier) {
                if (modifier.module instanceof DinogenArena.SettingsModifierModule_Button) {
                    var but = modifier.module;
                    but.setFromIndex(_data[_id]);
                }
                else if (modifier.module instanceof DinogenArena.SettingsModifierModule_Slider) {
                    var slider = modifier.module;
                    slider.setValue(_data[_id]);
                    slider.updateThumb();
                }
                modifier.dispatchUpdate();
            }
        };
        MainMenu_ContentElement.prototype.loadSubmenu = function (_id) {
            if (this.currentSubmenu == _id) {
                return;
            }
            this.currentSubmenu = _id;
            DinogenArena.PlayerManager.CurrentProfile.setLastMenuId(_id);
            this.mainMenuState.mainMenu.buttonsElement.setButtonSelected(this.currentSubmenu);
            this.createContent();
            var data;
            var arr;
            var modifier;
            var button;
            var linePadding = 8;
            if (this.currentSubmenu == MainMenu.MENU_TUTORIAL) {
                this.titleText.setText("Tutorial");
                this.descText.setText("Learn how to play Dinogen Arena.");
                var profile = DinogenArena.PlayerManager.CurrentProfile;
                var humanIcon = this.game.add.image(0, 0, "atlas_ui", "race_human");
                humanIcon.x = (this.contentWidth * 0.5) - (humanIcon.width * 0.5);
                this.addContentChild(humanIcon);
                var tutButton = new DinogenArena.CustomModeButton(this.onTutorialClicked, this);
                tutButton.setIcon("icon_button_tutorial");
                tutButton.setLabelText("Start Tutorial"); //\u2691
                tutButton.x = (this.contentWidth * 0.5) - (tutButton.width * 0.5);
                this.addContentChild(tutButton);
                tutButton.y += 32;
                //(bComplete ? "\u2611 " : "\u2610 ")
                var bTutorialComplete = profile.hasCompletedTutorial();
                var infoText = this.game.add.text(0, 0, (bTutorialComplete ? "Completed" : "Not Completed"), { font: "14px " + DinogenArena.GameUtil.FONT, fill: bTutorialComplete ? DinogenArena.GameUtil.COLOUR_NEW_STRING : "#FFFFFF", boundsAlignH: "center" });
                infoText.alpha = bTutorialComplete ? 1 : 0.5;
                infoText.setTextBounds(0, 0, this.contentWidth, 32);
                this.addContentChild(infoText);
                var line = this.game.add.graphics();
                line.beginFill(0xFFFFFF, 0.2);
                line.drawRect(0, 0, this.contentWidth * this.lineMult, 1);
                line.x = (this.contentWidth * 0.5) - (line.width * 0.5);
                this.addContentChild(line);
                var infoText = this.game.add.text(0, 0, "\nThe tutorial will run you through the basics of gameplay.\nStrongly recommended for new players.", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignV: "middle", boundsAlignH: "center", align: "center" });
                infoText.alpha = 0.5;
                infoText.setTextBounds(0, 0, this.contentWidth, 32);
                this.addContentChild(infoText);
                this.contentGroup.y = Math.round((this.contentHeight * 0.5) - (this.contentGroup.height * 0.5));
                if (!DinogenArena.PlayerManager.CurrentProfile.tutorials["bTutorial"]) {
                    DinogenArena.PlayerManager.CurrentProfile.tutorials["bTutorial"] = true;
                    DinogenArena.GameUtil.game.createWindow({
                        titleText: "Tutorial Recommended",
                        type: Window.TYPE_YES_NO,
                        descText: "Welcome to Dinogen Arena!\n\nIt appears this is your first time playing. Playing the tutorial is strongly recommended.\n\nWould you like to start the tutorial now?",
                        yesCallback: this.onTutorialClicked,
                        yesCallbackContext: this
                    });
                }
            }
            else if (this.currentSubmenu == MainMenu.MENU_SURVIVAL) {
                this.titleText.setText("Survival");
                this.descText.setText("Survive against endless waves of dinosaurs and compete in the leaderboards.");
                var survivalIcon = this.game.add.image(0, 0, "atlas_ui", "icon_" + DinogenArena.GameModeManager.GAME_MODE_SURVIVAL);
                survivalIcon.anchor.set(0.5, 0);
                survivalIcon.x = this.contentWidth * 0.5;
                this.addContentChild(survivalIcon);
                var panel = new DinogenArena.SurvivalPanel();
                this.addContentChild(panel);
                var style = { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", wordWrap: true, wordWrapWidth: this.contentWidth, align: "center", boundsAlignH: "center", boundsAlignV: "top" };
                var survivalInfo = new DinogenArena.SurvivalInfo();
                survivalInfo.x = (this.contentWidth * 0.5) - (survivalInfo.width * 0.5);
                this.addContentChild(survivalInfo);
                button = new DinogenArena.MenuButton(this.onSurvivalClicked, this, null, true, 200);
                button.setLabelText("Start Game"); //\u25BA 
                //button.setColour(0x111111);
                button.x = (this.contentWidth * 0.5) - (button.width * 0.5);
                button.y = this.contentHeight - button.height;
                this.contentGroup.addChild(button);
            }
            else if (this.currentSubmenu == MainMenu.MENU_RANKED) {
                this.titleText.setText("Ranked");
                this.descText.setText("Progress through the ranks by playing games and earning XP.");
                var xpBar = new DinogenArena.XPBar(this.contentWidth, true);
                this.addContentChild(xpBar);
                var customItems = new DinogenArena.CustomModeButtons();
                customItems.name = "customModeButtons";
                this.addContentChild(customItems);
                var gameModes = DinogenArena.GameModeManager.GetCustomGameModes();
                arr = [];
                for (var i = 0; i < gameModes.length; i++) {
                    var mode = gameModes[i];
                    var modeData = { id: mode["id"], label: mode["name"] };
                    if (mode["bPrestige"] == true) {
                        if (!DinogenArena.PlayerManager.CurrentProfile.isCustomPrestiged()) {
                            modeData["colour"] = 0x999999;
                            modeData["bLocked"] = true;
                        }
                    }
                    arr.push(modeData);
                }
                data = { id: "gameMode", items: arr, index: 0 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Game Mode", this.contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(modifier);
                data = { id: "gameModeDesc", bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "gameModeDesc", this.contentWidth, null, data);
                this.addContentChild(modifier);
                if (!DinogenArena.PlayerManager.CurrentProfile.tutorials["bCustomMode"]) {
                    DinogenArena.PlayerManager.CurrentProfile.tutorials["bCustomMode"] = true;
                    DinogenArena.GameUtil.game.createWindow({
                        titleText: "Ranked Mode",
                        type: Window.TYPE_MESSAGE,
                        descText: "Ranked mode allows you to progress through a ranking system.\n\nSelect the game mode you want to play. You can modify game settings such as the score limit or number of players.\n\nEarn XP in game by killing enemies, finishing objectives, and completing challenges to unlock new weapons, perks, and more!"
                    });
                }
                if (DinogenArena.PlayerManager.CurrentProfile.hasNewUnlocks()) {
                    DinogenArena.GameUtil.game.createWindow({
                        titleText: "New Items Available",
                        type: Window.TYPE_UNLOCKS,
                        descText: "You've unlocked new items!",
                        sound: "ui_new_unlocks",
                        yesCallback: this.openLoadoutMenu,
                        yesCallbackContext: this
                    });
                }
            }
            else if (this.currentSubmenu == MainMenu.MENU_PROFILE) {
                var profile = DinogenArena.PlayerManager.CurrentProfile;
                this.titleText.setText("Profile");
                this.descText.setText("Manage your current profile.");
                var nameText = this.game.add.text(0, 0, profile.name, { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
                nameText.setTextBounds(0, 0, this.contentWidth, 32);
                this.addContentChild(nameText);
                var torsoCustomizer = new DinogenArena.TorsoCustomizer(this.contentWidth * 0.4);
                torsoCustomizer.x = (this.contentWidth * 0.5) - (torsoCustomizer.width * 0.5);
                this.addContentChild(torsoCustomizer);
                data = { id: null, bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "Achievements", this.contentWidth, null, data);
                this.addContentChild(modifier);
                var ac = new DinogenArena.AchievementsContainer(this.contentWidth);
                this.addContentChild(ac);
                data = { id: null, bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "Overview", this.contentWidth, null, data);
                this.addContentChild(modifier);
                data = { id: "totalKills", label: DinogenArena.WilkinUtil.FormatNum(profile.getTotalKills()) };
                modifier = new DinogenArena.SettingsModifier(this.game, "Total Kills", this.contentWidth, DinogenArena.SettingsModifier.MODULE_LABEL, data);
                this.addContentChild(modifier);
                data = { id: "meleeKills", label: DinogenArena.WilkinUtil.FormatNum(profile.getTotalMeleeKills()) };
                modifier = new DinogenArena.SettingsModifier(this.game, "Melee Kills", this.contentWidth, DinogenArena.SettingsModifier.MODULE_LABEL, data);
                this.addContentChild(modifier);
                data = { id: "deaths", label: DinogenArena.WilkinUtil.FormatNum(profile.getTotalDeaths()) };
                modifier = new DinogenArena.SettingsModifier(this.game, "Deaths", this.contentWidth, DinogenArena.SettingsModifier.MODULE_LABEL, data);
                this.addContentChild(modifier);
                data = { id: "ratio", label: profile.getKDR().toPrecision(3) };
                modifier = new DinogenArena.SettingsModifier(this.game, "Kill/Death Ratio", this.contentWidth, DinogenArena.SettingsModifier.MODULE_LABEL, data);
                this.addContentChild(modifier);
                button = new DinogenArena.MenuButton(this.onDeleteProfileClicked, this, null, true, 200);
                button.setLabelText("Delete Profile"); //2717
                button.x = (this.contentWidth * 0.5) - (button.width * 0.5);
                button.y = this.contentHeight - button.height;
                this.contentGroup.addChild(button);
            }
            else if (this.currentSubmenu == MainMenu.MENU_SETTINGS) {
                this.titleText.setText("Settings");
                this.descText.setText("Configure game settings.");
                var settings = DinogenArena.PlayerManager.CurrentProfile.settings;
                data = { id: null, bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "Controls", this.contentWidth, null, data);
                this.addContentChild(modifier);
                var reassignKeysButton = new DinogenArena.MenuButton(this.onAssignKeysClicked, this, null, true);
                reassignKeysButton.setLabelText("Assign Keys");
                reassignKeysButton.x = (this.contentWidth * 0.5) - (reassignKeysButton.width * 0.5);
                this.addContentChild(reassignKeysButton);
                arr = [];
                arr.push({ id: 0, label: "Absolute" });
                arr.push({ id: 1, label: "Relative" });
                data = { id: "bAbsoluteMovement", items: arr, index: settings.bAbsoluteMovement ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Movement Style", this.contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(modifier);
                var movementContainer = this.game.add.group();
                movementContainer.name = "movementContainer";
                var tweenTime = 3000;
                var absoluteMovement = this.game.add.image(0, 0, "atlas_ui", "icon_movement_absolute");
                absoluteMovement.name = "movement_absolute";
                absoluteMovement.anchor.set(0.5, 0.5);
                absoluteMovement.x = absoluteMovement.width * 0.5;
                absoluteMovement.y = absoluteMovement.height * 0.5;
                var char1 = this.game.add.image(0, 0, "atlas_char", DinogenArena.InventoryManager.ITEM_FIREARM_MP5);
                char1.anchor.set(0.5, 0.5);
                absoluteMovement.addChild(char1);
                movementContainer.add(absoluteMovement);
                movementContainer.x = (this.contentWidth * 0.5) - (movementContainer.width * 0.5);
                var absoluteTween = this.game.add.tween(char1).to({ rotation: -180 * DinogenArena.WilkinUtil.TO_RADIANS }, tweenTime, Phaser.Easing.Back.InOut, true, 0, Number.MAX_VALUE, true);
                var relativeMovement = this.game.add.image(0, 0, "atlas_ui", "icon_movement_relative");
                relativeMovement.name = "movement_relative";
                relativeMovement.anchor.set(0.5, 0.5);
                relativeMovement.x = absoluteMovement.x + (relativeMovement.width * 2);
                relativeMovement.y = relativeMovement.height * 0.5;
                var char2 = this.game.add.image(0, 0, "atlas_char", DinogenArena.InventoryManager.ITEM_FIREARM_MP5);
                char2.anchor.set(0.5, 0.5);
                relativeMovement.addChild(char2);
                movementContainer.add(relativeMovement);
                movementContainer.x = (this.contentWidth * 0.5) - (movementContainer.width * 0.5);
                var relativeTween = this.game.add.tween(relativeMovement).to({ rotation: -180 * DinogenArena.WilkinUtil.TO_RADIANS }, tweenTime, Phaser.Easing.Back.InOut, true, 0, Number.MAX_VALUE, true);
                this.addContentChild(movementContainer);
                data = { id: null, bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "Visual", this.contentWidth, null, data);
                this.addContentChild(modifier);
                arr = [];
                arr.push({ id: 0, label: "On" });
                arr.push({ id: 1, label: "Off", colour: 0x999999 });
                data = { id: "bEffects", items: arr, index: settings.bEffects ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Effects", this.contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(modifier);
                arr = [];
                arr.push({ id: 0, label: "On" });
                arr.push({ id: 1, label: "Off", colour: 0x999999 });
                data = { id: "bDecals", items: arr, index: settings.bDecals ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Decals", this.contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(modifier);
                arr = [];
                arr.push({ id: 0, label: "On" });
                arr.push({ id: 1, label: "Off", colour: 0x999999 });
                data = { id: "bGibs", items: arr, index: settings.bGibs ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Gibs", this.contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(modifier);
                arr = [];
                arr.push({ id: 0, label: "On" });
                arr.push({ id: 1, label: "Off", colour: 0x999999 });
                data = { id: "bDeadBodies", items: arr, index: settings.bDeadBodies ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Show Dead Bodies", this.contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(modifier);
                data = { id: null, bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "Audio", this.contentWidth, null, data);
                this.addContentChild(modifier);
                data = { id: "gameVolume", value: settings.gameVolume };
                modifier = new DinogenArena.SettingsModifier(this.game, "Game Volume", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(modifier);
                data = { id: "musicVolume", value: settings.musicVolume };
                modifier = new DinogenArena.SettingsModifier(this.game, "Music Volume", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(modifier);
                if (DinogenArena.APIUtil.CurrentAPI) {
                    data = { id: null, bHideBackground: true };
                    modifier = new DinogenArena.SettingsModifier(this.game, DinogenArena.APIUtil.GetCurrentAPIName(), this.contentWidth, null, data);
                    this.addContentChild(modifier);
                    var bLoggedIn = DinogenArena.APIUtil.IsLoggedIn();
                    var apiContainer = this.game.add.group();
                    if (bLoggedIn && DinogenArena.APIUtil.CanLogOut()) {
                        var apiButton = new DinogenArena.MenuButton(this.onLogoutClicked, this, null, true);
                        apiButton.setLabelText("Logout");
                        apiContainer.add(apiButton);
                    }
                    else if (!bLoggedIn && DinogenArena.APIUtil.CanLogIn()) {
                        apiButton = new DinogenArena.MenuButton(this.onSignInClicked, this, null, true);
                        apiButton.setLabelText("Sign In");
                        apiContainer.add(apiButton);
                    }
                    var infoText = this.game.add.text(0, apiButton ? (apiButton.y + (apiButton.height * 0.5) + 2) : 0, (bLoggedIn ? "Connected" : "Not Connected"), { font: "14px " + DinogenArena.GameUtil.FONT, fill: bLoggedIn ? DinogenArena.GameUtil.COLOUR_NEW_STRING : "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
                    infoText.alpha = bLoggedIn ? 1 : 0.2;
                    apiContainer.add(infoText);
                    if (apiButton) {
                        infoText.anchor.set(0, 0.5);
                        apiButton.x = infoText.x + infoText.width + 8;
                    }
                    apiContainer.x = (this.contentWidth * 0.5) - (apiContainer.width * 0.5);
                    this.addContentChild(apiContainer);
                }
                button = new DinogenArena.MenuButton(this.onResetSettingsClicked, this, null, true, 200);
                button.setLabelText("Reset Settings"); //u21BB
                //button.setColour(0x111111);
                button.x = (this.contentWidth * 0.5) - (button.width * 0.5);
                button.y = this.contentHeight - button.height;
                this.contentGroup.addChild(button);
            }
            this.updateContent();
        };
        MainMenu_ContentElement.prototype.onLogoutClicked = function () {
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Logout",
                type: Window.TYPE_YES_NO,
                descText: "Are you sure you want to disconnect your " + DinogenArena.APIUtil.GetCurrentAPIName() + " account from Dinogen Arena? ",
                icon: DinogenArena.APIUtil.GetCurrentAPIIconId(),
                bHideCloseButton: true,
                yesCallback: DinogenArena.APIUtil.Logout,
                yesCallbackContext: DinogenArena.APIUtil
            });
            this.refreshSubmenu();
        };
        MainMenu_ContentElement.prototype.onSignInClicked = function () {
            DinogenArena.APIUtil.ValidateSession(true);
        };
        MainMenu_ContentElement.prototype.onAssignKeysClicked = function () {
            var menu = new AssignKeyMenu();
        };
        MainMenu_ContentElement.prototype.onDeleteProfileClicked = function () {
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Delete Profile",
                type: Window.TYPE_YES_NO,
                descText: "Are you sure you want to delete this profile? This cannot be undone.",
                yesCallback: this.deleteProfile,
                yesCallbackContext: this
            });
        };
        MainMenu_ContentElement.prototype.deleteProfile = function () {
            DinogenArena.PlayerManager.DeleteProfile(DinogenArena.PlayerManager.CurrentProfile);
            //this.refreshSubmenu();
            var menuState = this.game.state.getCurrentState();
            menuState.mainMenu.onCloseCallback = menuState.createLoginMenu;
            menuState.mainMenu.close();
            DinogenArena.Engine.SaveProfileData();
        };
        MainMenu_ContentElement.prototype.onResetSettingsClicked = function () {
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Reset Settings",
                type: Window.TYPE_YES_NO,
                descText: "Are you sure you want to reset your settings?",
                yesCallback: this.resetSettings,
                yesCallbackContext: this
            });
        };
        MainMenu_ContentElement.prototype.resetSettings = function () {
            DinogenArena.PlayerManager.CurrentProfile.settings.resetToDefaults();
            DinogenArena.Engine.SaveProfileData();
            this.refreshSubmenu();
        };
        MainMenu_ContentElement.prototype.updateContent = function () {
            for (var i = 0; i < this.contentGroup.length; i++) {
                var child = this.contentGroup.getChildAt(i);
                if (child instanceof DinogenArena.SettingsModifier) {
                    var modifier = child;
                    modifier.dispatchUpdate();
                }
            }
        };
        MainMenu_ContentElement.prototype.onModifierChanged = function (_modifier) {
            var modifier = _modifier;
            if (modifier) {
                var data = modifier.data;
                if (data) {
                    var cur = modifier.module.getSelectedData();
                    if (data["id"] == "gameMode") {
                        this.updateForGameMode(DinogenArena.GameModeManager.GetGameMode(cur));
                    }
                    else if (data["id"] == "bAbsoluteMovement") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bAbsoluteMovement = !cur;
                        var bAbsoluteMovement = DinogenArena.PlayerManager.CurrentProfile.settings.bAbsoluteMovement;
                        var movementContainer = this.contentGroup.getByName("movementContainer");
                        var absoluteMovement = movementContainer.getByName("movement_absolute");
                        var relativeMovement = movementContainer.getByName("movement_relative");
                        if (absoluteMovement && relativeMovement) {
                            absoluteMovement.alpha = bAbsoluteMovement ? 1 : 0.2;
                            relativeMovement.alpha = !bAbsoluteMovement ? 1 : 0.2;
                        }
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "bEffects") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bEffects = cur == 0;
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "bGibs") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bGibs = cur == 0;
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "bDecals") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bDecals = cur == 0;
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "bDeadBodies") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bDeadBodies = cur == 0;
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "gameVolume") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.setGameVolume(cur);
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "musicVolume") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.setMusicVolume(cur);
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "map") {
                        this.updateMapPreview(cur);
                    }
                }
            }
        };
        MainMenu_ContentElement.prototype.updateForGameMode = function (_data) {
            if (!_data) {
                return;
            }
            this.lastGameModeId = _data["id"];
            var data;
            var arr;
            var modifier;
            var temp = this.getModifier("gameModeDesc");
            temp.setLabel(_data["desc"]);
            this.removeContentChildrenAfter("gameModeDesc");
            data = { id: "timeLimit", min: 1, max: 10, value: 5 };
            modifier = new DinogenArena.SettingsModifier(this.game, "Time Limit (Minutes)", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
            this.addContentChild(modifier);
            var maxPlayersPerTeam = 8;
            var defaultPlayers = Math.round(maxPlayersPerTeam * 0.5);
            if (_data["bDeathmatch"] == true) {
                var maxKills = _data["id"] == DinogenArena.GameModeManager.GAME_MODE_DEATHMATCH ? 50 : 100;
                data = { id: "scoreLimit", min: 10, max: maxKills, value: maxKills * 0.5 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Score Limit (Kills)", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
                if (_data["id"] == DinogenArena.GameModeManager.GAME_MODE_DEATHMATCH) {
                    data = { id: "players", min: 2, max: 10, value: 5 };
                    modifier = new DinogenArena.SettingsModifier(this.game, "Players", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                    this.addContentChild(modifier);
                }
                else {
                    data = { id: "players", min: 1, max: maxPlayersPerTeam, value: defaultPlayers };
                    modifier = new DinogenArena.SettingsModifier(this.game, "Players Per Team", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                    this.addContentChild(modifier);
                }
            }
            else if (_data["id"] == DinogenArena.GameModeManager.GAME_MODE_CAPTURE_THE_FLAG) {
                data = { id: "scoreLimit", min: 1, max: 6, value: 3 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Score Limit (Captures)", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
                data = { id: "players", min: 1, max: maxPlayersPerTeam, value: defaultPlayers };
                modifier = new DinogenArena.SettingsModifier(this.game, "Players Per Team", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
            }
            else if (_data["id"] == DinogenArena.GameModeManager.GAME_MODE_EVOLUTION) {
                data = { id: "players", min: 1, max: maxPlayersPerTeam, value: defaultPlayers };
                modifier = new DinogenArena.SettingsModifier(this.game, "Human Players", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
            }
            else if (_data["id"] == DinogenArena.GameModeManager.GAME_MODE_DINO_HUNT) {
                data = { id: "scoreLimit", min: 5, max: 50, value: 25 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Hunt Limit (Kills)", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
                data = { id: "players", min: 1, max: maxPlayersPerTeam, value: defaultPlayers };
                modifier = new DinogenArena.SettingsModifier(this.game, "Raptors", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
            }
            else if (_data["id"] == DinogenArena.GameModeManager.GAME_MODE_KING_OF_THE_HILL) {
                data = { id: "scoreLimit", min: 10, max: 120, value: 60 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Score Limit (Seconds)", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
                data = { id: "players", min: 1, max: 10, value: 5 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Players", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
            }
            else if (_data["id"] == DinogenArena.GameModeManager.GAME_MODE_REX) {
                data = { id: "scoreLimit", min: 10, max: 50, value: 25 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Human Lives", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
                data = { id: "players", min: 1, max: 8, value: 4 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Human Players", this.contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                this.addContentChild(modifier);
            }
            arr = [];
            var maps = DinogenArena.MapManager.GetCustomMapIds();
            for (var i = 0; i < maps.length; i++) {
                var mapData = DinogenArena.MapManager.GetMap(maps[i]);
                var arrData = { id: mapData["id"], label: mapData["name"] };
                if (arrData["id"] == DinogenArena.MapManager.MAP_HEXAGON || arrData["id"] == DinogenArena.MapManager.MAP_TUTORIAL) {
                    if (!DinogenArena.PlayerManager.CurrentProfile.isCustomPrestiged()) {
                        arrData["colour"] = 0x999999;
                        arrData["bLocked"] = true;
                    }
                }
                arr.push(arrData);
            }
            data = { id: "map", items: arr, index: this.lastMapId ? maps.indexOf(this.lastMapId) : 0 };
            var mapModifier = new DinogenArena.SettingsModifier(this.game, "Map", this.contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
            mapModifier.updateEvent.add(this.onModifierChanged, this);
            this.addContentChild(mapModifier);
            this.updateMapPreview(mapModifier.module.getSelectedData());
            var rankedButtons = this.game.add.group();
            var randomGameButton = new DinogenArena.MenuButton(this.randomizeRankedGame, this, null, true);
            randomGameButton.setLabelText("Randomize"); //u21BB
            rankedButtons.add(randomGameButton);
            var button = new DinogenArena.MenuButton(this.onStartClicked, this, null, true);
            button.setLabelText("Start Game"); //\u25BA 
            button.x = randomGameButton.x + randomGameButton.width + 4;
            rankedButtons.add(button);
            rankedButtons.x = (this.contentWidth * 0.5) - (rankedButtons.width * 0.5);
            rankedButtons.y = this.contentHeight - rankedButtons.height;
            this.contentGroup.add(rankedButtons);
            var lastRankedSettings = DinogenArena.PlayerManager.CurrentProfile.getLastRankedSettings();
            if (lastRankedSettings) {
                this.loadRankedGameSettings(lastRankedSettings);
            }
        };
        MainMenu_ContentElement.prototype.updateMapPreview = function (_mapId) {
            if (this.mapPreview) {
                this.mapPreview.destroy();
            }
            var desiredMapSize = 156;
            this.mapPreview = this.game.add.group();
            var bg = this.game.add.graphics();
            bg.beginFill(0x000000, 0.2);
            bg.drawRoundedRect(0, 0, 300, desiredMapSize + 8, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            this.mapPreview.addAt(bg, 0);
            var mapImage = this.game.add.image(0, 0, "atlas_map_overlays", _mapId);
            mapImage.height = desiredMapSize;
            mapImage.scale.x = mapImage.scale.y;
            mapImage.anchor.set(0.5, 0.5);
            mapImage.x = bg.width * 0.5;
            mapImage.y = bg.height * 0.5;
            this.mapPreview.x = (this.contentWidth * 0.5) - (this.mapPreview.width * 0.5);
            this.mapPreview.y = (this.contentHeight - this.mapPreview.height) - 44;
            this.mapPreview.add(mapImage);
            this.contentGroup.add(this.mapPreview);
            if (_mapId == DinogenArena.MapManager.MAP_HEXAGON || _mapId == DinogenArena.MapManager.MAP_TUTORIAL) {
                if (!DinogenArena.PlayerManager.CurrentProfile.isCustomPrestiged()) {
                    mapImage.alpha = 0.2;
                    var lockIcon = this.game.add.image(0, 0, "atlas_ui", "icon_lock");
                    lockIcon.anchor.set(0.5, 0.5);
                    lockIcon.x = mapImage.x;
                    lockIcon.y = mapImage.y;
                    this.mapPreview.add(lockIcon);
                    var lockText = this.game.add.text(0, 0, "Requires Prestige (level " + DinogenArena.PlayerProfile.MAX_CUSTOM_LEVEL + ")", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    lockText.anchor.set(0.5, 0);
                    lockText.alpha = 0.5;
                    lockText.x = lockIcon.x;
                    lockText.y = (lockIcon.y - (lockIcon.height * 0.5)) - (lockText.height + 4);
                    this.mapPreview.add(lockText);
                }
            }
            if (this.lastMapId != _mapId) {
                //var tween = this.game.add.tween(mapImage.scale).from({ y: 0 }, 500, Phaser.Easing.Cubic.Out, true);
            }
            this.lastMapId = _mapId;
        };
        MainMenu_ContentElement.prototype.randomizeRankedGame = function () {
            var gameModeModifier = this.getModifier("gameMode");
            gameModeModifier.randomizeModule();
            var mapModifier = this.getModifier("map");
            mapModifier.randomizeModule();
        };
        MainMenu_ContentElement.prototype.onTutorialClicked = function () {
            var data = {
                gameMode: DinogenArena.GameModeManager.GAME_MODE_CAMPAIGN,
                map: DinogenArena.MapManager.MAP_TUTORIAL,
                aiSkillLevel: 0,
                bShowMapLayout: false,
                bTutorial: true,
                gameId: "tutorial",
                titleText: "Tutorial",
                descText: "Learn the basics of gameplay.",
                triggersId: "triggers_tutorial"
            };
            var mainMenu = DinogenArena.GameUtil.GetMainMenuState().mainMenu;
            mainMenu.onCloseCallback = this.createPreGameMenu;
            mainMenu.onCloseCallbackContext = this;
            mainMenu.onCloseCallbackParams = data;
            mainMenu.close();
        };
        MainMenu_ContentElement.prototype.onSurvivalClicked = function () {
            var data = {
                gameMode: DinogenArena.GameModeManager.GAME_MODE_SURVIVAL,
                map: DinogenArena.MapManager.MAP_SURVIVAL,
                aiSkillLevel: 0,
                bShowMapLayout: false
            };
            var mainMenu = DinogenArena.GameUtil.GetMainMenuState().mainMenu;
            mainMenu.onCloseCallback = this.createPreGameMenu;
            mainMenu.onCloseCallbackContext = this;
            mainMenu.onCloseCallbackParams = data;
            mainMenu.close();
        };
        MainMenu_ContentElement.prototype.onStartClicked = function () {
            var modifiers = this.getAllModifiers();
            var data = {};
            for (var i = 0; i < modifiers.length; i++) {
                var modifier = modifiers[i];
                var mod = modifier.data;
                var module = modifier.module;
                if (module) {
                    data[mod["id"]] = module.getSelectedData();
                }
            }
            console.log(data);
            var bStartGame = true;
            if (!DinogenArena.PlayerManager.CurrentProfile.isCustomPrestiged()) {
                if (data["map"] == DinogenArena.MapManager.MAP_HEXAGON || data["map"] == DinogenArena.MapManager.MAP_TUTORIAL) {
                    DinogenArena.GameUtil.game.createWindow({
                        titleText: "Prestige Required",
                        type: Window.TYPE_MESSAGE,
                        descText: "This map is only available after prestiging (unlocked at level " + DinogenArena.PlayerProfile.MAX_CUSTOM_LEVEL + ")."
                    });
                    bStartGame = false;
                }
                else {
                    var gameMode = DinogenArena.GameModeManager.GetGameMode(data["gameMode"]);
                    if (gameMode["bPrestige"] == true) {
                        DinogenArena.GameUtil.game.createWindow({
                            titleText: "Prestige Required",
                            type: Window.TYPE_MESSAGE,
                            descText: "This game mode is only available after prestiging (unlocked at level " + DinogenArena.PlayerProfile.MAX_CUSTOM_LEVEL + ")."
                        });
                        bStartGame = false;
                    }
                }
            }
            if (bStartGame) {
                var scoreModifier = this.getModifier("scoreLimit");
                var gameSettings = {
                    gameMode: this.getModifier("gameMode").module.getCurrentValue(),
                    timeLimit: this.getModifier("timeLimit").module.getCurrentValue(),
                    scoreLimit: scoreModifier ? scoreModifier.module.getCurrentValue() : null,
                    players: this.getModifier("players").module.getCurrentValue(),
                    map: this.getModifier("map").module.getCurrentValue()
                };
                DinogenArena.PlayerManager.CurrentProfile.setLastRankedSettings(gameSettings);
                //this.loadRankedGameSettings(gameSettings)
                var mainMenu = DinogenArena.GameUtil.GetMainMenuState().mainMenu;
                mainMenu.onCloseCallback = this.createPreGameMenu;
                mainMenu.onCloseCallbackContext = this;
                mainMenu.onCloseCallbackParams = data;
                mainMenu.close();
            }
        };
        MainMenu_ContentElement.prototype.createPreGameMenu = function (_data) {
            var menu = new PreGameMenu(_data);
        };
        MainMenu_ContentElement.prototype.getAllModifiers = function () {
            var arr = [];
            for (var i = 0; i < this.contentGroup.length; i++) {
                var child = this.contentGroup.getChildAt(i);
                if (child instanceof DinogenArena.SettingsModifier) {
                    arr.push(child);
                }
            }
            return arr;
        };
        MainMenu_ContentElement.prototype.getModifier = function (_id) {
            for (var i = 0; i < this.contentGroup.length; i++) {
                var child = this.contentGroup.getChildAt(i);
                if (child instanceof DinogenArena.SettingsModifier) {
                    var modifier = child;
                    if (modifier) {
                        var data = modifier.data;
                        if (data) {
                            if (data["id"] == _id) {
                                return modifier;
                            }
                        }
                    }
                }
            }
            return null;
        };
        MainMenu_ContentElement.prototype.openLoadoutMenu = function () {
            var menu = new LoadoutMenu();
        };
        MainMenu_ContentElement.prototype.removeContentChildrenAfter = function (_id) {
            var toRemove = [];
            var bRemove = _id == null ? true : false;
            for (var i = 0; i < this.contentGroup.length; i++) {
                var child = this.contentGroup.getChildAt(i);
                if (!bRemove) {
                    if (child instanceof DinogenArena.SettingsModifier) {
                        var modifier = child;
                        if (modifier) {
                            var data = modifier.data;
                            if (data) {
                                if (data["id"] == _id) {
                                    bRemove = true;
                                }
                            }
                        }
                    }
                }
                else {
                    toRemove.push(child);
                }
            }
            for (i = 0; i < toRemove.length; i++) {
                var temp = toRemove[i];
                this.contentGroup.removeChild(temp);
                temp.destroy();
            }
        };
        MainMenu_ContentElement.prototype.createContent = function () {
            this.clearContent();
            this.contentGroup = this.game.add.group();
            this.contentGroup.x = this.CONTENT_PADDING;
            this.contentGroup.y = this.bg.y + this.CONTENT_PADDING;
            this.addChild(this.contentGroup);
        };
        MainMenu_ContentElement.prototype.clearContent = function () {
            if (this.contentGroup) {
                this.contentGroup.destroy();
                this.contentGroup = null;
            }
        };
        MainMenu_ContentElement.prototype.addContentChild = function (_child) {
            //_child.y = this.contentGroup.height;
            if (this.contentGroup.length > 0) {
                var prevChild = this.contentGroup.getChildAt(this.contentGroup.length - 1);
                _child.y = prevChild.y + prevChild.height;
            }
            if (this.contentGroup.height > 0) {
                _child.y += this.CONTENT_PADDING;
            }
            this.contentGroup.add(_child);
        };
        return MainMenu_ContentElement;
    }(Phaser.Group));
    DinogenArena.MainMenu_ContentElement = MainMenu_ContentElement;
    var MenuBase = /** @class */ (function (_super) {
        __extends(MenuBase, _super);
        function MenuBase(_group) {
            if (_group === void 0) { _group = null; }
            var _this = _super.call(this) || this;
            _this.bBlurWorld = false;
            _this.bHideHUD = false;
            _this.bWorldWasBlurred = false;
            if (!_group) {
                DinogenArena.GameUtil.GetGameState().layerUI.add(_this);
            }
            else {
                _group.add(_this);
            }
            return _this;
        }
        MenuBase.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        MenuBase.prototype.show = function () {
            _super.prototype.show.call(this);
            if (this.bBlurWorld) {
                /*
                if (GameUtil.GetGameState().layerWorld.filters != undefined)
                {
                    this.bWorldWasBlurred = true;
                }
                */
                DinogenArena.GameUtil.GetGameState().setWorldBlur(true);
            }
            if (this.bHideHUD) {
                var pc = DinogenArena.GameUtil.GetGameState().playerController;
                var hud = pc.getHUD();
                hud.close();
            }
        };
        MenuBase.prototype.close = function () {
            _super.prototype.close.call(this);
            if (this.bBlurWorld) {
                if (!this.bWorldWasBlurred) {
                    DinogenArena.GameUtil.GetGameState().setWorldBlur(false);
                }
            }
            if (this.bHideHUD) {
                var pc = DinogenArena.GameUtil.GetGameState().playerController;
                pc.getHUD().show();
            }
        };
        MenuBase.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            //this.destroy();
        };
        return MenuBase;
    }(Blurable));
    DinogenArena.MenuBase = MenuBase;
    var TeamSelectMenu = /** @class */ (function (_super) {
        __extends(TeamSelectMenu, _super);
        function TeamSelectMenu(_data) {
            var _this = _super.call(this) || this;
            _this.setCanBlur(false);
            _this.bBlurWorld = true;
            _this.bg = _this.createOverlay();
            _this.addChild(_this.bg);
            _this.teamSelectElement = new MenuElement_TeamSelect();
            _this.teamSelectElement.selectedEvent.add(_this.onTeamSelected, _this);
            _this.addChild(_this.teamSelectElement);
            _this.teamSelectElement.setTeams(_data["teams"]);
            _this.show();
            return _this;
            //SoundManager.PlayUISound("ui_window_open");
        }
        TeamSelectMenu.prototype.destroy = function () {
            this.bg = null;
            this.teamSelectElement = null;
            _super.prototype.destroy.call(this);
        };
        TeamSelectMenu.prototype.onTeamSelected = function (_data) {
            var team = _data["team"];
            var gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
            gameMode.addPlayer(DinogenArena.PlayerManager.CurrentProfile.name, _data["team"], true);
            DinogenArena.SoundManager.PlayUISound("ui_team_" + _data["race"]);
            this.close();
        };
        TeamSelectMenu.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            var gameModePlayer = DinogenArena.GameUtil.GetGameState().gameMode.getUserPlayer();
            gameModePlayer.respawn();
            //this.destroy();
            DinogenArena.GameUtil.GetGameState().gameMode.destroyTeamSelectMenu();
        };
        return TeamSelectMenu;
    }(MenuBase));
    DinogenArena.TeamSelectMenu = TeamSelectMenu;
    var MenuElement = /** @class */ (function (_super) {
        __extends(MenuElement, _super);
        function MenuElement() {
            var _this = _super.call(this) || this;
            _this.tweenShowTime = 100;
            _this.tweenCloseTime = 100;
            return _this;
        }
        return MenuElement;
    }(UIBase));
    DinogenArena.MenuElement = MenuElement;
    var MenuElement_TeamSelect = /** @class */ (function (_super) {
        __extends(MenuElement_TeamSelect, _super);
        function MenuElement_TeamSelect() {
            var _this = _super.call(this) || this;
            _this.selectedEvent = new Phaser.Signal();
            _this.setAlignToCenter();
            _this.buttons = [];
            _this.labelText = _this.game.add.text(0, 0, "Select a team", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center", boundsAlignV: "middle" });
            //this.labelText.alpha = 0.5;
            _this.add(_this.labelText);
            _this.container = _this.game.add.group();
            _this.container.y = _this.labelText.height;
            _this.add(_this.container);
            _this.show();
            return _this;
        }
        MenuElement_TeamSelect.prototype.destroy = function () {
            this.labelText = null;
            while (this.buttons.length > 0) {
                this.buttons[0].destroy();
                this.buttons.splice(0, 1);
            }
            this.buttons = null;
            this.selectedEvent.removeAll(this);
            this.selectedEvent = null;
            this.container = null;
            _super.prototype.destroy.call(this);
        };
        MenuElement_TeamSelect.prototype.setTeams = function (_teams) {
            for (var i = 0; i < _teams.length; i++) {
                var teamData = _teams[i];
                var but = new DinogenArena.TeamSelectButton(this.onTeamSelected, this, [teamData]);
                but.setNumber(i + 1);
                but.setData(teamData);
                but.position.x = i * (but.width + 4);
                this.container.add(but);
                this.buttons.push(but);
            }
            this.labelText.x = (this.width * 0.5) - (this.labelText.width * 0.5);
            this.container.x = (this.width * 0.5) - (this.container.width * 0.5);
            this.readjustToStage();
        };
        MenuElement_TeamSelect.prototype.onTeamSelected = function (_data) {
            if (!this.selectedEvent) {
                console.log("Trying to dispatch from null signal");
                return;
            }
            this.selectedEvent.dispatch(_data);
        };
        return MenuElement_TeamSelect;
    }(MenuElement));
    DinogenArena.MenuElement_TeamSelect = MenuElement_TeamSelect;
    var PreGameMenu = /** @class */ (function (_super) {
        __extends(PreGameMenu, _super);
        function PreGameMenu(_data) {
            var _this = _super.call(this) || this;
            _this.data = _data;
            _this.tweenShowTime = 500;
            _this.bg = _this.createOverlay();
            _this.add(_this.bg);
            _this.container = _this.game.add.group();
            _this.add(_this.container);
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 0.2); //0xFFFFFF, 0.2
            console.log(_this.data);
            graphics.drawRoundedRect(0, 0, 720, (_this.data["bShowMapLayout"] != false ? 540 : 300), DinogenArena.GameUtil.RECTANGLE_RADIUS); //540, 240
            _this.container.add(graphics);
            _this.container.position.set((_this.bg.width * 0.5) - (_this.container.width * 0.5), (_this.bg.height * 0.5) - (_this.container.height * 0.5));
            _this.setFromData(_data);
            _this.show();
            return _this;
        }
        PreGameMenu.prototype.setFromData = function (_data) {
            this.data = _data;
            var gameMode = DinogenArena.GameModeManager.GetGameMode(_data["gameMode"]);
            var modeIcon = this.game.add.image(0, 8, "atlas_ui", "icon_" + gameMode["id"]);
            modeIcon.x = this.container.width * 0.5;
            modeIcon.anchor.set(0.5, 0);
            this.container.add(modeIcon);
            var modeText = this.game.add.text(0, 0, _data["titleText"] ? _data["titleText"] : gameMode["name"], { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            modeText.position.set(this.container.width * 0.5, modeIcon.y + modeIcon.height + 4);
            modeText.anchor.set(0.5, 0);
            this.container.add(modeText);
            var descText = this.game.add.text(0, 0, _data["descText"] ? _data["descText"] : gameMode["desc"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center" });
            descText.alpha = 0.5;
            descText.position.set(modeText.x, (modeText.y + modeText.height) - 6);
            descText.anchor.set(0.5, 0);
            this.container.add(descText);
            var map = DinogenArena.MapManager.GetMap(_data["map"]);
            if (_data["bShowMapLayout"] != false) {
                var mapContainer = this.game.add.group();
                this.container.add(mapContainer);
                var gfx = this.game.add.graphics();
                gfx.beginFill(0x000000, 0.2);
                gfx.drawRoundedRect(0, 0, this.container.width - 8, 300, DinogenArena.GameUtil.RECTANGLE_RADIUS);
                mapContainer.add(gfx);
                var mapImage = this.game.add.image(0, 0, "atlas_map_overlays", map["id"]);
                mapImage.anchor.set(0.5, 0);
                mapImage.x = gfx.width * 0.5;
                mapImage.y = 4;
                mapContainer.add(mapImage);
                var mapText = this.game.add.text(0, 0, map["name"], { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                mapText.x = mapImage.x;
                mapText.y = gfx.height - mapText.height;
                mapText.anchor.set(0.5, 0);
                mapContainer.add(mapText);
                mapContainer.x = (this.container.width * 0.5) - (mapContainer.width * 0.5);
                mapContainer.y = descText.y + descText.height + 8;
            }
            if (_data["bTutorial"] == true) {
                var controls = DinogenArena.PlayerManager.CurrentProfile.controls;
                var keyGroup = this.game.add.group();
                var keyPadding = 4;
                var movementText = this.game.add.text(0, 0, "Movement", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                keyGroup.add(movementText);
                var keyUp = new KeyIcon();
                keyUp.setKey(controls.getKeyStringFromId(DinogenArena.PlayerControls.KEY_UP));
                keyUp.y = movementText.height;
                keyGroup.add(keyUp);
                var keyLeft = new KeyIcon();
                keyLeft.setKey(controls.getKeyStringFromId(DinogenArena.PlayerControls.KEY_LEFT));
                keyLeft.x = keyUp.x + keyUp.width + keyPadding;
                keyLeft.y = movementText.height;
                keyGroup.add(keyLeft);
                var keyDown = new KeyIcon();
                keyDown.setKey(controls.getKeyStringFromId(DinogenArena.PlayerControls.KEY_DOWN));
                keyDown.x = keyLeft.x + keyLeft.width + keyPadding;
                keyDown.y = movementText.height;
                keyGroup.add(keyDown);
                var keyRight = new KeyIcon();
                keyRight.setKey(controls.getKeyStringFromId(DinogenArena.PlayerControls.KEY_RIGHT));
                keyRight.x = keyDown.x + keyDown.width + keyPadding;
                keyRight.y = movementText.height;
                keyGroup.add(keyRight);
                movementText.x = (keyGroup.width * 0.5) - (movementText.width * 0.5);
                var keyText = this.game.add.text(0, 0, "Or use the arrow keys", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                keyText.alpha = 0.5;
                keyText.x = (keyGroup.width * 0.5) - (keyText.width * 0.5);
                keyText.y = keyGroup.height;
                keyGroup.add(keyText);
                this.container.add(keyGroup);
                keyGroup.x = (this.container.width * 0.5) - (keyGroup.width * 0.5);
                keyGroup.y = descText.y + descText.height + 20;
            }
            this.loadBar = new DinogenArena.UIBar(this.container.width - 32, 0xFFFFFF);
            this.loadBar.height = 2;
            this.loadBar.position.set((this.container.width * 0.5) - (this.loadBar.width * 0.5), this.container.height - this.loadBar.height - 24);
            this.container.add(this.loadBar);
            this.loadText = this.game.add.text(0, 0, "PREPARING GAME...", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            this.loadText.alpha = 1;
            this.loadText.anchor.set(0.5, 0);
            this.loadText.position.set(this.container.width * 0.5, this.loadBar.y + this.loadBar.height + 4);
            this.container.add(this.loadText);
            this.tipText = this.game.add.text(0, 0, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            this.tipText.alpha = 0.35;
            this.tipText.setTextBounds(0, 0, this.container.width, 32);
            this.tipText.y = (this.loadText.y - this.tipText.height) - 8;
            this.container.add(this.tipText);
            this.loadRandomTip();
            DinogenArena.SoundManager.PlayUISound("ui_game_prepare");
        };
        PreGameMenu.prototype.destroy = function () {
            if (this.tipTimer) {
                this.tipTimer.stop();
                this.tipTimer.destroy();
            }
            this.bg = null;
            this.container = null;
            this.data = null;
            this.loadBar = null;
            this.tipText = null;
            _super.prototype.destroy.call(this);
        };
        PreGameMenu.prototype.loadRandomTip = function () {
            this.tipText.setText(DinogenArena.GameUtil.GetRandomTip(), true);
            if (this.tipTimer) {
                this.tipTimer.destroy();
            }
            this.tipTimer = this.game.time.create(true);
            this.tipTimer.add(5000, this.loadRandomTip, this);
            this.tipTimer.start();
        };
        PreGameMenu.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            if (DinogenArena.GameUtil.AdsEnabled()) {
                DinogenArena.AdUtil.ShowAd();
                var timer = this.game.time.create();
                timer.add(2000, this.onLoadComplete, this);
                timer.start();
            }
            else {
                this.onLoadComplete();
            }
        };
        PreGameMenu.prototype.onLoadComplete = function () {
            this.loadBar.setBarScale(1, false);
            this.loadText.setText("CLICK TO CONTINUE", true);
            this.tweenLoadText();
            this.onChildInputUp.addOnce(this.onClicked, this);
            //this.game.time.events.add(Phaser.Timer.QUARTER, this.close, this);
        };
        PreGameMenu.prototype.onClicked = function () {
            DinogenArena.SoundManager.PlayUISound("ui_button_click");
            this.close();
        };
        PreGameMenu.prototype.tweenLoadText = function () {
            var minAlpha = 0;
            var maxAlpha = 1;
            var tween = this.game.add.tween(this.loadText).to({ alpha: (this.loadText.alpha == minAlpha ? maxAlpha : minAlpha) }, 750, Phaser.Easing.Exponential.InOut, true, 0, Number.MAX_VALUE, true);
            //tween.onComplete.addOnce(this.tweenLoadText, this);
        };
        PreGameMenu.prototype.close = function () {
            _super.prototype.close.call(this);
            this.engine.fadeToBlack(this.engine.createGame, this.engine, this.data);
        };
        return PreGameMenu;
    }(UIBase));
    DinogenArena.PreGameMenu = PreGameMenu;
    var PostGameMenu = /** @class */ (function (_super) {
        __extends(PostGameMenu, _super);
        function PostGameMenu(_gameMode) {
            var _this = _super.call(this) || this;
            _this.bBlurWorld = true;
            _this.bHideHUD = true;
            _this.tweenShowTime = _this.tweenCloseTime = 350;
            _this.gameMode = _gameMode;
            _this.bg = _this.createOverlay();
            _this.add(_this.bg);
            _this.playerInitialData = _this.gameMode.playerInitialData;
            var endString;
            if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_TIME) {
                endString = "Time Limit Reached";
            }
            else if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_SCORE) {
                endString = "Score Limit Reached";
            }
            else if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_EVOLUTION) {
                endString = "Evolution Complete";
            }
            else if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_HUNTER) {
                endString = "Hunt Complete";
            }
            else if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_REX_KILLED) {
                endString = "T Rex Killed";
            }
            else if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_REX_WINS) {
                endString = "All Humans Killed";
            }
            else if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_SURVIVAL) {
                endString = "Game Over";
                DinogenArena.PlayerManager.CurrentProfile.setBestSurvivalScore(DinogenArena.GameUtil.GetGameState().gameMode.getUserPlayer().getKills());
            }
            else if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_COMPLETE) {
                endString = "Complete";
                if (_this.gameMode.isTutorial()) {
                    DinogenArena.PlayerManager.CurrentProfile.setTutorialComplete();
                    endString = "Tutorial Complete";
                }
            }
            else if (_this.gameMode.endMatchCondition == DinogenArena.GameMode.END_MATCH_CONDITION_DEAD) {
                endString = "Killed In Action";
            }
            else {
                DinogenArena.GameUtil.Alert("Invalid end match condition");
            }
            _this.titleText = _this.game.add.text(_this.bg.width * 0.5, _this.bg.height * 0.5, endString, { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.titleText.anchor.set(0.5, 0.5);
            _this.add(_this.titleText);
            var bVictory = false;
            var resultString;
            var resultColour;
            if (_this.gameMode.result == DinogenArena.GameMode.RESULT_DRAW) {
                resultString = "Draw";
                resultColour = "#FFFFFF";
            }
            else if (_this.gameMode.result == DinogenArena.GameMode.RESULT_WIN) {
                bVictory = true;
                resultString = "Victory";
                resultColour = DinogenArena.GameUtil.COLOUR_NEW_STRING;
            }
            else if (_this.gameMode.result == DinogenArena.GameMode.RESULT_LOSS) {
                resultString = "Defeat";
                resultColour = DinogenArena.GameUtil.COLOUR_THEME_STRING;
            }
            _this.resultText = _this.game.add.text(_this.bg.width * 0.5, _this.titleText.y + _this.titleText.height, resultString, { font: "32px " + DinogenArena.GameUtil.FONT, fill: resultColour });
            _this.resultText.anchor.set(0.5, 0.5);
            _this.resultText.scale.set(0, 0);
            _this.add(_this.resultText);
            _this.show();
            DinogenArena.SoundManager.DestroyAmbience();
            DinogenArena.SoundManager.PlayMusic(bVictory ? "music_postgame_victory" : "music_postgame_default");
            return _this;
        }
        PostGameMenu.prototype.destroy = function () {
            this.submitButton = null;
            this.playerInitialData = null;
            this.gameMode = null;
            this.titleText = null;
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        PostGameMenu.prototype.start = function () {
            var tween = this.game.add.tween(this.resultText.scale).to({ x: 1, y: 1 }, 250, Phaser.Easing.Back.InOut, true, 250);
            tween.onComplete.add(this.onTweenComplete, this, 1, "result");
        };
        PostGameMenu.prototype.onTweenStart = function (_currentTarget, _currentTween, _item) {
            if (_item instanceof Phaser.Image) {
                var image = _item;
                DinogenArena.SoundManager.PlayUISound(image.key == "atlas_weapons" ? "ui_unlock_weapon" : "ui_unlock_perk");
            }
        };
        PostGameMenu.prototype.onTweenComplete = function (_currentTarget, _currentTween, _id) {
            if (_id == "result") {
                var desiredY = this.titleText.height + 10;
                var tween = this.game.add.tween(this.resultText.position).to({ y: desiredY + this.titleText.height }, 500, Phaser.Easing.Cubic.InOut, true, 500);
                var tween = this.game.add.tween(this.titleText.position).to({ y: desiredY }, 500, Phaser.Easing.Cubic.InOut, true, 500);
                tween.onComplete.add(this.onTweenComplete, this, 1, "title");
            }
            if (_id == "title") {
                var container = this.game.add.group();
                this.add(container);
                var graphics = this.game.add.graphics();
                graphics.beginFill(0xFFFFFF, 0.1);
                graphics.drawRect(0, 0, 600, 4);
                container.add(graphics);
                if (this.gameMode.isCampaign()) {
                    var completeText = this.game.add.text(0, 0, DinogenArena.GameUtil.GetGameState().gameMode.result == DinogenArena.GameMode.RESULT_WIN ? "Good job!\nYou successfully completed all objectives." : "You were killed!", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center" });
                    completeText.alpha = 0.5;
                    completeText.anchor.set(0.5, 0.5);
                    completeText.position.set(container.width * 0.5, container.height);
                    container.add(completeText);
                }
                else if (this.gameMode instanceof DinogenArena.GameMode_Survival) {
                    var survival = this.gameMode;
                    var playerKills = this.gameMode.getPlayerKills();
                    var padding = 20;
                    var waveText = this.game.add.text(0, 0, "You Reached Wave " + survival.getCurrentWave(), { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    waveText.setTextBounds(0, 0, 400, 32);
                    waveText.anchor.set(0.5, 0.5);
                    waveText.position.set(container.width * 0.5, container.height);
                    container.add(waveText);
                    var totalKillsText = this.game.add.text(0, 0, "Total kills:", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    totalKillsText.anchor.set(0.5, 0.5);
                    totalKillsText.alpha = 0.5;
                    totalKillsText.x = container.width * 0.5;
                    totalKillsText.y = container.height + (padding * 2);
                    container.add(totalKillsText);
                    var killsText = this.game.add.text(0, 0, DinogenArena.WilkinUtil.FormatNum(playerKills), { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    killsText.anchor.set(0.5, 0.5);
                    killsText.position.set(container.width * 0.5, totalKillsText.y + totalKillsText.height);
                    container.add(killsText);
                    var totalMoneyText = this.game.add.text(0, 0, "Total money earned:", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    totalMoneyText.anchor.set(0.5, 0.5);
                    totalMoneyText.alpha = 0.5;
                    totalMoneyText.x = container.width * 0.5;
                    totalMoneyText.y = container.height + padding;
                    container.add(totalMoneyText);
                    var moneyText = this.game.add.text(0, 0, "$" + DinogenArena.WilkinUtil.FormatNum(survival.getTotalMoney()), { font: "18px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
                    moneyText.anchor.set(0.5, 0.5);
                    moneyText.position.set(container.width * 0.5, totalMoneyText.y + totalMoneyText.height);
                    container.add(moneyText);
                    var submitContainer = this.game.add.group();
                    this.submitButton = new DinogenArena.CustomModeButton(this.submitSurvivalScore, this, [playerKills]);
                    this.submitButton.setIcon("icon_button_challenges");
                    this.submitButton.setLabelText("Submit Score"); //WilkinUtil.FormatNum(playerKills)
                    submitContainer.add(this.submitButton);
                    var leaderboardsButton = new DinogenArena.CustomModeButton(this.onLeaderboardsClicked, this);
                    leaderboardsButton.setIcon("icon_button_leaderboards");
                    leaderboardsButton.setLabelText("View Leaderboards"); //2605
                    leaderboardsButton.x = this.submitButton.width + 4;
                    submitContainer.add(leaderboardsButton);
                    submitContainer.position.set((container.width * 0.5) - ((leaderboardsButton.width * 2) * 0.5), moneyText.y + totalMoneyText.height + (padding * 2));
                    container.add(submitContainer);
                    if (DinogenArena.APIUtil.CurrentAPI == DinogenArena.APIUtil.API_KONGREGATE) {
                        this.submitSurvivalScore(playerKills);
                    }
                }
                if (this.gameMode instanceof DinogenArena.CustomGameMode) {
                    var bonus = 100;
                    if (this.gameMode.result == DinogenArena.GameMode.RESULT_WIN) {
                        bonus += 200;
                    }
                    var userPlayer = this.gameMode.getUserPlayer();
                    if (userPlayer) {
                        bonus += userPlayer.getKills() * 5;
                        bonus += userPlayer.getFlagCaptures() * 25;
                        bonus += userPlayer.getFlagReturns() * 5;
                    }
                    DinogenArena.PlayerManager.CurrentProfile.addCustomXP(bonus);
                    var winBonusText = this.game.add.text(0, 0, "Match bonus:", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    winBonusText.anchor.set(0.5, 0.5);
                    winBonusText.alpha = 0.5;
                    winBonusText.x = container.width * 0.5;
                    container.add(winBonusText);
                    var xpText = this.game.add.text(0, 0, "+" + DinogenArena.WilkinUtil.FormatNum(bonus) + "XP", { font: "18px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
                    xpText.anchor.set(0.5, 0.5);
                    xpText.position.set(container.width * 0.5, winBonusText.y + winBonusText.height);
                    container.add(xpText);
                    var earnedText = this.game.add.text(0, 0, "Total XP earned:", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    earnedText.anchor.set(0.5, 0.5);
                    earnedText.alpha = 0.5;
                    earnedText.x = container.width * 0.5;
                    earnedText.y = container.height;
                    container.add(earnedText);
                    var xpText = this.game.add.text(0, 0, DinogenArena.WilkinUtil.FormatNum(DinogenArena.PlayerManager.CurrentProfile.getCustomXP() - this.playerInitialData["customXP"]) + "XP", { font: "18px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
                    xpText.anchor.set(0.5, 0.5);
                    xpText.position.set(container.width * 0.5, earnedText.y + earnedText.height);
                    container.add(xpText);
                    var unlocksText = this.game.add.text(0, 0, "Recent unlocks:", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    unlocksText.anchor.set(0.5, 0.5);
                    unlocksText.alpha = 0.5;
                    unlocksText.position.set(container.width * 0.5, (xpText.y + xpText.height) + 32);
                    container.add(unlocksText);
                    var unlocks = [];
                    var dif = DinogenArena.PlayerManager.CurrentProfile.getCustomLevel() - this.playerInitialData["customLevel"];
                    for (var i = 0; i < dif; i++) {
                        var curUnlocks = DinogenArena.PlayerProfile.GetUnlocksForCustomLevel(this.playerInitialData["customLevel"] + (i + 1));
                        unlocks = unlocks.concat(curUnlocks);
                    }
                    //unlocks = PlayerProfile.GetUnlocksForCustomLevel(4);
                    if (unlocks.length == 0) {
                        var noUnlocksText = this.game.add.text(0, 0, "None", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                        noUnlocksText.alpha = 0.5;
                        noUnlocksText.anchor.set(0.5, 0.5);
                        noUnlocksText.position.set(container.width * 0.5, unlocksText.y + unlocksText.height);
                        container.add(noUnlocksText);
                    }
                    else {
                        var maxItems = 2;
                        for (var i = 0; i < unlocks.length; i++) {
                            if (i > maxItems) {
                                break;
                            }
                            var cur = unlocks[i];
                            var icon;
                            if (cur["type"] == "weapon") {
                                icon = this.game.add.image(0, 0, "atlas_weapons", cur["id"]);
                            }
                            else if (cur["type"] == "perk") {
                                icon = this.game.add.image(0, 0, "atlas_ui", cur["id"]);
                                icon.scale.set(0.5, 0.5);
                            }
                            if (icon) {
                                icon.anchor.set(0.5, 0.5);
                                icon.x = container.width * 0.5;
                                icon.y = container.height + (icon.height * 0.5) + 4;
                                container.add(icon);
                            }
                        }
                        if (unlocks.length > maxItems) {
                            var othersNum = (unlocks.length - maxItems);
                            var othersText = this.game.add.text(0, 0, "And " + othersNum + " other" + DinogenArena.WilkinUtil.AddPlural(othersNum), { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                            othersText.anchor.set(0.5, 0);
                            othersText.x = container.width * 0.5;
                            othersText.y = container.height;
                            container.add(othersText);
                        }
                    }
                    var xpBar = new DinogenArena.XPBar(600, true);
                    xpBar.y = container.height + 32;
                    container.add(xpBar);
                }
                container.x = (this.bg.width * 0.5) - (container.width * 0.5);
                container.y = (this.bg.height * 0.5) - (container.height * 0.5);
                if (graphics) {
                    graphics.destroy();
                }
                for (var i = 0; i < container.length; i++) {
                    var item = container.getAt(i);
                    var delay = i * 350;
                    var tween = this.game.add.tween(item).from({ alpha: 0 }, 200, Phaser.Easing.Cubic.InOut, true, delay);
                    if (i == container.length - 1) {
                        tween.onComplete.add(this.onTweenComplete, this, 0, "lastItem");
                    }
                    else {
                        this.game.add.tween(item.scale).from({ x: 1.5, y: 1.5 }, 200, Phaser.Easing.Back.InOut, true, delay);
                    }
                    tween.onStart.add(this.onTweenStart, this, 0, item);
                }
            }
            else if (_id == "lastItem") {
                var timer = this.game.time.create(true);
                timer.add(Phaser.Timer.SECOND, this.createContinueButton, this);
                timer.start();
            }
        };
        PostGameMenu.prototype.submitSurvivalScore = function (_score) {
            if (DinogenArena.APIUtil.CurrentAPI) {
                if (DinogenArena.APIUtil.IsLoggedIn()) {
                    DinogenArena.APIUtil.SubmitSurvivalScore(_score, this.onScoreSubmitted, this);
                }
                else {
                    DinogenArena.APIUtil.ValidateSession(true);
                }
            }
            else {
                DinogenArena.GameUtil.game.createWindow({
                    titleText: "Not Logged In",
                    type: Window.TYPE_MESSAGE,
                    descText: "You must be logged in to submit your score!"
                });
            }
        };
        PostGameMenu.prototype.onLeaderboardsClicked = function () {
            DinogenArena.APIUtil.LoadSurvivalLeaderboards();
        };
        PostGameMenu.prototype.onScoreSubmitted = function () {
            this.submitButton.setEnabled(false);
            this.submitButton.setLabelText("Score Submitted!"); //2714
        };
        PostGameMenu.prototype.createContinueButton = function () {
            var buttonsContainer = this.game.add.group();
            this.add(buttonsContainer);
            var gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
            var bHasScoreboard = gameMode.hasScoreboard();
            if (bHasScoreboard) {
                var continueButton = new DinogenArena.MenuButton(this.close, this, null, true);
                continueButton.setLabelText("Continue");
                buttonsContainer.add(continueButton);
            }
            else {
                var replayButton = new DinogenArena.MenuButton(this.onRestartClicked, this, null, true);
                replayButton.setLabelText("\u21BB " + (gameMode.isCampaign() ? "Replay" : "Try Again"));
                buttonsContainer.add(replayButton);
                var quitButton = new DinogenArena.MenuButton(this.onQuitClicked, this, null, true);
                quitButton.setLabelText("Quit");
                quitButton.y = replayButton.y + replayButton.height + 4;
                buttonsContainer.add(quitButton);
            }
            buttonsContainer.position.set((this.bg.width * 0.5) - (buttonsContainer.width * 0.5), this.bg.height - (buttonsContainer.height + 10));
            var tween = this.game.add.tween(buttonsContainer).from({ alpha: 0 }, 1000, Phaser.Easing.Cubic.Out, true);
        };
        PostGameMenu.prototype.onRestartClicked = function () {
            this.engine.fadeToBlack(this.engine.restartGame, this.engine);
        };
        PostGameMenu.prototype.onQuitClicked = function () {
            var menu = this.gameMode.isSurvival() ? MainMenu.MENU_SURVIVAL : MainMenu.MENU_RANKED;
            this.engine.fadeToBlack(this.engine.loadMainMenu, this.engine, [menu]);
        };
        PostGameMenu.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this.start();
        };
        PostGameMenu.prototype.close = function () {
            _super.prototype.close.call(this);
            if (this.gameMode.hasScoreboard()) {
                this.gameMode.showScoreboard();
            }
        };
        return PostGameMenu;
    }(MenuBase));
    DinogenArena.PostGameMenu = PostGameMenu;
    var SpawnMenu = /** @class */ (function (_super) {
        __extends(SpawnMenu, _super);
        function SpawnMenu(_data) {
            var _this = _super.call(this) || this;
            _this.setCanBlur(false);
            _this.bBlurWorld = true;
            _this.bg = _this.createOverlay();
            _this.addChild(_this.bg);
            _this.spawnSelect = new MenuElement_SpawnSelect();
            _this.spawnSelect.selectedEvent.add(_this.onClassSelected, _this);
            _this.setData(_data);
            _this.addChild(_this.spawnSelect);
            _this.show();
            return _this;
            //SoundManager.PlayUISound("ui_window_open");
        }
        SpawnMenu.prototype.destroy = function () {
            this.bg = null;
            if (this.spawnSelect) {
                this.spawnSelect.selectedEvent.remove(this.onClassSelected, this);
            }
            this.spawnSelect = null;
            _super.prototype.destroy.call(this);
        };
        SpawnMenu.prototype.setData = function (_data) {
            if (_data["type"] == "character") {
                this.spawnSelect.setCharacterClasses(_data["classes"]);
            }
            else if (_data["type"] == "dinosaur") {
                this.spawnSelect.setDinosaurClasses(_data["classes"]);
            }
        };
        SpawnMenu.prototype.onClassSelected = function (_data) {
            var gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
            gameMode.spawnPawn(gameMode.getUserPlayer(), _data);
            this.close();
        };
        SpawnMenu.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            //this.destroy();
            DinogenArena.GameUtil.GetGameState().gameMode.destroySpawnMenu();
        };
        return SpawnMenu;
    }(MenuBase));
    DinogenArena.SpawnMenu = SpawnMenu;
    var MenuElement_SpawnSelect = /** @class */ (function (_super) {
        __extends(MenuElement_SpawnSelect, _super);
        function MenuElement_SpawnSelect() {
            var _this = _super.call(this) || this;
            _this.selectedEvent = new Phaser.Signal();
            _this.setAlignToCenter();
            _this.labelText = _this.game.add.text(0, 0, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            //this.labelText.alpha = 0.5;
            _this.addChild(_this.labelText);
            _this.show();
            return _this;
        }
        MenuElement_SpawnSelect.prototype.destroy = function () {
            this.labelText = null;
            this.selectedEvent = null;
            _super.prototype.destroy.call(this);
        };
        MenuElement_SpawnSelect.prototype.setCharacterClasses = function (_arr) {
            this.labelText.setText("Select a loadout");
            console.log(_arr);
            for (var i = 0; i < _arr.length; i++) {
                var data = _arr[i];
                var but = new DinogenArena.SpawnSelectButton(this.onClassSelected, this, [data]);
                but.setNumber(i + 1);
                but.setData(data);
                but.position.set(i * (but.width + 4), this.labelText.y + this.labelText.height);
                this.addChild(but);
            }
            if (this.width > this.labelText.width) {
                this.labelText.x = (this.width * 0.5) - (this.labelText.width * 0.5);
            }
            this.readjustToStage();
        };
        MenuElement_SpawnSelect.prototype.setDinosaurClasses = function (_arr) {
            this.labelText.setText("Select a dinosaur");
            var container = this.game.add.group();
            this.add(container);
            var maxRows = 3;
            var useY = 0;
            var j = 0;
            var padding = 4;
            for (var i = 0; i < _arr.length; i++) {
                var data = _arr[i];
                var but = new DinogenArena.SpawnSelectButton(this.onClassSelected, this, [data]);
                but.setNumber(i + 1);
                but.setData(data);
                but.x = j * (but.width + padding);
                but.y = useY;
                container.addChild(but);
                j++;
                if ((i + 1) % maxRows == 0) {
                    j = 0;
                    useY = container.height + padding;
                }
            }
            container.y = this.labelText.y + this.labelText.height;
            if (this.width > this.labelText.width) {
                this.labelText.x = (this.width * 0.5) - (this.labelText.width * 0.5);
            }
            this.readjustToStage();
        };
        MenuElement_SpawnSelect.prototype.onClassSelected = function (_data) {
            this.selectedEvent.dispatch(_data);
            this.close();
        };
        MenuElement_SpawnSelect.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            this.destroy();
        };
        return MenuElement_SpawnSelect;
    }(MenuElement));
    DinogenArena.MenuElement_SpawnSelect = MenuElement_SpawnSelect;
    var HUDObjectiveArrow = /** @class */ (function (_super) {
        __extends(HUDObjectiveArrow, _super);
        function HUDObjectiveArrow(_hud, _data) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.desiredRotation = 0;
            _this.desiredScale = 1;
            _this.desiredX = 0;
            _this.desiredY = 0;
            _this.hud = _hud;
            _this.bg = _this.game.add.graphics();
            _this.bg.beginFill(0xFFFFFF, 0.1);
            _this.bg.drawCircle(0, 0, 70);
            _this.add(_this.bg);
            _this.arrow = _this.game.add.image(0, 0, "atlas_ui", "arrow_objective");
            _this.arrow.anchor.set(-1, 0.5);
            _this.add(_this.arrow);
            _this.data = _data;
            if (_data) {
                var obj;
                if (_data["worldObject"]) {
                    obj = _data["worldObject"];
                }
                else {
                    obj = DinogenArena.GameUtil.GetGameState().getObjectById(_data["objectId"]);
                }
                _this.setTarget(obj);
                var indicatorId;
                if (obj instanceof DinogenArena.Crate) {
                    var crate = obj;
                    var contents = crate.getContents();
                    if (contents) {
                        indicatorId = contents["type"];
                    }
                    else if (crate instanceof DinogenArena.SurvivalCrate) {
                        indicatorId = "armory";
                    }
                }
                else if (obj instanceof DinogenArena.Flag) {
                    indicatorId = "flag";
                }
                else if (obj instanceof DinogenArena.HillZone) {
                    indicatorId = "crown";
                }
                else if (obj instanceof DinogenArena.Actor) {
                    indicatorId = "target";
                }
                else {
                    indicatorId = "objective";
                }
                if (indicatorId) {
                    _this.indicator = _this.game.add.image(0, 0, "atlas_ui", "indicator_" + indicatorId);
                    _this.indicator.anchor.set(0.5, 0.5);
                    _this.add(_this.indicator);
                    if (_data["team"] != undefined) {
                        _this.indicator.tint = DinogenArena.GameModeManager.GetColourForTeam(_data["team"]);
                    }
                }
                if (_data["label"]) {
                    //this.labelText = this.game.add.text(0, 0, _data["label"], { font: "12px " + GameUtil.FONT, fill: "#FFFFFF" });
                    //this.add(this.labelText);
                }
            }
            _this.x = _this.game.width * 0.5;
            _this.y = _this.game.height * 0.5;
            return _this;
        }
        HUDObjectiveArrow.prototype.destroy = function () {
            this.data = null;
            this.hud = null;
            this.arrow = null;
            this.indicator = null;
            this.target = null;
            this.labelText = null;
            _super.prototype.destroy.call(this);
        };
        HUDObjectiveArrow.prototype.getData = function () {
            return this.data;
        };
        HUDObjectiveArrow.prototype.tick = function () {
            if (this.target) {
                var player = DinogenArena.GameUtil.GetGameState().player;
                var actor = this.target instanceof DinogenArena.Actor ? this.target : null;
                if (actor) {
                    if (!actor.isAlive()) {
                        this.target = null;
                        this.hud.removeObjectiveArrow(this);
                        return;
                    }
                }
                if (this.target.isPendingDestroy()) {
                    this.target = null;
                    this.hud.removeObjectiveArrow(this);
                    return;
                }
                var desiredX = (this.target.x - DinogenArena.GameUtil.game.world.camera.x);
                var desiredY = (this.target.y - DinogenArena.GameUtil.game.world.camera.y);
                var offset = this.bg.width; //this.arrow.width;
                var maxWidth = DinogenArena.GameUtil.game.width - offset;
                var maxHeight = DinogenArena.GameUtil.game.height - offset;
                var bOffScreen = desiredX < offset || desiredX > maxWidth || desiredY < offset || desiredY > maxHeight;
                this.desiredX = Math.max(offset, Math.min(desiredX, maxWidth));
                this.desiredY = Math.max(offset, Math.min(desiredY - (bOffScreen ? 0 : 50), maxHeight));
                if (bOffScreen) {
                    var distX = this.target.x - player.x; //(this.x + GameUtil.game.world.camera.x);
                    var distY = this.target.y - player.y; //(this.y + GameUtil.game.world.camera.y);
                    this.desiredRotation = Math.atan2(distY, distX);
                    this.desiredScale = 1;
                }
                else {
                    this.desiredRotation = 90 * DinogenArena.WilkinUtil.TO_RADIANS;
                    //this.desiredScale = 0.65;
                }
                this.alpha = bOffScreen ? 1 : 0.5;
            }
            //var dist = WilkinUtil.GetDistance(this.target.x, this.target.y, player.x, player.y);
            var moveMult = bOffScreen ? 0.1 : 0.9;
            this.x -= (this.x - this.desiredX) * moveMult;
            this.y -= (this.y - this.desiredY) * moveMult;
            var useRotation = (this.arrow.rotation - this.desiredRotation);
            if (useRotation > 180 * DinogenArena.WilkinUtil.TO_RADIANS) {
                useRotation -= 360 * DinogenArena.WilkinUtil.TO_RADIANS;
            }
            else if (useRotation < -180 * DinogenArena.WilkinUtil.TO_RADIANS) {
                useRotation += 360 * DinogenArena.WilkinUtil.TO_RADIANS;
            }
            this.arrow.rotation -= useRotation * 0.2;
            this.arrow.scale.x -= (this.arrow.scale.x - this.desiredScale) * 0.05;
            this.arrow.scale.y = this.arrow.scale.x;
            this.bg.visible = bOffScreen;
        };
        HUDObjectiveArrow.prototype.setTarget = function (_obj) {
            this.target = _obj;
        };
        return HUDObjectiveArrow;
    }(Phaser.Group));
    DinogenArena.HUDObjectiveArrow = HUDObjectiveArrow;
    var HUD = /** @class */ (function (_super) {
        __extends(HUD, _super);
        function HUD() {
            var _this = _super.call(this) || this;
            _this.bInit = false;
            _this.indicators = [];
            _this.crosshair = new Crosshair();
            _this.addChild(_this.crosshair);
            _this.objectiveArrows = [];
            _this.hudElements = [];
            _this.gameMode = new HUDElement_GameMode(_this);
            _this.hudElements.push(_this.gameMode);
            _this.hudElements.push(new HUDElement_DamageOverlay(_this));
            _this.message = new HUDElement_Message(_this);
            _this.hudElements.push(_this.message);
            _this.notifier = new HUDElement_Notifier(_this);
            _this.hudElements.push(_this.notifier);
            _this.xp = new HUDElement_XP(_this);
            _this.hudElements.push(_this.xp);
            _this.playerInfo = new HUDElement_PlayerInfo(_this);
            _this.hudElements.push(_this.playerInfo);
            _this.hudElements.push(new HUDElement_Feed(_this));
            _this.minimap = new HUDElement_MiniMap(_this);
            _this.hudElements.push(_this.minimap);
            if (DinogenArena.GameUtil.GetGameState().gameMode.isCampaign()) {
                _this.quests = new HUDElement_Quests(_this);
                _this.hudElements.push(_this.quests);
                _this.vox = new HUDElement_Vox(_this);
                _this.hudElements.push(_this.vox);
            }
            else if (DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                _this.allies = new HUDElement_Allies(_this);
                _this.hudElements.push(_this.allies);
            }
            _this.deadIcon = _this.game.add.image(0, 0, "atlas_ui", "icon_dead");
            _this.deadIcon.anchor.set(0.5, 0.5);
            _this.deadIcon.alpha = 0.8;
            _this.deadIcon.x = _this.game.width * 0.5;
            _this.deadIcon.y = (_this.game.height * 0.5) + 180;
            _this.add(_this.deadIcon);
            _this.setDeadIconVisible(false);
            DinogenArena.GameUtil.GetGameState().layerUI.add(_this);
            _this.setHasPawn(false);
            _this.show();
            return _this;
        }
        HUD.prototype.destroy = function () {
            this.objectiveArrows = null;
            while (this.indicators.length > 0) {
                this.indicators[0].destroy();
                this.indicators.splice(0, 1);
            }
            this.indicators = null;
            this.crosshair.destroy();
            this.crosshair = null;
            this.clearHUDElements();
            this.gameMode = null;
            this.playerInfo = null;
            this.minimap = null;
            this.message = null;
            this.notifier = null;
            this.quests = null;
            this.xp = null;
            this.vox = null;
            _super.prototype.destroy.call(this);
        };
        HUD.prototype.tick = function () {
            if (this.crosshair) {
                this.crosshair.x = this.game.input.activePointer.x;
                this.crosshair.y = this.game.input.activePointer.y;
                this.crosshair.tick();
            }
            if (this.interactTooltip) {
                this.interactTooltip.hide();
            }
            for (var i = 0; i < this.hudElements.length; i++) {
                this.hudElements[i].tick();
            }
            for (var i = 0; i < this.objectiveArrows.length; i++) {
                this.objectiveArrows[i].tick();
            }
        };
        HUD.prototype.removeElement = function (_element) {
            var index = this.hudElements.indexOf(_element);
            if (index >= 0) {
                _element.destroy();
                this.hudElements.splice(index, 1);
            }
        };
        HUD.prototype.updateAmmo = function (_firearm) {
            var inv = this.getElementByClass(HUDElement_Inventory);
            if (inv) {
                inv.updateAmmo(_firearm);
            }
        };
        HUD.prototype.addObjectiveArrow = function (_data) {
            var arrow = new HUDObjectiveArrow(this, _data);
            this.addAt(arrow, 0);
            this.objectiveArrows.push(arrow);
            return arrow;
        };
        HUD.prototype.removeObjectiveArrow = function (_arrow) {
            var index = this.objectiveArrows.indexOf(_arrow);
            this.objectiveArrows[index].destroy();
            this.objectiveArrows.splice(index, 1);
        };
        HUD.prototype.removeObjectiveArrowsForQuestObjective = function (_questId, _objectiveId) {
            console.log("removeObjectiveArrowsForQuestObjective " + _questId + " " + _objectiveId);
            for (var i = 0; i < this.objectiveArrows.length; i++) {
                var arrow = this.objectiveArrows[i];
                var data = arrow.getData();
                if (data) {
                    if (data["questId"] == _questId) {
                        if (data["objectiveId"] == _objectiveId) {
                            this.removeObjectiveArrow(arrow);
                            break;
                        }
                    }
                }
            }
        };
        HUD.prototype.createInteractTooltip = function () {
            if (!this.interactTooltip) {
                this.interactTooltip = new InteractTooltip();
                this.add(this.interactTooltip);
            }
            return this.interactTooltip;
        };
        HUD.prototype.setInteractTooltip = function (_stageX, _stageY, _label) {
            if (!this.interactTooltip) {
                return;
            }
            var key = DinogenArena.PlayerManager.CurrentProfile.controls.getKeyStringFromId(DinogenArena.PlayerControls.KEY_INTERACT);
            this.interactTooltip.setLabel(_label, key);
            this.interactTooltip.x = Math.round((_stageX - this.game.camera.x) - (this.interactTooltip.width * 0.5));
            this.interactTooltip.y = Math.round((_stageY - this.game.camera.y) - (this.interactTooltip.height + 24));
            this.interactTooltip.show();
        };
        HUD.prototype.setHasPawn = function (_bVal) {
            if (_bVal) {
                this.crosshair.show();
            }
            else {
                this.crosshair.hide();
            }
            for (var i = 0; i < this.hudElements.length; i++) {
                this.hudElements[i].setHasPawn(_bVal);
            }
        };
        HUD.prototype.updatePlayerController = function (_pc) {
            var pawn = _pc ? _pc.getPawn() : null;
            var bValid = pawn ? pawn.isAlive() : false;
            if (bValid && !this.bInit) {
                if (pawn instanceof DinogenArena.Character) {
                    var char = pawn;
                    this.createInteractTooltip();
                    this.hudElements.push(new HUDElement_Inventory(this));
                }
                else if (pawn instanceof DinogenArena.Dinosaur) {
                    var dino = pawn;
                }
                this.bInit = true;
            }
            for (var i = 0; i < this.hudElements.length; i++) {
                this.hudElements[i].updatePawn(pawn);
            }
        };
        HUD.prototype.setDeadIconVisible = function (_bVal) {
            var bPrev = this.deadIcon.visible;
            this.deadIcon.visible = _bVal;
            if (_bVal && !bPrev) {
                var tween = this.game.add.tween(this.deadIcon.scale).from({ x: 0, y: 0 }, 500, Phaser.Easing.Back.InOut, true);
                var tween = this.game.add.tween(this.deadIcon).from({ y: this.game.height }, 500, Phaser.Easing.Back.InOut, true);
            }
        };
        HUD.prototype.setMessageText = function (_str) {
            if (_str) {
                this.message.setText(_str);
                if (!this.message.isShowing()) {
                    this.message.show();
                }
            }
            else {
                this.message.setText("");
                if (this.message.isShowing()) {
                    this.message.close();
                }
            }
        };
        HUD.prototype.getElementByClass = function (_class) {
            for (var i = 0; i < this.hudElements.length; i++) {
                if (this.hudElements[i] instanceof _class) {
                    return this.hudElements[i];
                }
            }
            return null;
        };
        HUD.prototype.getElementById = function (_id) {
            for (var i = 0; i < this.hudElements.length; i++) {
                if (this.hudElements[i].id == _id) {
                    return this.hudElements[i];
                }
            }
            return null;
        };
        HUD.prototype.onTakeDamage = function (_causer, _angle) {
            var damageOverlay = this.getElementByClass(HUDElement_DamageOverlay);
            if (damageOverlay) {
                damageOverlay.showDamage();
                if (!isNaN(_angle)) {
                    this.addDamageIndicator(_angle);
                }
            }
        };
        HUD.prototype.addDamageIndicator = function (_angle) {
            var dist = 50;
            var useX = this.game.scale.width * 0.5;
            var useY = this.game.scale.height * 0.5;
            useX += Math.cos(_angle) * dist;
            useY += Math.sin(_angle) * dist;
            var indicator = this.game.add.image(useX, useY, "atlas_ui", "damage_indicator");
            indicator.rotation = _angle;
            indicator.anchor.set(0.5, 0.5);
            this.addChild(indicator);
            var indicatorTween = this.game.add.tween(indicator).to({ alpha: 0 }, 1500, Phaser.Easing.Circular.Out, true);
            this.game.add.tween(indicator.scale).from({ x: 2, y: 2 }, 500, Phaser.Easing.Elastic.Out, true);
            indicatorTween.onComplete.add(this.onIndicatorComplete, this);
            this.indicators.push(indicator);
        };
        HUD.prototype.onIndicatorComplete = function () {
            this.indicators[0].destroy();
            this.indicators.splice(0, 1);
        };
        HUD.prototype.getCrosshair = function () {
            return this.crosshair;
        };
        HUD.prototype.addToFeed = function (_data) {
            var feed = this.getElementByClass(HUDElement_Feed);
            if (feed) {
                feed.addItem(_data);
            }
        };
        HUD.prototype.addToXP = function (_val, _str) {
            if (_str === void 0) { _str = null; }
            this.xp.showXP(_val, _str);
        };
        HUD.prototype.addToMoney = function (_val, _str) {
            if (_str === void 0) { _str = null; }
            this.xp.showMoney(_val, _str);
        };
        HUD.prototype.addToNotifier = function (_data) {
            this.notifier.addItem(_data);
        };
        HUD.prototype.clearHUDElements = function () {
            if (this.hudElements) {
                while (this.hudElements.length > 0) {
                    this.hudElements[0].destroy();
                    this.hudElements.splice(0, 1);
                }
            }
        };
        HUD.prototype.getMiniMap = function () {
            return this.minimap;
        };
        return HUD;
    }(UIBase));
    DinogenArena.HUD = HUD;
    var HUDElement = /** @class */ (function (_super) {
        __extends(HUDElement, _super);
        function HUDElement(_hud) {
            var _this = _super.call(this) || this;
            _this.bHideOnPawnDeath = true;
            _this.tweenShowTime = _this.tweenCloseTime = 0;
            _this.hud = _hud;
            _this.hud.add(_this);
            return _this;
        }
        HUDElement.prototype.destroy = function () {
            this.hud = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement.prototype.tick = function () {
            return;
        };
        HUDElement.prototype.setHasPawn = function (_bVal) {
            if (this.bHideOnPawnDeath) {
                this.visible = _bVal;
            }
        };
        HUDElement.prototype.updatePawn = function (_pawn) {
            if (this.bHideOnPawnDeath) {
                this.visible = _pawn ? _pawn.isAlive() : false;
            }
            this.readjustToStage();
        };
        HUDElement.prototype.impulse = function () {
            var impulseTween = this.game.add.tween(this).to({ alpha: 0.1 }, 200, Phaser.Easing.Cubic.InOut, true, 0, 8, true);
        };
        return HUDElement;
    }(UIBase));
    DinogenArena.HUDElement = HUDElement;
    var HUDElement_XP = /** @class */ (function (_super) {
        __extends(HUDElement_XP, _super);
        function HUDElement_XP(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.current = 0;
            _this.timer = 0;
            _this.timerMax = 60;
            _this.id = "hud_xp";
            _this.setAlignToCenter();
            _this.offsetY = -10;
            _this.bHideOnPawnDeath = false;
            _this.xpText = _this.game.add.text(0, 0, "", { font: "20px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING, align: "center", boundsAlignH: "center", boundsAlignV: "middle" });
            //this.xpText.setTextBounds(0, 0, this.width, this.height);
            _this.xpText.position.set(_this.width * 0.5, _this.height * 0.5);
            _this.xpText.anchor.set(0.5, 0.5);
            _this.addChild(_this.xpText);
            return _this;
        }
        HUDElement_XP.prototype.destroy = function () {
            this.xpText = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_XP.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.timer > 0) {
                if (!this.bIsShowing) {
                    this.show();
                }
                this.timer--;
            }
            else {
                if (this.bIsShowing) {
                    this.current = 0;
                    this.close();
                }
            }
        };
        Object.defineProperty(HUDElement_XP.prototype, "width", {
            get: function () {
                return 300;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HUDElement_XP.prototype, "height", {
            get: function () {
                return 32;
            },
            enumerable: true,
            configurable: true
        });
        HUDElement_XP.prototype.showXP = function (_val, _str) {
            if (_str === void 0) { _str = null; }
            this.current += _val;
            this.xpText.setText((_str ? (_str + " ") : "") + "+" + DinogenArena.WilkinUtil.FormatNum(this.current) + "XP", true);
            this.xpText.scale.set(2, 2);
            this.game.add.tween(this.xpText.scale).to({ x: 1, y: 1 }, 350, Phaser.Easing.Cubic.InOut, true);
            this.timer = this.timerMax;
            this.readjustToStage();
        };
        HUDElement_XP.prototype.showMoney = function (_val, _str) {
            if (_str === void 0) { _str = null; }
            this.current += _val;
            this.xpText.setText((_str ? (_str + " ") : "") + "+$" + this.current, true);
            this.xpText.scale.set(2, 2);
            this.game.add.tween(this.xpText.scale).to({ x: 1, y: 1 }, 350, Phaser.Easing.Cubic.InOut, true);
            this.timer = this.timerMax;
            this.readjustToStage();
        };
        return HUDElement_XP;
    }(HUDElement));
    DinogenArena.HUDElement_XP = HUDElement_XP;
    var HUDElement_Notifier = /** @class */ (function (_super) {
        __extends(HUDElement_Notifier, _super);
        function HUDElement_Notifier(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.timer = 0;
            _this.timerMax = 150;
            _this.id = "hud_notifier";
            _this.bAlign = true;
            _this.setAlignToCenter();
            //this.offsetY = 300;
            _this.tweenShowTime = 0;
            _this.tweenCloseTime = 200;
            _this.bHideOnPawnDeath = false;
            _this.container = _this.game.add.group();
            _this.add(_this.container);
            _this.labelText = _this.game.add.text(0, 0, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            //this.labelText.setTextBounds(0, 0, 300, 32);
            _this.labelText.anchor.set(0.5, 0.5);
            _this.labelText.x = _this.width * 0.5;
            _this.container.addChild(_this.labelText);
            _this.descText = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            //this.descText.setTextBounds(0, 0, 300, 32);
            _this.descText.x = _this.width * 0.5;
            _this.descText.y = _this.labelText.y + (_this.labelText.height * 0.5) + 4;
            _this.descText.anchor.set(0.5, 0.5);
            _this.descText.alpha = 0.5;
            _this.container.addChild(_this.descText);
            _this.items = [];
            _this.show();
            return _this;
        }
        HUDElement_Notifier.prototype.destroy = function () {
            this.container = null;
            this.labelText = null;
            this.descText = null;
            this.items = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_Notifier.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.items.length > 0) {
                if (!this.bIsShowing) {
                    this.show();
                }
                if (this.timer > 0) {
                    this.timer--;
                }
                else {
                    this.items.splice(0, 1);
                    if (this.items.length > 0) {
                        this.showNextItem();
                    }
                }
            }
            else {
                if (this.bIsShowing) {
                    this.close();
                }
            }
        };
        HUDElement_Notifier.prototype.showNextItem = function () {
            if (this.icon) {
                this.icon.destroy();
                this.icon = null;
            }
            var cur = this.items[0];
            if (cur["sound"] != undefined) {
                DinogenArena.SoundManager.PlayUISound(cur["sound"]);
            }
            var labelStr = cur["labelText"];
            var xpStart = -1;
            if (cur["xpText"] != undefined) {
                xpStart = labelStr.length;
                labelStr += " " + cur["xpText"];
            }
            this.labelText.clearColors();
            this.labelText.setText(labelStr);
            if (xpStart >= 0) {
                this.labelText.addColor(DinogenArena.GameUtil.COLOUR_XP_STRING, xpStart);
            }
            var bHasDesc = false;
            if (cur["descText"] != undefined) {
                bHasDesc = true;
                this.descText.setText(cur["descText"]);
            }
            else {
                this.descText.setText("");
            }
            if (cur["icon"]) {
                this.icon = this.game.add.image(0, 0, (cur["atlasId"] ? cur["atlasId"] : "atlas_ui"), cur["icon"]);
                this.icon.anchor.set(0.5, 0);
                this.icon.x = this.labelText.x;
                //this.icon.y = -12;
                this.container.addChildAt(this.icon, 0);
                this.offsetY = -180;
            }
            else {
                this.offsetY = -150;
            }
            var scaleMult = 2;
            var delay = 0;
            if (this.icon) {
                this.labelText.position.y = (this.icon.y + this.icon.height) + (this.labelText.height * 0.5) + 10;
                this.icon.scale.set(0, 0);
                this.icon.alpha = 0;
                this.game.add.tween(this.icon.scale).to({ x: 1, y: 1 }, 350, Phaser.Easing.Exponential.InOut, true);
                this.game.add.tween(this.icon).to({ alpha: 1 }, 350, Phaser.Easing.Exponential.InOut, true);
                delay += 200;
            }
            else {
                this.labelText.y = 0;
            }
            this.descText.y = this.labelText.y + (this.labelText.height * 0.5) + 6;
            this.labelText.scale.set(scaleMult, scaleMult);
            this.labelText.alpha = 0;
            this.game.add.tween(this.labelText.scale).to({ x: 1, y: 1 }, 350, Phaser.Easing.Exponential.InOut, true, delay);
            this.game.add.tween(this.labelText).to({ alpha: 1 }, 350, Phaser.Easing.Exponential.InOut, true, delay);
            delay += 200;
            if (bHasDesc) {
                this.descText.scale.set(scaleMult, scaleMult);
                this.descText.alpha = 0;
                this.game.add.tween(this.descText.scale).to({ x: 1, y: 1 }, 350, Phaser.Easing.Exponential.InOut, true, delay);
                this.game.add.tween(this.descText).to({ alpha: 0.5 }, 350, Phaser.Easing.Exponential.InOut, true, delay);
            }
            if (cur["timer"]) {
                this.timer = cur["timer"];
            }
            else {
                this.timer = this.timerMax;
            }
            this.container.y = 0;
            this.readjustToStage();
        };
        HUDElement_Notifier.prototype.clearItems = function () {
            if (this.icon) {
                this.icon.destroy();
                this.icon = null;
            }
            this.items = [];
            this.timer = 0;
        };
        Object.defineProperty(HUDElement_Notifier.prototype, "width", {
            get: function () {
                return 300;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HUDElement_Notifier.prototype, "height", {
            get: function () {
                return 130;
            },
            enumerable: true,
            configurable: true
        });
        HUDElement_Notifier.prototype.addItem = function (_data) {
            //_data["timer"] = 150;
            this.items.push(_data);
            if (this.items.length == 1) {
                this.showNextItem();
            }
        };
        HUDElement_Notifier.TIMER_CHALLENGES = 180;
        return HUDElement_Notifier;
    }(HUDElement));
    DinogenArena.HUDElement_Notifier = HUDElement_Notifier;
    var HUDElement_Message = /** @class */ (function (_super) {
        __extends(HUDElement_Message, _super);
        function HUDElement_Message(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_message";
            _this.setAlignToCenter();
            _this.offsetY = 100;
            _this.bHideOnPawnDeath = false;
            _this.labelText = _this.game.add.text(0, 0, "", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center" });
            _this.addChild(_this.labelText);
            _this.show();
            return _this;
        }
        HUDElement_Message.prototype.destroy = function () {
            this.labelText = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_Message.prototype.setText = function (_str) {
            this.labelText.setText(_str);
            this.readjustToStage();
        };
        return HUDElement_Message;
    }(HUDElement));
    DinogenArena.HUDElement_Message = HUDElement_Message;
    var KeyIcon = /** @class */ (function (_super) {
        __extends(KeyIcon, _super);
        function KeyIcon() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.bg = _this.game.add.graphics();
            _this.bg.beginFill(DinogenArena.GameUtil.COLOUR_THEME, 1);
            _this.bg.drawRoundedRect(0, 0, 28, 28, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.add(_this.bg);
            _this.keyText = _this.game.add.text(0, 0, "", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.keyText.setTextBounds(0, 3, _this.bg.width, _this.bg.height);
            _this.add(_this.keyText);
            return _this;
        }
        KeyIcon.prototype.setKey = function (_key) {
            var desiredWidth = _key.length == 1 ? 28 : 64;
            if (_key.length > 1) {
                if (this.bg) {
                    this.bg.destroy();
                }
                this.bg = this.game.add.graphics();
                this.bg.beginFill(DinogenArena.GameUtil.COLOUR_THEME, 1);
                this.bg.drawRoundedRect(0, 0, desiredWidth, 28, DinogenArena.GameUtil.RECTANGLE_RADIUS);
                this.addAt(this.bg, 0);
            }
            this.keyText.setTextBounds(0, 3, desiredWidth, this.bg.height);
            this.keyText.setText(_key, true);
        };
        Object.defineProperty(KeyIcon.prototype, "width", {
            get: function () {
                return this.bg.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyIcon.prototype, "height", {
            get: function () {
                return this.bg.height;
            },
            enumerable: true,
            configurable: true
        });
        KeyIcon.prototype.destroy = function () {
            this.keyText = null;
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        return KeyIcon;
    }(Phaser.Group));
    DinogenArena.KeyIcon = KeyIcon;
    var InteractTooltip = /** @class */ (function (_super) {
        __extends(InteractTooltip, _super);
        function InteractTooltip() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.container = _this.game.add.group();
            _this.add(_this.container);
            _this.keyIcon = new KeyIcon();
            _this.container.add(_this.keyIcon);
            _this.labelText = _this.game.add.text(0, 0, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.labelText.alpha = 0.8;
            _this.labelText.x = _this.keyIcon.width + 4;
            _this.labelText.y = ((_this.keyIcon.height * 0.5) - (_this.labelText.height * 0.5)) + 2;
            _this.container.add(_this.labelText);
            _this.hide();
            return _this;
        }
        InteractTooltip.prototype.destroy = function () {
            this.labelText = null;
            this.keyIcon = null;
            _super.prototype.destroy.call(this, true);
        };
        InteractTooltip.prototype.setLabel = function (_str, _key) {
            this.labelText.setText(_str, true);
            var moneyIndex = _str.indexOf("$");
            if (moneyIndex >= 0) {
                //this.labelText.addColor(GameUtil.COLOUR_XP_STRING, moneyIndex - 1);
            }
            this.keyIcon.setKey(_key);
            var desiredWidth = (this.keyIcon.width + this.labelText.x + this.labelText.width) - 12;
            if (!this.bg || this.bg.width != desiredWidth) {
                if (this.bg) {
                    this.bg.clear();
                }
                else {
                    this.bg = this.game.add.graphics();
                    this.addAt(this.bg, 0);
                }
                this.bg.beginFill(0x000000, 0.8);
                this.bg.drawRoundedRect(0, 0, desiredWidth, 36, DinogenArena.GameUtil.RECTANGLE_RADIUS);
                this.container.x = this.container.y = (this.bg.height - this.keyIcon.height) * 0.5;
            }
        };
        InteractTooltip.prototype.show = function () {
            this.visible = true;
        };
        InteractTooltip.prototype.hide = function () {
            this.visible = false;
        };
        return InteractTooltip;
    }(Phaser.Group));
    DinogenArena.InteractTooltip = InteractTooltip;
    var HUDElement_Feed = /** @class */ (function (_super) {
        __extends(HUDElement_Feed, _super);
        function HUDElement_Feed(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_feed";
            _this.alignVertical = UIBase.ALIGN_VERTICAL_BOTTOM;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_LEFT;
            _this.offsetX = 10;
            _this.offsetY = -80;
            _this.bHideOnPawnDeath = false;
            _this.items = [];
            _this.container = _this.game.add.group();
            _this.add(_this.container);
            _this.show();
            return _this;
        }
        HUDElement_Feed.prototype.destroy = function () {
            this.clearItems();
            this.items = null;
            this.container = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_Feed.prototype.tick = function () {
            _super.prototype.tick.call(this);
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                item.tick();
                if (item.getTimer() == 0) {
                    //this.removeItem(this.items[0]);
                    item.hide();
                }
                else if (item.isPendingRemoval()) {
                    this.removeItem(this.items[0]);
                }
            }
            //this.updateItems();
        };
        HUDElement_Feed.prototype.updateItems = function () {
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                //item.y = i * (item.height + 4);
                var tween = this.game.add.tween(item).to({ y: i * (item.height + 4) }, 500, Phaser.Easing.Exponential.Out, true);
            }
            this.readjustToStage();
        };
        HUDElement_Feed.prototype.addItem = function (_data) {
            var item = new FeedItem();
            item.setData(_data);
            item.y = this.container.height + 4;
            this.container.addChild(item);
            this.items.push(item);
            var tween = this.game.add.tween(item).from({ alpha: 0, x: 100 }, 350, Phaser.Easing.Exponential.Out, true);
            if (this.items.length > HUDElement_Feed.MAX_ITEMS) {
                this.removeItem(this.items[0]);
            }
            else {
                this.updateItems();
            }
        };
        HUDElement_Feed.prototype.clearItems = function () {
            if (this.items) {
                while (this.items.length > 0) {
                    this.removeItem(this.items[0]);
                }
            }
        };
        HUDElement_Feed.prototype.removeItem = function (_item) {
            var index = this.items.indexOf(_item);
            this.container.removeChild(_item);
            if (index >= 0) {
                this.items[index].destroy();
                this.items.splice(index, 1);
            }
            this.updateItems();
        };
        Object.defineProperty(HUDElement_Feed.prototype, "width", {
            get: function () {
                return 200;
            },
            enumerable: true,
            configurable: true
        });
        HUDElement_Feed.MAX_ITEMS = 12;
        return HUDElement_Feed;
    }(HUDElement));
    DinogenArena.HUDElement_Feed = HUDElement_Feed;
    var FeedItem = /** @class */ (function (_super) {
        __extends(FeedItem, _super);
        function FeedItem() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.timer = 150;
            _this.bPendingRemoval = false;
            return _this;
        }
        FeedItem.prototype.destroy = function () {
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        FeedItem.prototype.hide = function () {
            if (!this.bPendingRemoval) {
                var tween = this.game.add.tween(this).to({ alpha: 0 }, 350, Phaser.Easing.Exponential.Out, true);
                tween.onComplete.addOnce(this.onHide);
            }
            this.timer = -1;
        };
        FeedItem.prototype.onHide = function () {
            this.bPendingRemoval = true;
            this.visible = false;
        };
        FeedItem.prototype.isPendingRemoval = function () {
            return this.bPendingRemoval;
        };
        FeedItem.prototype.tick = function () {
            if (this.timer > 0) {
                this.timer--;
            }
        };
        FeedItem.prototype.getTimer = function () {
            return this.timer;
        };
        FeedItem.prototype.setData = function (_data) {
            var container = this.game.add.group();
            this.add(container);
            var type = _data["type"];
            if (type == FeedItem.TYPE_KILL) {
                var padding = 8;
                var bSuicide = _data["bSuicide"] == true;
                if (!bSuicide) {
                    var killerText = this.game.add.text(0, 2, _data["killer"], { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#" + _data["killerColour"].toString(16) });
                    container.add(killerText);
                }
                var killedText = this.game.add.text(0, 2, _data["killed"], { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#" + _data["killedColour"].toString(16) });
                container.add(killedText);
                var weaponIcon;
                var weaponFrame = _data["weaponId"] ? _data["weaponId"] : "dinosaur";
                weaponIcon = this.game.add.image(0, 0, "atlas_weapons", weaponFrame);
                var wpnScale = 0.5;
                weaponIcon.scale.set(wpnScale, wpnScale);
                weaponIcon.anchor.set(0, 0.5);
                container.add(weaponIcon);
                if (weaponIcon) {
                    weaponIcon.alpha = 0.5;
                    weaponIcon.x = killerText ? (killerText.width + padding) : 0;
                    weaponIcon.y = (killedText.y - 2) + (killedText.height * 0.5);
                    killedText.x = weaponIcon.x + weaponIcon.width + padding;
                }
            }
            else if (type == FeedItem.TYPE_DEFAULT) {
                var newColour = "#FFFFFF";
                if (_data["team"] != undefined) {
                    newColour = "#" + DinogenArena.GameModeManager.GetColourForTeam(_data["team"]).toString(16);
                }
                var labelText = this.game.add.text(0, 2, _data["text"], { font: "12px " + DinogenArena.GameUtil.FONT, fill: newColour });
                if (newColour == "#FFFFFF") {
                    labelText.alpha = 0.5;
                }
                container.add(labelText);
            }
            var bg = this.game.add.graphics();
            bg.beginFill(0x000000, 0.65);
            bg.drawRoundedRect(0, 0, Math.round(this.width + 18), 28, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            this.addAt(bg, 0);
            container.x = (bg.width * 0.5) - (container.width * 0.5);
            container.y = (bg.height * 0.5) - (container.height * 0.5);
        };
        FeedItem.TYPE_KILL = "kill";
        FeedItem.TYPE_DEFAULT = "default";
        return FeedItem;
    }(Phaser.Group));
    DinogenArena.FeedItem = FeedItem;
    var HUDElement_PlayerInfo = /** @class */ (function (_super) {
        __extends(HUDElement_PlayerInfo, _super);
        function HUDElement_PlayerInfo(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_player_info";
            _this.alignVertical = UIBase.ALIGN_VERTICAL_BOTTOM;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_CENTER;
            _this.offsetY = -10;
            var bg = _this.game.add.graphics();
            bg.beginFill(0x000000, 0.65);
            bg.drawRoundedRect(0, 0, 400, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.add(bg);
            bg.y = _this.height - bg.height;
            _this.bar = new DinogenArena.UIBar(_this.width - 20, DinogenArena.GameModeManager.GetColourForTeam(1));
            _this.bar.height = 16;
            _this.bar.x = (_this.width * 0.5) - (_this.bar.width * 0.5);
            _this.bar.y = (bg.y + (bg.height * 0.5)) - (_this.bar.height * 0.5);
            _this.addChild(_this.bar);
            _this.healthText = _this.game.add.text(0, 0, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.healthText.anchor.set(0.5, 0.5);
            _this.updateHealthText();
            _this.addChild(_this.healthText);
            _this.perksContainer = _this.game.add.group();
            //this.perksContainer.alpha = 0.5;
            _this.add(_this.perksContainer);
            _this.show();
            return _this;
        }
        HUDElement_PlayerInfo.prototype.destroy = function () {
            this.bar.destroy();
            this.bar = null;
            this.healthText = null;
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(HUDElement_PlayerInfo.prototype, "height", {
            get: function () {
                return 72;
            },
            enumerable: true,
            configurable: true
        });
        HUDElement_PlayerInfo.prototype.setPawnTeam = function (_val) {
            this.bar.setBarColour(DinogenArena.GameModeManager.GetColourForTeam(_val));
        };
        HUDElement_PlayerInfo.prototype.updatePawn = function (_pawn) {
            _super.prototype.updatePawn.call(this, _pawn);
            var percent = _pawn.getHealthPercent();
            this.bar.setBarScale(percent, true);
            this.healthText.setText(Math.ceil(percent * 100) + "%", true); //2764
        };
        HUDElement_PlayerInfo.prototype.setPerks = function (_perks) {
            this.perksContainer.removeAll(true);
            var padding = 4;
            var iconScale = 0.35;
            for (var i = 0; i < _perks.length; i++) {
                var perk = _perks[i];
                var icon = this.game.add.image(0, 0, "atlas_ui", perk.id);
                icon.scale.set(iconScale, iconScale);
                icon.x = (i * (icon.width + 12)) + padding;
                icon.y = padding;
                this.perksContainer.add(icon);
            }
            if (_perks.length > 0) {
                var gfx = this.game.add.graphics();
                gfx.beginFill(0x000000, 0.65);
                gfx.drawRoundedRect(0, 0, this.perksContainer.width + (padding * 2), this.perksContainer.height + (padding * 2), DinogenArena.GameUtil.RECTANGLE_RADIUS);
                var img = this.game.add.image(0, 0, gfx.generateTexture());
                this.perksContainer.addAt(img, 0);
                gfx.destroy();
            }
            this.updateHealthText();
            this.perksContainer.x = Math.round((this.width * 0.5) - (this.perksContainer.width * 0.5));
            this.readjustToStage();
        };
        HUDElement_PlayerInfo.prototype.updateHealthText = function () {
            this.healthText.position.set(this.bar.width * 0.5, this.bar.y + (this.bar.height * 0.5) + 3);
        };
        return HUDElement_PlayerInfo;
    }(HUDElement));
    DinogenArena.HUDElement_PlayerInfo = HUDElement_PlayerInfo;
    var HUDElement_Vox = /** @class */ (function (_super) {
        __extends(HUDElement_Vox, _super);
        function HUDElement_Vox(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_vox";
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_CENTER;
            _this.alignVertical = UIBase.ALIGN_VERTICAL_BOTTOM;
            _this.offsetY = -80;
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 600, 80, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.add(_this.bg);
            _this.text = _this.game.add.text(0, 4, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center", boundsAlignV: "middle", wordWrap: true, wordWrapWidth: _this.bg.width });
            _this.text.setTextBounds(0, 0, _this.bg.width, _this.bg.height);
            _this.add(_this.text);
            return _this;
            //this.readjustToStage();
        }
        HUDElement_Vox.prototype.destroy = function () {
            this.bg = null;
            this.text = null;
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(HUDElement_Vox.prototype, "width", {
            get: function () {
                return this.bg.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HUDElement_Vox.prototype, "height", {
            get: function () {
                return this.bg.height;
            },
            enumerable: true,
            configurable: true
        });
        HUDElement_Vox.prototype.showText = function (_val) {
            this.show();
            this.text.setText(_val, true);
        };
        return HUDElement_Vox;
    }(HUDElement));
    DinogenArena.HUDElement_Vox = HUDElement_Vox;
    var HUDElement_Allies = /** @class */ (function (_super) {
        __extends(HUDElement_Allies, _super);
        function HUDElement_Allies(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_allies";
            _this.alignVertical = UIBase.ALIGN_VERTICAL_TOP;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_LEFT;
            _this.offsetX = 10;
            _this.offsetY = 162;
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0x000000, 0.65);
            graphics.drawRoundedRect(0, 0, 182, 50, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.add(_this.bg);
            return _this;
        }
        HUDElement_Allies.prototype.destroy = function () {
            this.bg = null;
            this.helicopter = null;
            this.container = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_Allies.prototype.setHelicopter = function (_heli) {
            this.helicopter = _heli;
            this.container = this.game.add.group();
            this.add(this.container);
            this.heliIcon = this.game.add.image(0, 0, "atlas_ui", "heli_" + _heli.getHeliType());
            this.heliIcon.scale.set(0.45, 0.45);
            this.container.add(this.heliIcon);
            this.heliBar = new DinogenArena.UIBar(70, 0xFFFFFF);
            this.heliBar.height = 2;
            this.heliBar.x = this.heliIcon.x + this.heliIcon.width + 8;
            this.heliBar.y = (this.heliIcon.height * 0.5) - (this.heliBar.height * 0.5);
            this.container.add(this.heliBar);
            this.container.x = (this.bg.width * 0.5) - (this.container.width * 0.5);
            this.container.y = (this.bg.height * 0.5) - (this.container.height * 0.5);
            this.show();
        };
        HUDElement_Allies.prototype.removeHelicopter = function () {
            this.helicopter = null;
            this.heliBar = null;
            this.heliIcon = null;
            this.container.destroy();
            this.container = null;
            this.close();
        };
        HUDElement_Allies.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.helicopter) {
                if (this.heliBar) {
                    var val = this.helicopter.getActivePercent();
                    this.heliBar.setBarScale(val, true);
                    this.heliIcon.alpha = val > 0 ? 1 : 0.1;
                }
            }
        };
        return HUDElement_Allies;
    }(HUDElement));
    DinogenArena.HUDElement_Allies = HUDElement_Allies;
    var HUDElement_Quests = /** @class */ (function (_super) {
        __extends(HUDElement_Quests, _super);
        function HUDElement_Quests(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_quests";
            _this.alignVertical = UIBase.ALIGN_VERTICAL_TOP;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_LEFT;
            _this.offsetX = 10;
            _this.offsetY = 162;
            _this.container = _this.game.add.group();
            _this.add(_this.container);
            var padding = HUDElement_Quests.CONTAINER_PADDING;
            _this.questsContainer = _this.game.add.group();
            _this.questsContainer.x = padding;
            _this.questsContainer.y = padding;
            _this.container.add(_this.questsContainer);
            return _this;
            //this.show();
        }
        HUDElement_Quests.prototype.destroy = function () {
            this.bg = null;
            this.questsContainer = null;
            this.containerTween = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_Quests.prototype.updateQuests = function (_quests) {
            this.questsContainer.removeAll(true);
            if (_quests) {
                if (!this.isShowing()) {
                    this.show();
                }
                var count = 0;
                for (var i = 0; i < _quests.length; i++) {
                    var quest = _quests[i];
                    if (quest["bVisible"] != false) {
                        var bQuestComplete = quest["bComplete"];
                        if (bQuestComplete) {
                            continue;
                        }
                        count++;
                        var questItem = this.game.add.group();
                        var nameText = this.game.add.text(0, 0, quest["name"] + (bQuestComplete ? " \u2714" : ""), { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                        questItem.add(nameText);
                        var rewards = quest["rewards"];
                        if (rewards) {
                            var rewardsString = "Rewards: " + DinogenArena.WilkinUtil.FormatNum(rewards["xp"]) + "XP  /  $" + DinogenArena.WilkinUtil.FormatNum(rewards["money"]);
                            if (rewards["weapon"]) {
                                rewardsString += "  /  New Weapon";
                            }
                            var rewardsText = this.game.add.text(0, questItem.height - 4, rewardsString, { font: "12px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
                            questItem.add(rewardsText);
                        }
                        var descText = this.game.add.text(0, questItem.height - 4, quest["desc"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                        descText.alpha = 0.5;
                        questItem.add(descText);
                        var objectives = quest["objectives"];
                        for (var j = 0; j < objectives.length; j++) {
                            var curObjective = objectives[j];
                            var bComplete = curObjective["bComplete"] == true;
                            if (bComplete) {
                                continue;
                            }
                            var objText = this.game.add.text(8, questItem.height + 4, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: bComplete ? DinogenArena.GameUtil.COLOUR_NEW_STRING : "#FFFFFF", boundsAlignV: "bottom" });
                            objText.setTextBounds(0, 0, 240, 24);
                            var useText = (bComplete ? "\u2611 " : "\u2610 ") + curObjective["name"];
                            if (!bComplete) {
                                if (curObjective["type"] == "progress_num") {
                                    useText += " - " + curObjective["progress"] + "/" + curObjective["progressMax"];
                                }
                            }
                            if (curObjective["bShowBar"] == true) {
                                var bar = new DinogenArena.UIBar((HUDElement_Quests.CONTAINER_WIDTH - ((HUDElement_Quests.CONTAINER_PADDING * 3) + objText.x)), bComplete ? DinogenArena.GameUtil.COLOUR_NEW : 0xFFFFFF);
                                bar.height = 2;
                                bar.position.set(objText.x, (objText.y + objText.height));
                                bar.setBarScale(curObjective["progress"] / curObjective["progressMax"], true);
                                questItem.add(bar);
                            }
                            objText.setText(useText, true);
                            objText.alpha = 1; //bComplete ? 0.8 : 1;
                            questItem.add(objText);
                        }
                        var itemHeight = 20; //questItem.height
                        questItem.y = i * (itemHeight + (HUDElement_Quests.CONTAINER_PADDING * 2));
                        this.questsContainer.add(questItem);
                    }
                }
                if (count == 0) {
                    if (this.isShowing()) {
                        this.close();
                    }
                }
                else {
                    var desiredWidth = Math.max(HUDElement_Quests.CONTAINER_WIDTH, this.questsContainer.width + (HUDElement_Quests.CONTAINER_PADDING * 2));
                    var desiredHeight = this.questsContainer.height + (HUDElement_Quests.CONTAINER_PADDING * 2);
                    if (this.bg) {
                        this.bg.destroy();
                    }
                    var graphics = this.game.add.graphics();
                    graphics.beginFill(0x000000, 0.5);
                    graphics.drawRoundedRect(0, 0, desiredWidth, desiredHeight, DinogenArena.GameUtil.RECTANGLE_RADIUS);
                    this.bg = this.game.add.image(0, 0, graphics.generateTexture());
                    graphics.destroy();
                    this.container.addAt(this.bg, 0);
                }
            }
            else {
                if (this.isShowing()) {
                    this.close();
                }
            }
        };
        HUDElement_Quests.CONTAINER_PADDING = 12;
        HUDElement_Quests.CONTAINER_WIDTH = 220;
        return HUDElement_Quests;
    }(HUDElement));
    DinogenArena.HUDElement_Quests = HUDElement_Quests;
    var HUDElement_MiniMap = /** @class */ (function (_super) {
        __extends(HUDElement_MiniMap, _super);
        function HUDElement_MiniMap(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_minimap";
            _this.alignVertical = UIBase.ALIGN_VERTICAL_TOP;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_LEFT;
            _this.offsetX = 10;
            _this.offsetY = 10;
            var sizeWidth = 182;
            var sizeHeight = 144;
            var masker = _this.game.add.graphics(0, 0);
            masker.beginFill(0xFF0000, 0.65);
            masker.drawRoundedRect(0, 0, sizeWidth, sizeHeight, DinogenArena.GameUtil.RECTANGLE_RADIUS); //182, 128            
            _this.add(masker);
            _this.minimap = new MiniMap();
            _this.add(_this.minimap);
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0x000000, 0.65);
            graphics.drawRoundedRect(0, 0, sizeWidth, sizeHeight, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.addAt(_this.bg, 0);
            _this.minimap.mask = masker;
            _this.show();
            return _this;
        }
        HUDElement_MiniMap.prototype.destroy = function () {
            this.bg = null;
            if (this.minimap) {
                this.minimap.destroy();
                this.minimap = null;
            }
            _super.prototype.destroy.call(this);
        };
        HUDElement_MiniMap.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.bIsShowing) {
                var gameState = DinogenArena.GameUtil.GetGameState();
                /* This should be optimized, maybe not created every frame */
                var arr = gameState.pawns.concat(gameState.interactables);
                var koth = DinogenArena.GameUtil.GetGameState().gameMode.getKOTH();
                if (koth) {
                    arr.push(koth.getHillZone());
                }
                this.minimap.updateMap(gameState.world.x, gameState.world.y, arr);
            }
        };
        HUDElement_MiniMap.prototype.setTeam = function (_team) {
            this.minimap.setTeam(_team);
        };
        return HUDElement_MiniMap;
    }(HUDElement));
    DinogenArena.HUDElement_MiniMap = HUDElement_MiniMap;
    var MiniMap = /** @class */ (function (_super) {
        __extends(MiniMap, _super);
        function MiniMap() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.team = -1;
            _this.graphics = _this.game.add.graphics();
            _this.add(_this.graphics);
            if (!DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                _this.map = _this.game.add.image(0, 0, "atlas_map_overlays", DinogenArena.GameUtil.GetGameState().mapData["id"]);
                _this.map.alpha = 0.5;
                _this.add(_this.map);
            }
            _this.items = [];
            return _this;
        }
        MiniMap.prototype.destroy = function () {
            this.graphics.destroy();
            this.graphics = null;
            this.map = null;
            this.removeAllItems();
            this.items = null;
            _super.prototype.destroy.call(this);
        };
        MiniMap.prototype.setTeam = function (_team) {
            this.team = _team;
        };
        MiniMap.prototype.addItem = function (_obj) {
            var icon = this.game.add.image(0, 0, "atlas_ui", _obj.getMinimapIconId());
            icon.anchor.set(0.5, 0.5);
            var scale = _obj.getMinimapIconScale();
            icon.scale.set(scale, scale);
            this.add(icon);
            var data = { obj: _obj, icon: icon };
            this.items.push(data);
            return data;
        };
        MiniMap.prototype.removeItemByObject = function (_obj) {
            for (var i = 0; i < this.items.length; i++) {
                var cur = this.items[i];
                if (cur["obj"] == _obj) {
                    cur["icon"].destroy();
                    this.items.splice(i, 1);
                    break;
                }
            }
        };
        MiniMap.prototype.removeAllItems = function () {
            while (this.items.length > 0) {
                this.items[0]["icon"].destroy();
                this.items.splice(0, 1);
            }
        };
        MiniMap.prototype.updateMap = function (_x, _y, _arr) {
            this.removeAllItems();
            for (var i = 0; i < _arr.length; i++) {
                var curItem = _arr[i];
                var pawn = curItem instanceof DinogenArena.Pawn ? curItem : null;
                if (pawn && !pawn.isAlive()) {
                    continue;
                }
                else {
                    if (!curItem.showOnMinimap()) {
                        continue;
                    }
                    var cur = this.addItem(curItem);
                    var newIcon = cur["icon"];
                    var tint = 0xFFCC33;
                    if (pawn) {
                        if (pawn.isPlayer()) {
                            tint = 0xFFFFFF;
                        }
                        else if (pawn.getTeam() == this.team) {
                            tint = DinogenArena.GameUtil.COLOUR_ALLY;
                        }
                        else {
                            tint = DinogenArena.GameUtil.COLOUR_ENEMY;
                        }
                    }
                    else if (curItem instanceof DinogenArena.Flag) {
                        var flag = curItem;
                        if (flag) {
                            tint = DinogenArena.GameModeManager.GetColourForTeam(flag.getTeam());
                        }
                    }
                    newIcon.tint = tint;
                }
            }
            for (var i = 0; i < this.items.length; i++) {
                var cur = this.items[i];
                var icon = cur["icon"];
                var obj = cur["obj"];
                icon.position.set((obj.x * MiniMap.MINIMAP_SCALE), (obj.y * MiniMap.MINIMAP_SCALE));
                if (obj.rotateMinimapIcon()) {
                    icon.rotation = obj.rotation;
                }
            }
            this.x = (_x * MiniMap.MINIMAP_SCALE) + 46; //(184 / 4);
            this.y = (_y * MiniMap.MINIMAP_SCALE) + 36; //(128 / 4);
        };
        MiniMap.MINIMAP_SCALE = 0.1;
        return MiniMap;
    }(Phaser.Group));
    DinogenArena.MiniMap = MiniMap;
    var HUDElement_DamageOverlay = /** @class */ (function (_super) {
        __extends(HUDElement_DamageOverlay, _super);
        function HUDElement_DamageOverlay(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.desiredDamageAlpha = 0;
            _this.id = "hud_damage_overlay";
            _this.bHideOnPawnDeath = false;
            /*
            var graphics: Phaser.Graphics = this.game.add.graphics(0, 0);
            graphics.beginFill(0xFF0000, 0.5);
            graphics.drawRect(0, 0, 32, 32);
            */
            _this.overlay = _this.game.add.image(0, 0, "hud_overlay_damage");
            //graphics.destroy();
            //this.overlay.width = this.game.scale.width;
            //this.overlay.height = this.game.scale.height;
            _this.overlay.alpha = 0;
            _this.addChild(_this.overlay);
            _this.show();
            return _this;
        }
        HUDElement_DamageOverlay.prototype.destroy = function () {
            this.overlay = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_DamageOverlay.prototype.setHasPawn = function (_bVal) {
            _super.prototype.setHasPawn.call(this, _bVal);
            if (!_bVal) {
                this.desiredDamageAlpha = 0;
            }
        };
        HUDElement_DamageOverlay.prototype.updatePawn = function (_pawn) {
            _super.prototype.updatePawn.call(this, _pawn);
            var percent = _pawn.getHealthPercent();
            if (percent <= 0.5) {
                this.desiredDamageAlpha = (1 - percent); // * 0.8
            }
            else {
                this.desiredDamageAlpha = 0;
            }
        };
        HUDElement_DamageOverlay.prototype.tick = function () {
            _super.prototype.tick.call(this);
            this.overlay.alpha -= (this.overlay.alpha - this.desiredDamageAlpha) * 0.1;
            if (this.overlay.alpha <= 0) {
                if (this.overlay.visible) {
                    this.overlay.visible = false;
                }
            }
        };
        HUDElement_DamageOverlay.prototype.showDamage = function () {
            this.overlay.visible = true;
            this.overlay.alpha = 1;
        };
        HUDElement_DamageOverlay.prototype.hideDamage = function () {
            this.overlay.visible = false;
            this.overlay.alpha = 0;
        };
        return HUDElement_DamageOverlay;
    }(HUDElement));
    DinogenArena.HUDElement_DamageOverlay = HUDElement_DamageOverlay;
    var HUDElement_Inventory = /** @class */ (function (_super) {
        __extends(HUDElement_Inventory, _super);
        function HUDElement_Inventory(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_inventory";
            _this.alignVertical = UIBase.ALIGN_VERTICAL_TOP;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_RIGHT;
            _this.offsetX = -10;
            _this.offsetY = 10;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 200, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.addChild(_this.bg);
            var padding = 4;
            _this.nameText = _this.game.add.text(0, 0, "Weapon", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignV: "middle" });
            _this.nameText.setTextBounds(0, 0, _this.bg.width, _this.bg.height);
            _this.nameText.position.set(4, 4);
            _this.addChild(_this.nameText);
            _this.ammoText = _this.game.add.text(0, 0, "9999", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left", boundsAlignV: "middle" });
            _this.ammoText.setTextBounds(0, 0, 50, _this.bg.height);
            _this.ammoText.position.set((_this.bg.x + _this.bg.width) - (_this.ammoText.textBounds.width), 4);
            _this.ammoText.alpha = 0.5;
            _this.addChild(_this.ammoText);
            _this.magText = _this.game.add.text(0, 0, "999", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "right", boundsAlignV: "middle" });
            _this.magText.setTextBounds(0, 0, 50, _this.bg.height);
            _this.magText.position.set((_this.ammoText.x - _this.ammoText.textBounds.width), 4);
            _this.addChild(_this.magText);
            _this.invItems = [];
            _this.invContainer = _this.game.add.group();
            _this.invContainer.y = 32 + HUDElement_Inventory.INVENTORY_PADDING;
            _this.addChild(_this.invContainer);
            _this.show();
            return _this;
        }
        HUDElement_Inventory.prototype.destroy = function () {
            this.invContainer.destroy(true);
            this.invContainer = null;
            this.bg = null;
            this.nameText = null;
            this.magText = null;
            this.ammoText = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_Inventory.prototype.updateAmmo = function (_firearm) {
            if (_firearm) {
                this.nameText.setText(_firearm.getName().toString(), true);
                this.magText.setText(_firearm.getMag().toString(), true);
                this.ammoText.setText("/" + _firearm.getAmmo().toString(), true);
            }
            else {
                this.nameText.setText("");
                this.magText.setText("");
                this.ammoText.setText("");
            }
        };
        HUDElement_Inventory.prototype.updatePawn = function (_pawn) {
            _super.prototype.updatePawn.call(this, _pawn);
            if (_pawn.isAlive()) {
                if (_pawn instanceof DinogenArena.Character) {
                    var char = _pawn;
                    var inv = char.getInventoryItems();
                    this.setInventory(inv);
                    this.setSelectedInventoryItem(char.getCurrentInventoryIndex());
                }
                else {
                    this.hud.removeElement(this);
                }
            }
        };
        HUDElement_Inventory.prototype.setInventory = function (_inv) {
            if (_inv) {
                this.clearInvItems();
                for (var i = 0; i < _inv.length; i++) {
                    var hudItem = new HUDItem();
                    hudItem.setItem(_inv[i], i + 1);
                    hudItem.y = i * (hudItem.height + HUDElement_Inventory.INVENTORY_PADDING);
                    this.invContainer.addChild(hudItem);
                    this.invItems.push(hudItem);
                }
            }
        };
        HUDElement_Inventory.prototype.setSelectedInventoryItem = function (_index) {
            for (var i = 0; i < this.invItems.length; i++) {
                this.invItems[i].setSelected(i == _index);
            }
        };
        HUDElement_Inventory.prototype.clearInvItems = function () {
            if (this.invItems) {
                while (this.invItems.length > 0) {
                    this.invItems[0].destroy();
                    this.invItems.splice(0, 1);
                }
            }
        };
        HUDElement_Inventory.INVENTORY_PADDING = 2;
        return HUDElement_Inventory;
    }(HUDElement));
    DinogenArena.HUDElement_Inventory = HUDElement_Inventory;
    var HUDElement_GameMode = /** @class */ (function (_super) {
        __extends(HUDElement_GameMode, _super);
        function HUDElement_GameMode(_hud) {
            var _this = _super.call(this, _hud) || this;
            _this.id = "hud_game_mode";
            _this.alignVertical = UIBase.ALIGN_VERTICAL_TOP;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_CENTER;
            _this.offsetY = 10;
            _this.bHideOnPawnDeath = true;
            var gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
            if (gameMode instanceof DinogenArena.GameMode_TeamDeathmatch) {
                _this.gameModeContainer = new HUDGameModeContainer_TeamDeathmatch(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            else if (gameMode instanceof DinogenArena.GameMode_Deathmatch) {
                _this.gameModeContainer = new HUDGameModeContainer_Deathmatch(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            else if (gameMode instanceof DinogenArena.GameMode_CaptureTheFlag) {
                _this.gameModeContainer = new HUDGameModeContainer_CaptureTheFlag(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            else if (gameMode instanceof DinogenArena.GameMode_Evolution) {
                _this.gameModeContainer = new HUDGameModeContainer_Evolution(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            else if (gameMode instanceof DinogenArena.GameMode_DinoHunt) {
                _this.gameModeContainer = new HUDGameModeContainer_DinoHunt(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            else if (gameMode instanceof DinogenArena.GameMode_KingOfTheHill) {
                _this.gameModeContainer = new HUDGameModeContainer_KingOfTheHill(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            else if (gameMode instanceof DinogenArena.GameMode_Rex) {
                _this.gameModeContainer = new HUDGameModeContainer_Rex(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            else if (gameMode instanceof DinogenArena.GameMode_Survival) {
                _this.gameModeContainer = new HUDGameModeContainer_Survival(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            else if (gameMode instanceof DinogenArena.GameMode_Campaign) {
                _this.gameModeContainer = new HUDGameModeContainer_Campaign(DinogenArena.GameUtil.GetGameState().gameMode);
            }
            if (_this.gameModeContainer) {
                _this.add(_this.gameModeContainer);
            }
            _this.show();
            return _this;
        }
        HUDElement_GameMode.prototype.destroy = function () {
            this.gameModeContainer = null;
            _super.prototype.destroy.call(this);
        };
        HUDElement_GameMode.prototype.tick = function () {
            _super.prototype.tick.call(this);
            if (this.gameModeContainer) {
                this.gameModeContainer.tick();
            }
        };
        return HUDElement_GameMode;
    }(HUDElement));
    DinogenArena.HUDElement_GameMode = HUDElement_GameMode;
    var HUDGameModeContainer = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer, _super);
        function HUDGameModeContainer(_gameMode) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.gameMode = _gameMode;
            return _this;
        }
        HUDGameModeContainer.prototype.destroy = function () {
            this.gameMode = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer.prototype.tick = function () {
            return;
        };
        return HUDGameModeContainer;
    }(Phaser.Group));
    DinogenArena.HUDGameModeContainer = HUDGameModeContainer;
    var HUDGameModeContainer_Survival = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_Survival, _super);
        function HUDGameModeContainer_Survival(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            _this.survival = _this.gameMode;
            var totalWidth = _this.width;
            var bg = _this.game.add.graphics();
            bg.beginFill(0x000000, 0);
            bg.drawRect(0, 0, totalWidth, 100);
            _this.add(bg);
            _this.labelText = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.setTextBounds(0, 0, _this.width, 24);
            _this.labelText.alpha = 0.5;
            _this.add(_this.labelText);
            _this.enemyBar = new DinogenArena.UIBar(totalWidth, 0xFFFFFF);
            _this.enemyBar.height = 4;
            _this.enemyBar.position.set(0, (_this.labelText.y + _this.labelText.height) - 4);
            _this.add(_this.enemyBar);
            _this.moneyText = _this.game.add.text(0, 0, "", { font: "24px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING, boundsAlignV: "middle", boundsAlignH: "center" });
            _this.moneyText.setTextBounds(0, 0, _this.width, 24);
            _this.moneyText.y = (_this.enemyBar.y + _this.enemyBar.height) + 5;
            _this.add(_this.moneyText);
            _this.scoreText = _this.game.add.text(0, 0, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.scoreText.setTextBounds(0, 0, _this.width, 18);
            _this.scoreText.y = (_this.moneyText.y + _this.moneyText.textBounds.height);
            _this.add(_this.scoreText);
            _this.timeContainer = _this.game.add.group();
            _this.add(_this.timeContainer);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 64, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.timeBg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.timeContainer.add(_this.timeBg);
            _this.timeText = _this.game.add.text(0, 0, "", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.timeText.anchor.set(0.5, 0.5);
            _this.timeText.position.set(_this.timeBg.x + (_this.timeBg.width * 0.5), _this.timeBg.y + (_this.timeBg.height * 0.5) + 4);
            _this.timeContainer.add(_this.timeText);
            _this.timeContainer.x = (_this.width * 0.5) - (_this.timeContainer.width * 0.5);
            _this.timeContainer.y = _this.scoreText.y + _this.scoreText.textBounds.height;
            return _this;
        }
        HUDGameModeContainer_Survival.prototype.destroy = function () {
            this.timeText = null;
            this.timeBg = null;
            this.labelText = null;
            this.survival = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer_Survival.prototype.tick = function () {
            if (this.timeText.visible) {
                var timeStr;
                var waveStr;
                var curWave = this.survival.getCurrentWave();
                var bIntermission = this.survival.isIntermission();
                this.timeContainer.visible = bIntermission;
                if (bIntermission) {
                    timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.getIntermissionTimer() / DinogenArena.GameUtil.frameRate);
                    waveStr = curWave > 0 ? "Intermission" : "Get Ready";
                    this.timeText.setText(timeStr);
                }
                else {
                    timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(0);
                    waveStr = "Wave " + curWave;
                }
                this.enemyBar.setBarScale(this.survival.getCurrentWaveProgress(), true);
                this.survival.getUserPlayer().getKills();
                var playerKills = this.survival.getPlayerKills();
                this.labelText.setText(waveStr, true);
                this.scoreText.setText(DinogenArena.WilkinUtil.FormatNum(this.survival.getUserPlayer().getKills()) + " kills", true);
                this.moneyText.setText("$" + DinogenArena.WilkinUtil.FormatNum(this.survival.getSurvivalMoney()), true);
            }
        };
        Object.defineProperty(HUDGameModeContainer_Survival.prototype, "width", {
            get: function () {
                return 400;
            },
            enumerable: true,
            configurable: true
        });
        return HUDGameModeContainer_Survival;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_Survival = HUDGameModeContainer_Survival;
    var HUDGameModeContainer_Campaign = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_Campaign, _super);
        function HUDGameModeContainer_Campaign(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            var graphics = _this.game.add.graphics();
            //graphics.beginFill(0xFFFFFF, 0);
            graphics.drawRect(0, 0, 300, 50);
            _this.add(graphics);
            //this.xpBar = new XPBar(this.width, false);
            //this.add(this.xpBar);
            //this.moneyText = this.game.add.text(0, this.xpBar.height, "", { font: "18px " + GameUtil.FONT, fill: GameUtil.COLOUR_XP_STRING, boundsAlignH: "center" });
            //this.moneyText.setTextBounds(0, 0, this.width, 32);
            //this.add(this.moneyText);
            _this.updateMoney();
            _this.updateXPBar();
            return _this;
        }
        HUDGameModeContainer_Campaign.prototype.updateMoney = function () {
            //var money: number = GameUtil.GetGameState().gameMode.getCampaign().getStoryMoney();
            //this.moneyText.setText("$" + WilkinUtil.FormatNum(money), true);
        };
        HUDGameModeContainer_Campaign.prototype.updateXPBar = function () {
            //this.xpBar.updateForPlayer();
        };
        HUDGameModeContainer_Campaign.prototype.destroy = function () {
            //this.xpBar.destroy();
            //this.remove(this.xpBar);
            //this.xpBar = null;
            //this.moneyText.destroy();
            //this.moneyText = null;
            _super.prototype.destroy.call(this);
        };
        return HUDGameModeContainer_Campaign;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_Campaign = HUDGameModeContainer_Campaign;
    var HUDGameModeContainer_DinoHunt = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_DinoHunt, _super);
        function HUDGameModeContainer_DinoHunt(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            var padding = 4;
            _this.hunterBar = new DinogenArena.UIBar(150, DinogenArena.GameModeManager.GetColourForTeam(0));
            _this.hunterBar.height = 4;
            _this.add(_this.hunterBar);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 64, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.timeBg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.timeBg.anchor.set(0.5, 0);
            _this.timeBg.position.x = 75;
            _this.addChild(_this.timeBg);
            _this.timeText = _this.game.add.text(0, 0, "-", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.timeText.anchor.set(0.5, 0.5);
            _this.timeText.position.set(_this.timeBg.x, _this.timeBg.y + (_this.timeBg.height * 0.5) + 4);
            _this.addChild(_this.timeText);
            _this.labelText = _this.game.add.text(0, 0, _this.gameMode.info["name"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.timeBg.x, (_this.timeBg.height) + 2);
            _this.labelText.alpha = 0.5;
            _this.addChild(_this.labelText);
            _this.hunterBar.y = _this.labelText.y + _this.labelText.height;
            _this.hunterBar.setBarScale(0, true);
            _this.killsText = _this.game.add.text(0, 0, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.killsText.alpha = 0.5;
            _this.killsText.anchor.set(0.5, 0);
            _this.killsText.position.set(_this.hunterBar.x + (_this.hunterBar.width * 0.5), _this.hunterBar.y + (_this.hunterBar.height) + 4);
            _this.add(_this.killsText);
            return _this;
        }
        HUDGameModeContainer_DinoHunt.prototype.destroy = function () {
            this.timeText = null;
            this.timeBg = null;
            this.labelText = null;
            this.hunterBar.destroy();
            this.hunterBar = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer_DinoHunt.prototype.tick = function () {
            var timeStr;
            if (!this.gameMode.matchHasStarted()) {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.preMatchTimer / DinogenArena.GameUtil.frameRate);
            }
            else {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.timeRemaining / DinogenArena.GameUtil.frameRate);
            }
            this.timeText.setText(timeStr);
            this.updateHunterBar();
        };
        HUDGameModeContainer_DinoHunt.prototype.updateHunterBar = function () {
            var hunt = this.gameMode;
            if (hunt) {
                this.hunterBar.setBarScale(hunt.getHunterKills() / hunt.getHunterKillsMax());
                this.killsText.setText("Hunter Kills: " + hunt.getHunterKills() + "/" + hunt.getHunterKillsMax());
            }
        };
        return HUDGameModeContainer_DinoHunt;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_DinoHunt = HUDGameModeContainer_DinoHunt;
    var HUDGameModeContainer_KingOfTheHill = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_KingOfTheHill, _super);
        function HUDGameModeContainer_KingOfTheHill(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            var padding = 4;
            _this.scoreBar = new DinogenArena.UIBar(150, DinogenArena.GameModeManager.GetColourForTeam(0));
            _this.scoreBar.height = 4;
            _this.add(_this.scoreBar);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 64, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.timeBg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.timeBg.anchor.set(0.5, 0);
            _this.timeBg.position.x = 75;
            _this.addChild(_this.timeBg);
            _this.timeText = _this.game.add.text(0, 0, "-", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.timeText.anchor.set(0.5, 0.5);
            _this.timeText.position.set(_this.timeBg.x, _this.timeBg.y + (_this.timeBg.height * 0.5) + 4);
            _this.addChild(_this.timeText);
            _this.labelText = _this.game.add.text(0, 0, _this.gameMode.info["name"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.timeBg.x, (_this.timeBg.height) + 2);
            _this.labelText.alpha = 0.5;
            _this.addChild(_this.labelText);
            _this.scoreBar.y = _this.labelText.y + _this.labelText.height;
            _this.scoreBar.setBarScale(0, true);
            _this.placeText = _this.game.add.text(_this.scoreBar.width * 0.5, _this.scoreBar.y + _this.scoreBar.height, "", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.placeText.anchor.set(0.5, 0);
            _this.addChild(_this.placeText);
            _this.scoreText = _this.game.add.text(_this.placeText.x, (_this.placeText.y + _this.placeText.height) - 6, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.scoreText.anchor.set(0.5, 0);
            _this.scoreText.alpha = 0.5;
            _this.addChild(_this.scoreText);
            return _this;
        }
        HUDGameModeContainer_KingOfTheHill.prototype.destroy = function () {
            this.timeText = null;
            this.timeBg = null;
            this.labelText = null;
            this.scoreBar.destroy();
            this.scoreBar = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer_KingOfTheHill.prototype.tick = function () {
            var timeStr;
            if (!this.gameMode.matchHasStarted()) {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.preMatchTimer / DinogenArena.GameUtil.frameRate);
            }
            else {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.timeRemaining / DinogenArena.GameUtil.frameRate);
            }
            this.timeText.setText(timeStr);
            this.updateScoreBar();
        };
        HUDGameModeContainer_KingOfTheHill.prototype.updateScoreBar = function () {
            var king = this.gameMode;
            if (king) {
                var user = this.gameMode.getUserPlayer();
                var percent = user.getHillPoints() / king.getScoreLimit();
                this.scoreBar.setBarScale(percent, true);
                this.scoreText.setText(Math.round(percent * 100) + "%", true);
                var placement = king.getPlaceForPlayer(king.getUserPlayer());
                this.placeText.setText(placement + DinogenArena.WilkinUtil.GetOrdinalString(placement));
            }
        };
        return HUDGameModeContainer_KingOfTheHill;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_KingOfTheHill = HUDGameModeContainer_KingOfTheHill;
    var HUDGameModeContainer_Evolution = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_Evolution, _super);
        function HUDGameModeContainer_Evolution(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            var padding = 4;
            _this.tierBar = new DinogenArena.UIBar(150, DinogenArena.GameModeManager.GetColourForTeam(1));
            _this.tierBar.height = 8;
            _this.add(_this.tierBar);
            /*
            this.killBar = new UIBar(80, GameModeManager.GetColourForTeam(1));
            this.killBar.height = 2;
            this.add(this.killBar);
            */
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 64, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.timeBg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.timeBg.anchor.set(0.5, 0);
            _this.timeBg.position.x = 75;
            _this.addChild(_this.timeBg);
            _this.timeText = _this.game.add.text(0, 0, "-", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.timeText.anchor.set(0.5, 0.5);
            _this.timeText.position.set(_this.timeBg.x, _this.timeBg.y + (_this.timeBg.height * 0.5) + 4);
            _this.addChild(_this.timeText);
            _this.labelText = _this.game.add.text(0, 0, _this.gameMode.info["name"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.timeBg.x, (_this.timeBg.height) + 2);
            _this.labelText.alpha = 0.5;
            _this.addChild(_this.labelText);
            _this.tierBar.y = _this.labelText.y + _this.labelText.height + 2;
            _this.tierBar.setBarScale(0, true);
            _this.dinoText = _this.game.add.text(0, 0, "Dino", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.dinoText.alpha = 0.5;
            _this.dinoText.anchor.set(0.5, 0);
            _this.dinoText.position.set(_this.tierBar.x + (_this.tierBar.width * 0.5), _this.tierBar.y + (_this.tierBar.height) + 4);
            _this.add(_this.dinoText);
            if (_this.killBar) {
                _this.killBar.x = (_this.tierBar.width * 0.5) - (_this.killBar.width * 0.5);
                _this.killBar.y = _this.dinoText.y + _this.dinoText.height - 2;
                _this.killBar.setBarScale(0, true);
            }
            return _this;
            /*
            this.dinoIcon = this.game.add.image(0, 0, "sheet_dinosaurs");
            this.dinoIcon.anchor.set(0.5, 0);
            this.dinoIcon.alpha = 0.5;
            this.dinoIcon.height = Math.min(32, this.dinoIcon.height);
            this.dinoIcon.scale.x = this.dinoIcon.scale.y;
            this.dinoIcon.position.set(this.tierBar.x + (this.tierBar.width * 0.5), this.dinoText.y + (this.dinoText.height) - 4);
            this.add(this.dinoIcon);
            */
        }
        HUDGameModeContainer_Evolution.prototype.destroy = function () {
            this.timeText = null;
            this.timeBg = null;
            this.labelText = null;
            this.tierBar.destroy();
            this.tierBar = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer_Evolution.prototype.tick = function () {
            var timeStr;
            if (!this.gameMode.matchHasStarted()) {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.preMatchTimer / DinogenArena.GameUtil.frameRate);
            }
            else {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.timeRemaining / DinogenArena.GameUtil.frameRate);
            }
            this.timeText.setText(timeStr);
            this.updateDinoTier();
        };
        HUDGameModeContainer_Evolution.prototype.updateDinoTier = function () {
            var evo = this.gameMode;
            if (evo) {
                this.tierBar.setBarScale(evo.getCurrentDinoTier() / DinogenArena.GameMode_Evolution.DINO_TIER_MAX, true);
                this.dinoText.setText("Next: " + evo.getDinoKills() + "/" + DinogenArena.GameMode_Evolution.DINO_KILLS_MAX + " kills");
                //this.killBar.setBarScale(evo.getDinoKills() / GameMode_Evolution.DINO_KILLS_MAX);
            }
        };
        return HUDGameModeContainer_Evolution;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_Evolution = HUDGameModeContainer_Evolution;
    var HUDGameModeContainer_Deathmatch = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_Deathmatch, _super);
        function HUDGameModeContainer_Deathmatch(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            var padding = 4;
            _this.killBar = new DinogenArena.UIBar(150, DinogenArena.GameModeManager.GetColourForTeam(0));
            _this.killBar.height = 4;
            _this.add(_this.killBar);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 64, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.timeBg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.timeBg.x = (_this.killBar.width * 0.5) - (_this.timeBg.width * 0.5);
            _this.addChild(_this.timeBg);
            _this.timeText = _this.game.add.text(0, 0, "-", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.timeText.anchor.set(0.5, 0.5);
            _this.timeText.position.set(_this.timeBg.x + _this.timeBg.width * 0.5, _this.timeBg.y + (_this.timeBg.height * 0.5) + 4);
            _this.addChild(_this.timeText);
            _this.labelText = _this.game.add.text(0, 0, _this.gameMode.info["name"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.timeBg.x + _this.timeBg.width * 0.5, (_this.timeBg.height) + 2);
            _this.labelText.alpha = 0.5;
            _this.addChild(_this.labelText);
            _this.killBar.y = _this.labelText.y + _this.labelText.height;
            _this.killBar.setBarScale(0, true);
            _this.placeText = _this.game.add.text(_this.killBar.width * 0.5, _this.killBar.y + _this.killBar.height, "", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.placeText.anchor.set(0.5, 0);
            _this.addChild(_this.placeText);
            _this.killsText = _this.game.add.text(_this.placeText.x, (_this.placeText.y + _this.placeText.height) - 6, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.killsText.anchor.set(0.5, 0);
            _this.killsText.alpha = 0.5;
            _this.addChild(_this.killsText);
            return _this;
        }
        HUDGameModeContainer_Deathmatch.prototype.destroy = function () {
            this.timeText = null;
            this.timeBg = null;
            this.labelText = null;
            this.placeText = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer_Deathmatch.prototype.tick = function () {
            var timeStr;
            if (!this.gameMode.matchHasStarted()) {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.preMatchTimer / DinogenArena.GameUtil.frameRate);
            }
            else {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.timeRemaining / DinogenArena.GameUtil.frameRate);
            }
            this.timeText.setText(timeStr);
            var dm = this.gameMode;
            if (dm) {
                var placement = dm.getPlaceForPlayer(dm.getUserPlayer());
                this.placeText.setText(placement + DinogenArena.WilkinUtil.GetOrdinalString(placement));
                var kills = dm.getUserPlayer().getKills();
                this.killBar.setBarScale(kills / dm.getScoreLimit(), true);
                this.killsText.setText(kills + "/" + dm.getScoreLimit() + " kills", true);
            }
        };
        return HUDGameModeContainer_Deathmatch;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_Deathmatch = HUDGameModeContainer_Deathmatch;
    var HUDGameModeContainer_TeamDeathmatch = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_TeamDeathmatch, _super);
        function HUDGameModeContainer_TeamDeathmatch(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            var padding = 4;
            _this.bar0 = new DinogenArena.UIBar(150, DinogenArena.GameModeManager.GetColourForTeam(0));
            _this.bar0.height = 24;
            _this.addChild(_this.bar0);
            _this.score0 = _this.game.add.text(0, 0, "-", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "right", boundsAlignV: "middle", boundsAlignH: "right" });
            _this.score0.anchor.set(1, 0.5);
            _this.score0.position.set((_this.bar0.x + _this.bar0.width) - padding, (_this.bar0.y + _this.bar0.height * 0.5) + 4);
            _this.score0.alpha = 0.5;
            _this.addChild(_this.score0);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 64, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.timeBg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.timeBg.x = _this.bar0.width + padding;
            _this.addChild(_this.timeBg);
            _this.timeText = _this.game.add.text(0, 0, "-", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.timeText.anchor.set(0.5, 0.5);
            _this.timeText.position.set(_this.timeBg.x + _this.timeBg.width * 0.5, _this.timeBg.y + (_this.timeBg.height * 0.5) + 4);
            _this.addChild(_this.timeText);
            _this.bar1 = new DinogenArena.UIBar(150, DinogenArena.GameModeManager.GetColourForTeam(1));
            _this.bar1.height = 24;
            _this.bar1.x = _this.timeBg.x + _this.timeBg.width + padding;
            _this.addChild(_this.bar1);
            _this.score1 = _this.game.add.text(0, 0, "-", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "left", boundsAlignH: "left" });
            _this.score1.anchor.set(0, 0.5);
            _this.score1.position.set(_this.bar1.x + padding, (_this.bar1.y + _this.bar1.height * 0.5) + 4);
            _this.score1.alpha = 0.5;
            _this.addChild(_this.score1);
            _this.labelText = _this.game.add.text(0, 0, _this.gameMode.info["name"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.timeBg.x + _this.timeBg.width * 0.5, (_this.timeBg.height) + 2);
            _this.labelText.alpha = 0.5;
            _this.addChild(_this.labelText);
            _this.winningText = _this.game.add.text(0, 0, "Tied", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.winningText.anchor.set(0.5, 0);
            _this.winningText.position.set(_this.labelText.x, (_this.labelText.y + _this.labelText.height) - 4);
            _this.addChild(_this.winningText);
            return _this;
        }
        HUDGameModeContainer_TeamDeathmatch.prototype.destroy = function () {
            this.timeText = null;
            this.timeBg = null;
            this.labelText = null;
            this.winningText = null;
            this.score0 = null;
            this.score1 = null;
            this.bar0.destroy();
            this.bar0 = null;
            this.bar1.destroy();
            this.bar1 = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer_TeamDeathmatch.prototype.tick = function () {
            var timeStr;
            if (!this.gameMode.matchHasStarted()) {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.preMatchTimer / DinogenArena.GameUtil.frameRate);
            }
            else {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.timeRemaining / DinogenArena.GameUtil.frameRate);
            }
            this.timeText.setText(timeStr);
            var tdm = this.gameMode;
            if (tdm) {
                var blueScore = tdm.getScoreForTeam(0);
                this.score0.setText(blueScore.toString());
                var redScore = tdm.getScoreForTeam(1);
                this.score1.setText(redScore.toString());
                this.bar0.setBarScale(blueScore / tdm.getScoreLimit());
                this.bar1.setBarScale(redScore / tdm.getScoreLimit());
                var winStr;
                var winningTeam = tdm.getWinningTeam();
                if (winningTeam < 0) {
                    winStr = "Tied";
                }
                else if (this.gameMode.getUserPlayer().getTeam() == winningTeam) {
                    winStr = "Winning";
                }
                else {
                    winStr = "Losing";
                }
                this.winningText.setText(winStr);
            }
        };
        return HUDGameModeContainer_TeamDeathmatch;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_TeamDeathmatch = HUDGameModeContainer_TeamDeathmatch;
    var HUDGameModeContainer_Rex = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_Rex, _super);
        function HUDGameModeContainer_Rex(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            var padding = 4;
            var useWidth = 200;
            var gfx = _this.game.add.graphics();
            gfx.beginFill(0xFFFFFF, 0);
            gfx.drawRect(0, 0, useWidth, 50);
            _this.add(gfx);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 64, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.timeBg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.timeBg.x = (useWidth * 0.5) - (_this.timeBg.width * 0.5);
            _this.addChild(_this.timeBg);
            _this.timeText = _this.game.add.text(0, 0, "-", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.timeText.anchor.set(0.5, 0.5);
            _this.timeText.position.set(_this.timeBg.x + _this.timeBg.width * 0.5, _this.timeBg.y + (_this.timeBg.height * 0.5) + 4);
            _this.addChild(_this.timeText);
            _this.labelText = _this.game.add.text(0, 0, _this.gameMode.info["name"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.timeBg.x + _this.timeBg.width * 0.5, (_this.timeBg.height) + 2);
            _this.labelText.alpha = 0.5;
            _this.addChild(_this.labelText);
            _this.humanText = _this.game.add.text(useWidth * 0.5, _this.labelText.y + _this.labelText.height, "", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.humanText.anchor.set(0.5, 0);
            _this.addChild(_this.humanText);
            _this.humanDescText = _this.game.add.text(_this.humanText.x, (_this.humanText.y + _this.humanText.height) - 10, "Human Lives Remaining", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.humanDescText.anchor.set(0.5, 0);
            _this.humanDescText.alpha = 0.5;
            _this.addChild(_this.humanDescText);
            return _this;
        }
        HUDGameModeContainer_Rex.prototype.destroy = function () {
            this.timeText = null;
            this.timeBg = null;
            this.labelText = null;
            this.humanText = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer_Rex.prototype.tick = function () {
            var timeStr;
            if (!this.gameMode.matchHasStarted()) {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.preMatchTimer / DinogenArena.GameUtil.frameRate);
            }
            else {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.timeRemaining / DinogenArena.GameUtil.frameRate);
            }
            this.timeText.setText(timeStr);
            var rex = this.gameMode;
            if (rex) {
                this.humanText.setText(rex.getHumanLives().toString(), true);
            }
        };
        return HUDGameModeContainer_Rex;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_Rex = HUDGameModeContainer_Rex;
    var HUDGameModeContainer_CaptureTheFlag = /** @class */ (function (_super) {
        __extends(HUDGameModeContainer_CaptureTheFlag, _super);
        function HUDGameModeContainer_CaptureTheFlag(_gameMode) {
            var _this = _super.call(this, _gameMode) || this;
            var padding = 4;
            _this.bar0 = new DinogenArena.UIBar(150, DinogenArena.GameModeManager.GetColourForTeam(0));
            _this.bar0.height = 24;
            _this.addChild(_this.bar0);
            _this.score0 = _this.game.add.text(0, 0, "-", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "right", boundsAlignV: "middle", boundsAlignH: "right" });
            _this.score0.anchor.set(1, 0.5);
            _this.score0.position.set((_this.bar0.x + _this.bar0.width) - padding, (_this.bar0.y + _this.bar0.height * 0.5) + 4);
            _this.score0.alpha = 0.5;
            _this.addChild(_this.score0);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 64, 32, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.timeBg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.timeBg.x = _this.bar0.width + padding;
            _this.addChild(_this.timeBg);
            _this.timeText = _this.game.add.text(0, 0, "-", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignV: "middle", boundsAlignH: "center" });
            _this.timeText.anchor.set(0.5, 0.5);
            _this.timeText.position.set(_this.timeBg.x + _this.timeBg.width * 0.5, _this.timeBg.y + (_this.timeBg.height * 0.5) + 4);
            _this.addChild(_this.timeText);
            _this.bar1 = new DinogenArena.UIBar(150, DinogenArena.GameModeManager.GetColourForTeam(1));
            _this.bar1.height = 24;
            _this.bar1.x = _this.timeBg.x + _this.timeBg.width + padding;
            _this.addChild(_this.bar1);
            _this.score1 = _this.game.add.text(0, 0, "-", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "left", boundsAlignH: "left" });
            _this.score1.anchor.set(0, 0.5);
            _this.score1.position.set(_this.bar1.x + padding, (_this.bar1.y + _this.bar1.height * 0.5) + 2);
            _this.score1.alpha = 0.5;
            _this.addChild(_this.score1);
            _this.labelText = _this.game.add.text(0, 0, _this.gameMode.info["name"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.labelText.anchor.set(0.5, 0);
            _this.labelText.position.set(_this.timeBg.x + _this.timeBg.width * 0.5, (_this.timeBg.height) + 2);
            _this.labelText.alpha = 0.5;
            _this.addChild(_this.labelText);
            _this.winningText = _this.game.add.text(0, 0, "Tied", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.winningText.anchor.set(0.5, 0);
            _this.winningText.position.set(_this.labelText.x, (_this.labelText.y + _this.labelText.height) - 4);
            _this.addChild(_this.winningText);
            return _this;
        }
        HUDGameModeContainer_CaptureTheFlag.prototype.destroy = function () {
            this.timeText = null;
            this.timeBg = null;
            this.labelText = null;
            this.winningText = null;
            this.score0 = null;
            this.score1 = null;
            this.bar0.destroy();
            this.bar0 = null;
            this.bar1.destroy();
            this.bar1 = null;
            _super.prototype.destroy.call(this);
        };
        HUDGameModeContainer_CaptureTheFlag.prototype.tick = function () {
            var timeStr;
            if (!this.gameMode.matchHasStarted()) {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.preMatchTimer / DinogenArena.GameUtil.frameRate);
            }
            else {
                timeStr = DinogenArena.WilkinUtil.ConvertToTimeString(this.gameMode.timeRemaining / DinogenArena.GameUtil.frameRate);
            }
            this.timeText.setText(timeStr);
            var ctf = this.gameMode;
            if (ctf) {
                var blueScore = ctf.getScoreForTeam(0);
                this.score0.setText(blueScore.toString());
                var redScore = ctf.getScoreForTeam(1);
                this.score1.setText(redScore.toString());
                this.bar0.setBarScale(blueScore / ctf.getScoreLimit());
                this.bar1.setBarScale(redScore / ctf.getScoreLimit());
                var winStr;
                var winningTeam = ctf.getWinningTeam();
                if (winningTeam < 0) {
                    winStr = "Tied";
                }
                else if (this.gameMode.getUserPlayer().getTeam() == winningTeam) {
                    winStr = "Winning";
                }
                else {
                    winStr = "Losing";
                }
                this.winningText.setText(winStr);
            }
        };
        return HUDGameModeContainer_CaptureTheFlag;
    }(HUDGameModeContainer));
    DinogenArena.HUDGameModeContainer_CaptureTheFlag = HUDGameModeContainer_CaptureTheFlag;
    var Crosshair = /** @class */ (function (_super) {
        __extends(Crosshair, _super);
        function Crosshair() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.size = 4;
            _this.recoil = 0;
            _this.bReloading = false;
            _this.bCanFire = false;
            _this.engine = _this.game;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0xFFFFFF, 0.2);
            graphics.drawCircle(0, 0, 200);
            _this.recoilCircle = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.recoilCircle.anchor.set(0.5, 0.5);
            _this.addChild(_this.recoilCircle);
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0xFFFFFF, 1);
            //graphics.drawRect(-1, -1, 2, 2);
            var size = 4;
            graphics.drawCircle(-size * 0.5, -size * 0.5, size);
            _this.dot = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.dot.anchor.set(0.5, 0.5);
            _this.addChild(_this.dot);
            _this.addChild(_this.recoilCircle);
            _this.dot2 = _this.game.add.image(0, 0, "atlas_ui", "close");
            _this.dot2.anchor.set(0.5, 0.5);
            _this.addChild(_this.dot2);
            _this.reloadBar = new DinogenArena.UIBar(80, 0xFFFFFF);
            _this.reloadBar.height = 2;
            _this.reloadBar.alpha = 0;
            _this.reloadBar.x = -_this.reloadBar.width * 0.5;
            _this.reloadBar.y = 60;
            _this.addChild(_this.reloadBar);
            _this.arrow = _this.game.add.image(0, 0, "atlas_ui", "arrow_crosshair");
            _this.arrow.anchor.set(-2, 0.5);
            _this.arrow.alpha = 0.2;
            _this.add(_this.arrow);
            _this.setArrowVisible(false);
            _this.labelText = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.labelText.setTextBounds(0, 0, 200, 32);
            _this.labelText.x = -_this.labelText.textBounds.halfWidth;
            _this.labelText.y = 32;
            _this.labelText.alpha = 0.8;
            _this.add(_this.labelText);
            _this.reloadContainer = _this.game.add.group();
            _this.add(_this.reloadContainer);
            _this.reloadKey = new KeyIcon();
            _this.reloadKey.setKey(DinogenArena.PlayerManager.CurrentProfile.controls.getKeyStringFromId(DinogenArena.PlayerControls.KEY_RELOAD));
            _this.reloadContainer.add(_this.reloadKey);
            var reloadText = _this.game.add.text(0, 0, "Reload", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            reloadText.anchor.set(0, 0.5);
            reloadText.x = _this.reloadKey.x + _this.reloadKey.width + 4;
            reloadText.y = (_this.reloadKey.y + (_this.reloadKey.height * 0.5)) + 2;
            _this.reloadContainer.add(reloadText);
            _this.reloadContainer.x = -(_this.reloadContainer.width * 0.5);
            _this.reloadContainer.y = 60;
            _this.reloadContainer.alpha = 0.5;
            _this.setNeedsReload(false);
            _this.setCanFire(true);
            return _this;
        }
        Crosshair.prototype.destroy = function () {
            if (this.reloadTween) {
                this.reloadTween.stop();
            }
            this.reloadKey = null;
            this.reloadContainer = null;
            this.reloadTween = null;
            this.dot = null;
            this.dot2 = null;
            this.recoilCircle = null;
            this.reloadBar.destroy();
            this.reloadBar = null;
            this.engine = null;
            _super.prototype.destroy.call(this);
        };
        Crosshair.prototype.tick = function () {
            var useSize = !this.bCanFire ? 10 : this.size;
            this.recoil -= (this.recoil - useSize) * 0.15;
            this.recoilCircle.scale.x = this.recoilCircle.scale.y = Math.min(this.recoil * 0.02, 8);
            var pawns = DinogenArena.GameUtil.GetGameState().pawns;
            for (var i = 0; i < pawns.length; i++) {
                var pawn = pawns[i];
                if (pawn.isAlive() && !pawn.isPlayer()) {
                    if (pawn instanceof DinogenArena.Character || pawn instanceof DinogenArena.Dinosaur) {
                        if (DinogenArena.GameUtil.GetGameState().gameMode.isCustom() || pawn.getTeam() == DinogenArena.GameUtil.GetGameState().getPlayerTeam()) {
                            if (DinogenArena.GameUtil.GetGameState().checkOverlap(pawn.hitSprite, this.dot) || DinogenArena.GameUtil.GetGameState().checkOverlap(pawn.hitSprite, this.dot2)) {
                                var gmp = pawn.getController().getGameModePlayer();
                                if (gmp) {
                                    var bAlly = gmp.getTeam() == DinogenArena.GameUtil.GetGameState().getPlayerTeam();
                                    this.setLabelText((bAlly ? "Ally: " : "Enemy: ") + gmp.getName(), bAlly ? DinogenArena.GameUtil.COLOUR_ALLY_STRING : DinogenArena.GameUtil.COLOUR_ENEMY_STRING);
                                    this.setCrosshairTint(bAlly ? 0x00FF00 : 0xFF0000);
                                    return;
                                }
                            }
                        }
                    }
                }
            }
            this.clearLabelText();
            this.setCrosshairTint(0xFFFFFF);
        };
        Crosshair.prototype.setNeedsReload = function (_bVal) {
            var bWasVisible = this.reloadContainer.visible;
            this.reloadContainer.visible = _bVal;
            if (_bVal && !bWasVisible) {
                this.reloadContainer.alpha = 0.5;
                var tween = this.game.add.tween(this.reloadContainer).to({ alpha: 0.1 }, 200, Phaser.Easing.Cubic.InOut, true, 0, Number.MAX_VALUE, true);
            }
        };
        Crosshair.prototype.setCrosshairTint = function (_val) {
            this.dot.tint = _val;
            this.dot2.tint = _val;
        };
        Crosshair.prototype.setArrowRotation = function (_val) {
            this.arrow.rotation = _val;
        };
        Crosshair.prototype.setArrowVisible = function (_bVal) {
            this.arrow.visible = _bVal;
        };
        Crosshair.prototype.clearLabelText = function () {
            this.setLabelText("");
        };
        Crosshair.prototype.setLabelText = function (_val, _colour) {
            if (_colour === void 0) { _colour = "#FFFFFF"; }
            this.labelText.setText(_val);
            this.labelText.addColor(_colour, 0);
        };
        Crosshair.prototype.setSize = function (_val) {
            this.size = Math.max(3, _val);
        };
        Crosshair.prototype.addRecoil = function (_val) {
            this.recoil += Math.min(_val, 60);
        };
        Crosshair.prototype.setCanFire = function (_bVal) {
            this.bCanFire = _bVal;
            this.dot.visible = _bVal;
            this.dot2.visible = !_bVal;
            this.recoilCircle.alpha = _bVal ? 0.5 : 0.1;
            if (_bVal && !this.bReloading) {
                this.reloadBar.alpha = 0;
            }
        };
        Crosshair.prototype.setReloading = function (_bVal) {
            var bPrev = this.bReloading;
            this.bReloading = _bVal;
            if (bPrev != _bVal) {
                if (this.reloadTween) {
                    this.reloadTween.stop();
                }
                if (_bVal) {
                    this.reloadBar.setBarScale(0, true);
                }
            }
            if (this.bReloading) {
                this.reloadTween = this.game.add.tween(this.reloadBar).to({ alpha: 1 }, 200, Phaser.Easing.Cubic.Out, true);
                this.setNeedsReload(false);
            }
            else {
                this.reloadTween = this.game.add.tween(this.reloadBar).to({ alpha: 0 }, 100, Phaser.Easing.Cubic.Out, true);
            }
        };
        Crosshair.prototype.setReloadingPercentage = function (_val) {
            if (this.bReloading) {
                this.reloadBar.setBarScale(_val, true);
            }
        };
        Crosshair.prototype.show = function () {
            this.visible = true;
            this.engine.showMouse(false);
        };
        Crosshair.prototype.hide = function () {
            this.visible = false;
            this.setReloading(false);
            this.engine.showMouse(true);
        };
        return Crosshair;
    }(Phaser.Group));
    DinogenArena.Crosshair = Crosshair;
    var HUDItem = /** @class */ (function (_super) {
        __extends(HUDItem, _super);
        function HUDItem() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.bg = _this.game.add.graphics(0, 0);
            _this.bg.beginFill(0x000000, 0.5);
            _this.bg.drawRoundedRect(0, 0, 200, 46, DinogenArena.GameUtil.RECTANGLE_RADIUS); //42
            _this.add(_this.bg);
            _this.weapon = _this.game.add.image(0, 0, "atlas_weapons", 0);
            _this.weapon.anchor.set(0.5, 0.5);
            _this.weapon.position.set(_this.bg.width * 0.5, _this.bg.height * 0.5);
            _this.addChild(_this.weapon);
            _this.indexText = _this.game.add.text(0, 2, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.indexText.setTextBounds(0, 0, 32, _this.bg.height);
            _this.indexText.x = _this.bg.width - _this.indexText.textBounds.width;
            _this.add(_this.indexText);
            return _this;
        }
        HUDItem.prototype.destroy = function () {
            this.bg = null;
            this.weapon = null;
            this.indexText = null;
            _super.prototype.destroy.call(this, true);
        };
        HUDItem.prototype.setItem = function (_item, _index) {
            if (_item) {
                this.weapon.frameName = _item.getId();
            }
            this.indexText.setText(_index.toString(), true);
        };
        HUDItem.prototype.setSelected = function (_bVal) {
            this.alpha = _bVal ? 1 : 0.5;
        };
        return HUDItem;
    }(Phaser.Group));
    DinogenArena.HUDItem = HUDItem;
    var Scoreboard = /** @class */ (function (_super) {
        __extends(Scoreboard, _super);
        function Scoreboard() {
            var _this = _super.call(this) || this;
            _this.gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
            _this.setCanBlur(false);
            _this.bBlurWorld = true;
            _this.bHideHUD = true;
            _this.bg = _this.createOverlay();
            _this.addChild(_this.bg);
            _this.scores = new MenuElement_Scores();
            _this.addChild(_this.scores);
            _this.modeElement = new MenuElement_GameMode();
            _this.addChild(_this.modeElement);
            _this.quitElement = new MenuElement_Quit();
            _this.addChild(_this.quitElement);
            return _this;
        }
        Scoreboard.prototype.destroy = function () {
            this.bg = null;
            this.gameMode = null;
            this.scores = null;
            this.modeElement = null;
            this.quitElement = null;
            _super.prototype.destroy.call(this);
        };
        Scoreboard.prototype.tick = function () {
            if (this.isShowing()) {
                this.scores.updateScores(this.gameMode);
            }
        };
        Scoreboard.prototype.addPlayer = function (_player) {
            this.scores.addPlayer(_player);
        };
        Scoreboard.prototype.removePlayer = function (_player) {
            this.scores.removePlayer(_player);
        };
        Scoreboard.prototype.show = function () {
            _super.prototype.show.call(this);
            //this.parent.setChildIndex(this, parent.length - 1);
            this.modeElement.setData(this.gameMode);
            if (this.gameMode.state == DinogenArena.GameMode.STATE_WAITING_POST_MATCH) {
                //this.setChildIndex(this.quitElement, this.length - 1);
                this.quitElement.show();
                var pc = DinogenArena.GameUtil.GetGameState().playerController;
                var hud = pc.getHUD();
                hud.getCrosshair().hide();
                //this.modeElement.close();
            }
        };
        Scoreboard.prototype.setPlayerVictory = function () {
            this.scores.setPlayerVictory();
        };
        Scoreboard.prototype.setPlayerDefeat = function () {
            this.scores.setPlayerDefeat();
        };
        Scoreboard.prototype.setPlayerDraw = function () {
            this.scores.setPlayerDraw();
        };
        Scoreboard.prototype.setResult = function (_result) {
            console.warn(this.scores);
            if (_result == DinogenArena.GameMode.RESULT_DRAW) {
                this.scores.setPlayerDraw();
            }
            else if (_result == DinogenArena.GameMode.RESULT_WIN) {
                this.scores.setPlayerVictory();
            }
            else if (_result == DinogenArena.GameMode.RESULT_LOSS) {
                this.scores.setPlayerDefeat();
            }
        };
        return Scoreboard;
    }(MenuBase));
    DinogenArena.Scoreboard = Scoreboard;
    var MenuElement_Scores = /** @class */ (function (_super) {
        __extends(MenuElement_Scores, _super);
        function MenuElement_Scores() {
            var _this = _super.call(this) || this;
            _this.setAlignToCenter();
            _this.init();
            _this.show();
            return _this;
        }
        MenuElement_Scores.prototype.destroy = function () {
            this.scoresContainer = null;
            while (this.teams.length > 0) {
                this.teams[0].destroy();
                this.teams.splice(0, 1);
            }
            this.teams = null;
            _super.prototype.destroy.call(this);
        };
        MenuElement_Scores.prototype.init = function () {
            this.teams = [];
            var gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
            if (gameMode instanceof DinogenArena.GameMode_TeamDeathmatch) {
                this.scoresContainer = new ScoresContainer_TeamDeathmatch();
            }
            else if (gameMode instanceof DinogenArena.GameMode_Deathmatch) {
                this.scoresContainer = new ScoresContainer_Deathmatch();
            }
            else if (gameMode instanceof DinogenArena.GameMode_CaptureTheFlag) {
                this.scoresContainer = new ScoresContainer_CaptureTheFlag();
            }
            else if (gameMode instanceof DinogenArena.GameMode_Evolution) {
                this.scoresContainer = new ScoresContainer_Evolution();
            }
            else if (gameMode instanceof DinogenArena.GameMode_DinoHunt) {
                this.scoresContainer = new ScoresContainer_DinoHunt();
            }
            else if (gameMode instanceof DinogenArena.GameMode_KingOfTheHill) {
                this.scoresContainer = new ScoresContainer_KingOfTheHill();
            }
            else if (gameMode instanceof DinogenArena.GameMode_Rex) {
                this.scoresContainer = new ScoresContainer_Rex();
            }
            else if (gameMode instanceof DinogenArena.GameMode_Survival) {
                this.scoresContainer = new ScoresContainer_Deathmatch();
            }
            this.addChild(this.scoresContainer);
        };
        MenuElement_Scores.prototype.addTeam = function (_team) {
            this.scoresContainer.addTeam(_team);
        };
        MenuElement_Scores.prototype.setPlayerVictory = function () {
            this.scoresContainer.setPlayerVictory();
        };
        MenuElement_Scores.prototype.setPlayerDefeat = function () {
            this.scoresContainer.setPlayerDefeat();
        };
        MenuElement_Scores.prototype.setPlayerDraw = function () {
            this.scoresContainer.setPlayerDraw();
        };
        MenuElement_Scores.prototype.addPlayer = function (_player) {
            this.scoresContainer.addPlayer(_player);
        };
        MenuElement_Scores.prototype.removePlayer = function (_player) {
            this.scoresContainer.removePlayer(_player);
        };
        MenuElement_Scores.prototype.updateTeams = function () {
            this.scoresContainer.updateTeams();
        };
        MenuElement_Scores.prototype.updateScores = function (_gameMode) {
            this.scoresContainer.updateScores(_gameMode);
            this.readjustToStage();
        };
        Object.defineProperty(MenuElement_Scores.prototype, "width", {
            get: function () {
                return this.scoresContainer.width;
            },
            enumerable: true,
            configurable: true
        });
        return MenuElement_Scores;
    }(MenuElement));
    DinogenArena.MenuElement_Scores = MenuElement_Scores;
    var ScoresContainer = /** @class */ (function (_super) {
        __extends(ScoresContainer, _super);
        function ScoresContainer() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
            _this.winnerText = _this.game.add.text(0, 0, "", { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.winnerText.anchor.set(0.5, 0.5);
            _this.winnerText.visible = false;
            _this.addChild(_this.winnerText);
            _this.teams = [];
            return _this;
        }
        ScoresContainer.prototype.destroy = function () {
            this.winnerText = null;
            while (this.teams.length > 0) {
                this.teams[0].destroy();
                this.teams.splice(0, 1);
            }
            this.teams = null;
            this.gameMode = null;
            _super.prototype.destroy.call(this);
        };
        ScoresContainer.prototype.addTeam = function (_team) {
            _team.setTeam(this.teams.length);
            this.teams.push(_team);
        };
        ScoresContainer.prototype.setPlayerVictory = function () {
            this.winnerText.setText("Victory");
            this.winnerText.addColor(DinogenArena.GameUtil.COLOUR_NEW_STRING, 0);
            this.winnerText.visible = true;
        };
        ScoresContainer.prototype.setPlayerDefeat = function () {
            this.winnerText.setText("Defeat");
            this.winnerText.addColor(DinogenArena.GameUtil.COLOUR_THEME_STRING, 0);
            this.winnerText.visible = true;
        };
        ScoresContainer.prototype.setPlayerDraw = function () {
            this.winnerText.setText("Draw");
            this.winnerText.addColor("#FFFFFF", 0);
            this.winnerText.visible = true;
        };
        ScoresContainer.prototype.addPlayer = function (_player) {
            return;
        };
        ScoresContainer.prototype.removePlayer = function (_player) {
            return;
        };
        ScoresContainer.prototype.updateTeams = function () {
            if (!this.teams) {
                return;
            }
            for (var i = 0; i < this.teams.length; i++) {
                this.teams[i].updateAll();
            }
        };
        ScoresContainer.prototype.destroyTeams = function () {
            while (this.teams.length > 0) {
                this.teams[0].destroy();
                this.teams.splice(0, 1);
            }
            this.teams = null;
        };
        ScoresContainer.prototype.updateScores = function (_gameMode) {
            return;
        };
        return ScoresContainer;
    }(Phaser.Group));
    DinogenArena.ScoresContainer = ScoresContainer;
    var ScoresContainer_Deathmatch = /** @class */ (function (_super) {
        __extends(ScoresContainer_Deathmatch, _super);
        function ScoresContainer_Deathmatch() {
            var _this = _super.call(this) || this;
            _this.team = new ScoreboardTeam();
            _this.addChild(_this.team);
            _this.addTeam(_this.team);
            _this.team.setTeam(-1);
            return _this;
        }
        ScoresContainer_Deathmatch.prototype.destroy = function () {
            this.team = null;
            _super.prototype.destroy.call(this);
        };
        ScoresContainer_Deathmatch.prototype.updateScores = function (_gameMode) {
            this.updateTeams();
            if (this.winnerText.visible) {
                var padding = 8;
                var winningTeam = this.teams[0];
                this.winnerText.anchor.set(0.5, 0);
                this.winnerText.x = this.width * 0.5;
                this.winnerText.y = winningTeam.y + winningTeam.height + padding;
            }
        };
        ScoresContainer_Deathmatch.prototype.addPlayer = function (_player) {
            this.teams[0].addPlayer(_player, true);
        };
        ScoresContainer_Deathmatch.prototype.removePlayer = function (_player) {
            this.teams[0].removePlayer(_player);
        };
        return ScoresContainer_Deathmatch;
    }(ScoresContainer));
    DinogenArena.ScoresContainer_Deathmatch = ScoresContainer_Deathmatch;
    var ScoresContainer_DinoHunt = /** @class */ (function (_super) {
        __extends(ScoresContainer_DinoHunt, _super);
        function ScoresContainer_DinoHunt() {
            var _this = _super.call(this) || this;
            var textPadding = 4;
            var largePadding = 10;
            _this.team0 = new ScoreboardTeam();
            _this.team0.position.set(0, 0);
            _this.addChild(_this.team0);
            _this.team1 = new ScoreboardTeam();
            _this.team1.position.set(_this.team0.x + _this.team0.width + largePadding, _this.team0.y);
            _this.addChild(_this.team1);
            _this.addTeam(_this.team0);
            _this.addTeam(_this.team1);
            return _this;
        }
        ScoresContainer_DinoHunt.prototype.destroy = function () {
            this.score0 = null;
            this.score1 = null;
            this.bg0 = null;
            this.bg1 = null;
            this.team0 = null;
            this.team1 = null;
            _super.prototype.destroy.call(this);
        };
        ScoresContainer_DinoHunt.prototype.updateScores = function (_gameMode) {
            this.updateTeams();
            var padding = 8;
            var hunt = _gameMode;
            if (this.winnerText.visible) {
                var winner = hunt.getWinningTeam();
                var winningTeam = this.teams[0];
                if (winner >= 0) {
                    winningTeam = this.teams[winner];
                }
                this.winnerText.anchor.set(0.5, 0);
                this.winnerText.x = this.width * 0.5;
                this.winnerText.y = Math.max(this.teams[0].y + this.teams[0].players.y + this.teams[0].players.height, this.teams[1].y + this.teams[1].players.y + this.teams[1].players.height) + padding;
            }
        };
        ScoresContainer_DinoHunt.prototype.addPlayer = function (_player) {
            this.teams[_player.getTeam()].addPlayer(_player);
        };
        ScoresContainer_DinoHunt.prototype.removePlayer = function (_player) {
            this.teams[_player.getTeam()].removePlayer(_player);
        };
        return ScoresContainer_DinoHunt;
    }(ScoresContainer));
    DinogenArena.ScoresContainer_DinoHunt = ScoresContainer_DinoHunt;
    var ScoresContainer_Rex = /** @class */ (function (_super) {
        __extends(ScoresContainer_Rex, _super);
        function ScoresContainer_Rex() {
            var _this = _super.call(this) || this;
            var textPadding = 4;
            var largePadding = 10;
            _this.team0 = new ScoreboardTeam();
            _this.team0.position.set(0, 0);
            _this.addChild(_this.team0);
            _this.team1 = new ScoreboardTeam();
            _this.team1.position.set(_this.team0.x + _this.team0.width + largePadding, _this.team0.y);
            _this.addChild(_this.team1);
            _this.addTeam(_this.team0);
            _this.addTeam(_this.team1);
            return _this;
        }
        ScoresContainer_Rex.prototype.destroy = function () {
            this.score0 = null;
            this.score1 = null;
            this.bg0 = null;
            this.bg1 = null;
            this.team0 = null;
            this.team1 = null;
            _super.prototype.destroy.call(this);
        };
        ScoresContainer_Rex.prototype.updateScores = function (_gameMode) {
            this.updateTeams();
            var padding = 8;
            var rex = _gameMode;
            if (this.winnerText.visible) {
                var winner = rex.getWinningTeam();
                var winningTeam = this.teams[0];
                if (winner >= 0) {
                    winningTeam = this.teams[winner];
                }
                this.winnerText.anchor.set(0.5, 0);
                this.winnerText.x = this.width * 0.5;
                this.winnerText.y = Math.max(this.teams[0].y + this.teams[0].players.y + this.teams[0].players.height, this.teams[1].y + this.teams[1].players.y + this.teams[1].players.height) + padding;
            }
        };
        ScoresContainer_Rex.prototype.addPlayer = function (_player) {
            this.teams[_player.getTeam()].addPlayer(_player);
        };
        ScoresContainer_Rex.prototype.removePlayer = function (_player) {
            this.teams[_player.getTeam()].removePlayer(_player);
        };
        return ScoresContainer_Rex;
    }(ScoresContainer));
    DinogenArena.ScoresContainer_Rex = ScoresContainer_Rex;
    var ScoresContainer_Evolution = /** @class */ (function (_super) {
        __extends(ScoresContainer_Evolution, _super);
        function ScoresContainer_Evolution() {
            var _this = _super.call(this) || this;
            var textPadding = 4;
            var largePadding = 10;
            /*
            var graphics: Phaser.Graphics = this.game.add.graphics(0, 0);
            graphics.beginFill(GameModeManager.GetColourForTeam(0));
            graphics.drawRect(0, 0, 32, 32);
            this.bg0 = this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            this.bg0.width = 300;
            this.bg0.height = 50;
            this.addChild(this.bg0);
            var graphics: Phaser.Graphics = this.game.add.graphics(0, 0);
            graphics.beginFill(GameModeManager.GetColourForTeam(1));
            graphics.drawRect(0, 0, 32, 32);
            this.bg1 = this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            this.bg1.width = 300;
            this.bg1.height = 50;
            this.addChild(this.bg1);
            */
            _this.team0 = new ScoreboardTeam();
            _this.team0.position.set(0, 0);
            //this.team0.position.set(0, this.bg0.y + this.bg0.height + largePadding);
            _this.addChild(_this.team0);
            _this.team1 = new ScoreboardTeam();
            _this.team1.position.set(_this.team0.x + _this.team0.width + largePadding, _this.team0.y);
            _this.addChild(_this.team1);
            /*
            this.bg0.anchor.set(1, 0);
            this.bg0.position.set(this.team0.x + this.team0.width, 0);
            this.bg1.anchor.set(0, 0);
            this.bg1.position.set(this.team1.x, 0);
            */
            /*
            this.score0 = this.game.add.text(0, 0, "Humans", { font: "32px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "right", boundsAlignV: "middle" });
            this.score0.alpha = 0.8;
            this.score0.anchor.set(1, 0.5);
            this.score0.position.set(this.bg0.x - textPadding, this.bg0.y + (this.bg0.height * 0.5) + 2);
            this.addChild(this.score0);

            this.score1 = this.game.add.text(0, 0, "Dinosaur", { font: "32px " + GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left", boundsAlignV: "middle" });
            this.score1.alpha = 0.8;
            this.score1.anchor.set(0, 0.5);
            this.score1.position.set(this.bg1.x + textPadding, this.bg1.y + (this.bg1.height * 0.5) + 2);
            this.addChild(this.score1);
            */
            _this.addTeam(_this.team0);
            _this.addTeam(_this.team1);
            return _this;
        }
        ScoresContainer_Evolution.prototype.destroy = function () {
            this.score0 = null;
            this.score1 = null;
            this.bg0 = null;
            this.bg1 = null;
            this.team0 = null;
            this.team1 = null;
            _super.prototype.destroy.call(this);
        };
        ScoresContainer_Evolution.prototype.updateScores = function (_gameMode) {
            this.updateTeams();
            var padding = 8;
            var evo = _gameMode;
            if (this.winnerText.visible) {
                var winner = evo.getWinningTeam();
                var winningTeam = this.teams[0];
                if (winner >= 0) {
                    winningTeam = this.teams[winner];
                }
                this.winnerText.anchor.set(0.5, 0);
                this.winnerText.x = this.width * 0.5;
                this.winnerText.y = Math.max(this.teams[0].y + this.teams[0].players.y + this.teams[0].players.height, this.teams[1].y + this.teams[1].players.y + this.teams[1].players.height) + padding;
            }
        };
        ScoresContainer_Evolution.prototype.addPlayer = function (_player) {
            this.teams[_player.getTeam()].addPlayer(_player);
        };
        ScoresContainer_Evolution.prototype.removePlayer = function (_player) {
            this.teams[_player.getTeam()].removePlayer(_player);
        };
        return ScoresContainer_Evolution;
    }(ScoresContainer));
    DinogenArena.ScoresContainer_Evolution = ScoresContainer_Evolution;
    var ScoresContainer_TeamDeathmatch = /** @class */ (function (_super) {
        __extends(ScoresContainer_TeamDeathmatch, _super);
        function ScoresContainer_TeamDeathmatch() {
            var _this = _super.call(this) || this;
            var textPadding = 4;
            var largePadding = 10;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(DinogenArena.GameModeManager.GetColourForTeam(0));
            graphics.drawRoundedRect(0, 0, 200, 50, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg0 = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.addChild(_this.bg0);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(DinogenArena.GameModeManager.GetColourForTeam(1));
            graphics.drawRoundedRect(0, 0, 200, 50, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg1 = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.addChild(_this.bg1);
            _this.team0 = new ScoreboardTeam();
            _this.team0.position.set(0, _this.bg0.y + _this.bg0.height + largePadding);
            _this.addChild(_this.team0);
            _this.team1 = new ScoreboardTeam();
            _this.team1.position.set(_this.team0.x + _this.team0.width + largePadding, _this.team0.y);
            _this.addChild(_this.team1);
            _this.bg0.anchor.set(1, 0);
            _this.bg0.position.set(_this.team0.x + _this.team0.width, 0);
            _this.bg1.anchor.set(0, 0);
            _this.bg1.position.set(_this.team1.x, 0);
            _this.score0 = _this.game.add.text(0, 0, "", { font: "32px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "right", boundsAlignV: "middle" });
            _this.score0.alpha = 0.8;
            _this.score0.anchor.set(1, 0.5);
            _this.score0.position.set(_this.bg0.x - textPadding, _this.bg0.y + (_this.bg0.height * 0.5) + 5);
            _this.addChild(_this.score0);
            _this.score1 = _this.game.add.text(0, 0, "", { font: "32px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left", boundsAlignV: "middle" });
            _this.score1.alpha = 0.8;
            _this.score1.anchor.set(0, 0.5);
            _this.score1.position.set(_this.bg1.x + textPadding, _this.bg1.y + (_this.bg1.height * 0.5) + 5);
            _this.addChild(_this.score1);
            _this.addTeam(_this.team0);
            _this.addTeam(_this.team1);
            return _this;
        }
        ScoresContainer_TeamDeathmatch.prototype.destroy = function () {
            this.score0 = null;
            this.score1 = null;
            this.bg0 = null;
            this.bg1 = null;
            this.team0 = null;
            this.team1 = null;
            _super.prototype.destroy.call(this);
        };
        ScoresContainer_TeamDeathmatch.prototype.updateScores = function (_gameMode) {
            this.updateTeams();
            var padding = 8;
            var tdm = _gameMode;
            this.score0.setText(tdm.getScoreForTeam(0).toString());
            this.score1.setText(tdm.getScoreForTeam(1).toString());
            if (this.winnerText.visible) {
                var winner = tdm.getWinningTeam();
                var winningTeam = this.teams[0];
                if (winner >= 0) {
                    winningTeam = this.teams[winner];
                }
                var padding = 8;
                this.winnerText.anchor.set(0.5, 0);
                this.winnerText.x = this.width * 0.5;
                this.winnerText.y = winningTeam.y + winningTeam.height + padding;
            }
        };
        ScoresContainer_TeamDeathmatch.prototype.addPlayer = function (_player) {
            this.teams[_player.getTeam()].addPlayer(_player);
        };
        ScoresContainer_TeamDeathmatch.prototype.removePlayer = function (_player) {
            this.teams[_player.getTeam()].removePlayer(_player);
        };
        return ScoresContainer_TeamDeathmatch;
    }(ScoresContainer));
    DinogenArena.ScoresContainer_TeamDeathmatch = ScoresContainer_TeamDeathmatch;
    var ScoresContainer_CaptureTheFlag = /** @class */ (function (_super) {
        __extends(ScoresContainer_CaptureTheFlag, _super);
        function ScoresContainer_CaptureTheFlag() {
            var _this = _super.call(this) || this;
            var textPadding = 4;
            var largePadding = 10;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(DinogenArena.GameModeManager.GetColourForTeam(0));
            graphics.drawRoundedRect(0, 0, 200, 50, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg0 = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.addChild(_this.bg0);
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(DinogenArena.GameModeManager.GetColourForTeam(1));
            graphics.drawRoundedRect(0, 0, 200, 50, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg1 = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.addChild(_this.bg1);
            _this.team0 = new ScoreboardTeam();
            _this.team0.position.set(0, _this.bg0.y + _this.bg0.height + largePadding);
            _this.addChild(_this.team0);
            _this.team1 = new ScoreboardTeam();
            _this.team1.position.set(_this.team0.x + _this.team0.width + largePadding, _this.team0.y);
            _this.addChild(_this.team1);
            _this.bg0.anchor.set(1, 0);
            _this.bg0.position.set(_this.team0.x + _this.team0.width, 0);
            _this.bg1.anchor.set(0, 0);
            _this.bg1.position.set(_this.team1.x, 0);
            _this.score0 = _this.game.add.text(0, 0, "", { font: "32px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "right", boundsAlignV: "middle" });
            _this.score0.alpha = 0.8;
            _this.score0.anchor.set(1, 0.5);
            _this.score0.position.set(_this.bg0.x - textPadding, _this.bg0.y + (_this.bg0.height * 0.5) + 5);
            _this.addChild(_this.score0);
            _this.score1 = _this.game.add.text(0, 0, "", { font: "32px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left", boundsAlignV: "middle" });
            _this.score1.alpha = 0.8;
            _this.score1.anchor.set(0, 0.5);
            _this.score1.position.set(_this.bg1.x + textPadding, _this.bg1.y + (_this.bg1.height * 0.5) + 5);
            _this.addChild(_this.score1);
            _this.addTeam(_this.team0);
            _this.addTeam(_this.team1);
            return _this;
        }
        ScoresContainer_CaptureTheFlag.prototype.destroy = function () {
            this.score0 = null;
            this.score1 = null;
            this.bg0 = null;
            this.bg1 = null;
            this.team0 = null;
            this.team1 = null;
            _super.prototype.destroy.call(this);
        };
        ScoresContainer_CaptureTheFlag.prototype.updateScores = function (_gameMode) {
            this.updateTeams();
            var padding = 8;
            var ctf = _gameMode;
            this.score0.setText(ctf.getScoreForTeam(0).toString());
            this.score1.setText(ctf.getScoreForTeam(1).toString());
            if (this.winnerText.visible) {
                var winner = ctf.getWinningTeam();
                var winningTeam = this.teams[0];
                if (winner >= 0) {
                    winningTeam = this.teams[winner];
                }
                var padding = 8;
                this.winnerText.anchor.set(0.5, 0);
                this.winnerText.x = this.width * 0.5;
                this.winnerText.y = winningTeam.y + winningTeam.height + padding;
            }
        };
        ScoresContainer_CaptureTheFlag.prototype.addPlayer = function (_player) {
            this.teams[_player.getTeam()].addPlayer(_player);
        };
        ScoresContainer_CaptureTheFlag.prototype.removePlayer = function (_player) {
            this.teams[_player.getTeam()].removePlayer(_player);
        };
        return ScoresContainer_CaptureTheFlag;
    }(ScoresContainer));
    DinogenArena.ScoresContainer_CaptureTheFlag = ScoresContainer_CaptureTheFlag;
    var ScoresContainer_KingOfTheHill = /** @class */ (function (_super) {
        __extends(ScoresContainer_KingOfTheHill, _super);
        function ScoresContainer_KingOfTheHill() {
            var _this = _super.call(this) || this;
            _this.team = new ScoreboardTeam();
            _this.addChild(_this.team);
            _this.addTeam(_this.team);
            _this.team.setTeam(-1);
            return _this;
        }
        ScoresContainer_KingOfTheHill.prototype.destroy = function () {
            this.team = null;
            _super.prototype.destroy.call(this);
        };
        ScoresContainer_KingOfTheHill.prototype.updateScores = function (_gameMode) {
            this.updateTeams();
            if (this.winnerText.visible) {
                var padding = 8;
                var winningTeam = this.teams[0];
                this.winnerText.anchor.set(0.5, 0);
                this.winnerText.x = this.width * 0.5;
                this.winnerText.y = winningTeam.y + winningTeam.height + padding;
            }
        };
        ScoresContainer_KingOfTheHill.prototype.addPlayer = function (_player) {
            this.teams[0].addPlayer(_player, true);
        };
        ScoresContainer_KingOfTheHill.prototype.removePlayer = function (_player) {
            this.teams[0].removePlayer(_player);
        };
        return ScoresContainer_KingOfTheHill;
    }(ScoresContainer));
    DinogenArena.ScoresContainer_KingOfTheHill = ScoresContainer_KingOfTheHill;
    var ScoreboardTeam = /** @class */ (function (_super) {
        __extends(ScoreboardTeam, _super);
        function ScoreboardTeam() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var padding = 2;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRect(0, 0, 32, 32);
            var bg0 = _this.game.add.image(0, 0, graphics.generateTexture());
            _this.addChild(bg0);
            var bg1 = _this.game.add.image(0, 0, graphics.generateTexture());
            bg1.width = ScoreboardTeam.PLAYER_WIDTH;
            bg1.x = bg0.x + bg0.width + padding;
            _this.addChild(bg1);
            var bg2 = _this.game.add.image(0, 0, graphics.generateTexture());
            bg2.width = ScoreboardTeam.DEFAULT_WIDTH;
            bg2.x = bg1.x + bg1.width + padding;
            _this.addChild(bg2);
            var bg3 = _this.game.add.image(0, 0, graphics.generateTexture());
            bg3.width = ScoreboardTeam.DEFAULT_WIDTH;
            bg3.x = bg2.x + bg2.width + padding;
            _this.addChild(bg3);
            if (DinogenArena.GameUtil.GetGameState().gameMode.getKOTH()) {
                var bg4 = _this.game.add.image(0, 0, graphics.generateTexture());
                bg4.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg4.x = bg3.x + bg3.width + padding;
                _this.addChild(bg4);
            }
            else if (DinogenArena.GameUtil.GetGameState().gameMode.getCTF()) {
                var bg4 = _this.game.add.image(0, 0, graphics.generateTexture());
                bg4.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg4.x = bg3.x + bg3.width + padding;
                _this.addChild(bg4);
                var bg5 = _this.game.add.image(0, 0, graphics.generateTexture());
                bg5.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg5.x = bg4.x + bg4.width + padding;
                _this.addChild(bg5);
            }
            graphics.destroy();
            var yPadding = 3;
            var userIcon = _this.game.add.image(0, 0, "atlas_ui", "icon_player");
            userIcon.anchor.set(0.5, 0.5);
            userIcon.x = bg0.x + (bg0.width * 0.5);
            userIcon.y = bg0.y + (bg0.height * 0.5);
            _this.add(userIcon);
            var fontStyle = { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "center" };
            var playerText = _this.game.add.text(bg1.x + bg1.width * 0.5, bg1.y + yPadding + bg1.height * 0.5, "Player", fontStyle);
            playerText.anchor.set(0.5, 0.5);
            _this.addChild(playerText);
            var killsText = _this.game.add.text(bg2.x + bg2.width * 0.5, bg2.y + yPadding + bg2.height * 0.5, "Kills", fontStyle);
            killsText.anchor.set(0.5, 0.5);
            _this.addChild(killsText);
            var deathsText = _this.game.add.text(bg3.x + bg3.width * 0.5, bg3.y + yPadding + bg3.height * 0.5, "Deaths", fontStyle);
            deathsText.anchor.set(0.5, 0.5);
            _this.addChild(deathsText);
            if (DinogenArena.GameUtil.GetGameState().gameMode.getKOTH()) {
                var scoreText = _this.game.add.text(bg4.x + bg4.width * 0.5, bg4.y + yPadding + bg4.height * 0.5, "Score", fontStyle);
                scoreText.anchor.set(0.5, 0.5);
                _this.addChild(scoreText);
            }
            else if (DinogenArena.GameUtil.GetGameState().gameMode.getCTF()) {
                var capturesText = _this.game.add.text(bg4.x + bg4.width * 0.5, bg4.y + yPadding + bg4.height * 0.5, "Captures", fontStyle);
                capturesText.anchor.set(0.5, 0.5);
                _this.addChild(capturesText);
                var returnsText = _this.game.add.text(bg5.x + bg5.width * 0.5, bg5.y + yPadding + bg5.height * 0.5, "Returns", fontStyle);
                returnsText.anchor.set(0.5, 0.5);
                _this.addChild(returnsText);
            }
            _this.players = _this.game.add.group();
            _this.players.y = bg0.y + bg0.height + padding;
            _this.addChild(_this.players);
            _this.items = [];
            return _this;
        }
        ScoreboardTeam.prototype.destroy = function () {
            this.players = null;
            while (this.items.length > 0) {
                this.items[0].destroy();
                this.items.splice(0, 1);
            }
            this.items = null;
            _super.prototype.destroy.call(this);
        };
        ScoreboardTeam.prototype.addPlayer = function (_player, _bShowTeam) {
            if (_bShowTeam === void 0) { _bShowTeam = false; }
            var item = new ScoreboardPlayer(_player, _bShowTeam);
            item.updateAll();
            item.y = this.players.height + ScoreboardTeam.PLAYER_PADDING; //this.height // + ScoreboardTeam.PLAYER_PADDING;
            this.players.addChild(item);
            this.items.push(item);
            this.updateAll();
        };
        ScoreboardTeam.prototype.removePlayer = function (_player) {
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                if (item.getGameModePlayer() == _player) {
                    item.destroy();
                    this.players.removeChild(item);
                    this.items.splice(i, 1);
                    break;
                }
            }
            this.updateAll();
        };
        ScoreboardTeam.prototype.updateAll = function () {
            for (var i = 0; i < this.items.length; i++) {
                this.items[i].updateAll();
            }
            this.items.sort(this.comparePlayers);
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                item.y = i * (item.height + ScoreboardTeam.PLAYER_PADDING);
                item.setNum(i + 1);
            }
        };
        ScoreboardTeam.prototype.comparePlayers = function (_a, _b) {
            if (DinogenArena.GameUtil.GetGameState().gameMode.getKOTH()) {
                if (_a.getGameModePlayer().hillPoints < _b.getGameModePlayer().hillPoints) {
                    return 1;
                }
                if (_a.getGameModePlayer().hillPoints > _b.getGameModePlayer().hillPoints) {
                    return -1;
                }
            }
            else {
                if (_a.playerKills < _b.playerKills) {
                    return 1;
                }
                if (_a.playerKills > _b.playerKills) {
                    return -1;
                }
            }
            return 0;
        };
        ScoreboardTeam.prototype.removeAllPlayers = function () {
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                item.destroy();
                this.players.removeChild(item);
                this.items.splice(i, 0);
                break;
            }
        };
        ScoreboardTeam.prototype.setTeam = function (_team) {
            var padding = 2;
            var graphics = this.game.add.graphics(0, 0);
            graphics.beginFill(DinogenArena.GameModeManager.GetColourForTeam(_team), 1);
            graphics.drawRect(0, 0, 32, 32);
            var bg0 = this.game.add.image(0, 0, graphics.generateTexture());
            bg0.height = 2;
            bg0.y = 30;
            this.addChild(bg0);
            var bg1 = this.game.add.image(0, 0, graphics.generateTexture());
            bg1.width = ScoreboardTeam.PLAYER_WIDTH;
            bg1.height = bg0.height;
            bg1.x = bg0.x + bg0.width + padding;
            bg1.y = bg0.y;
            this.addChild(bg1);
            var bg2 = this.game.add.image(0, 0, graphics.generateTexture());
            bg2.width = ScoreboardTeam.DEFAULT_WIDTH;
            bg2.height = bg0.height;
            bg2.x = bg1.x + bg1.width + padding;
            bg2.y = bg0.y;
            this.addChild(bg2);
            var bg3 = this.game.add.image(0, 0, graphics.generateTexture());
            bg3.width = ScoreboardTeam.DEFAULT_WIDTH;
            bg3.height = bg0.height;
            bg3.x = bg2.x + bg2.width + padding;
            bg3.y = bg0.y;
            this.addChild(bg3);
            if (DinogenArena.GameUtil.GetGameState().gameMode.getKOTH()) {
                var bg4 = this.game.add.image(0, 0, graphics.generateTexture());
                bg4.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg4.height = bg0.height;
                bg4.x = bg3.x + bg3.width + padding;
                bg4.y = bg0.y;
                this.addChild(bg4);
            }
            else if (DinogenArena.GameUtil.GetGameState().gameMode.getCTF()) {
                var bg4 = this.game.add.image(0, 0, graphics.generateTexture());
                bg4.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg4.height = bg0.height;
                bg4.x = bg3.x + bg3.width + padding;
                bg4.y = bg0.y;
                this.addChild(bg4);
                var bg5 = this.game.add.image(0, 0, graphics.generateTexture());
                bg5.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg5.height = bg0.height;
                bg5.x = bg4.x + bg4.width + padding;
                bg5.y = bg0.y;
                this.addChild(bg5);
            }
            graphics.destroy();
        };
        ScoreboardTeam.PLAYER_PADDING = 2;
        ScoreboardTeam.PLAYER_WIDTH = 128;
        ScoreboardTeam.DEFAULT_WIDTH = 64;
        return ScoreboardTeam;
    }(Phaser.Group));
    DinogenArena.ScoreboardTeam = ScoreboardTeam;
    var ScoreboardPlayer = /** @class */ (function (_super) {
        __extends(ScoreboardPlayer, _super);
        function ScoreboardPlayer(_gameModePlayer, _bShowTeam) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.playerKills = 0;
            _this.playerDeaths = 0;
            _this.playerName = "";
            _this.bShowTeam = false;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.7);
            graphics.drawRect(0, 0, 32, 32);
            var padding = 2;
            var bg0 = _this.game.add.image(0, 0, graphics.generateTexture());
            _this.addChild(bg0);
            var bg1 = _this.game.add.image(0, 0, graphics.generateTexture());
            bg1.width = ScoreboardTeam.PLAYER_WIDTH;
            bg1.x = bg0.x + bg0.width + padding;
            _this.addChild(bg1);
            var bg2 = _this.game.add.image(0, 0, graphics.generateTexture());
            bg2.width = ScoreboardTeam.DEFAULT_WIDTH;
            bg2.x = bg1.x + bg1.width + padding;
            _this.addChild(bg2);
            var bg3 = _this.game.add.image(0, 0, graphics.generateTexture());
            bg3.width = ScoreboardTeam.DEFAULT_WIDTH;
            bg3.x = bg2.x + bg2.width + padding;
            _this.addChild(bg3);
            if (DinogenArena.GameUtil.GetGameState().gameMode.getKOTH()) {
                var bg4 = _this.game.add.image(0, 0, graphics.generateTexture());
                bg4.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg4.x = bg3.x + bg3.width + padding;
                _this.addChild(bg4);
            }
            else if (DinogenArena.GameUtil.GetGameState().gameMode.getCTF()) {
                var bg4 = _this.game.add.image(0, 0, graphics.generateTexture());
                bg4.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg4.x = bg3.x + bg3.width + padding;
                _this.addChild(bg4);
                var bg5 = _this.game.add.image(0, 0, graphics.generateTexture());
                bg5.width = ScoreboardTeam.DEFAULT_WIDTH;
                bg5.x = bg4.x + bg4.width + padding;
                _this.addChild(bg5);
            }
            graphics.destroy();
            var yPadding = 3;
            _this.numText = _this.game.add.text(bg0.x + bg0.width * 0.5, bg0.y + yPadding + bg0.height * 0.5, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "center" });
            _this.numText.anchor.set(0.5, 0.5);
            //this.numText.alpha = 0.5;
            _this.addChild(_this.numText);
            _this.playerText = _this.game.add.text(bg1.x + 6, bg1.y + yPadding + bg1.height * 0.5, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left", boundsAlignV: "center" });
            _this.playerText.setTextBounds(0, 0, bg1.width, bg1.height);
            _this.playerText.anchor.set(0, 0.5);
            //this.playerText.alpha = 0.5;
            _this.addChild(_this.playerText);
            _this.killsText = _this.game.add.text(bg2.x + bg2.width * 0.5, bg2.y + yPadding + bg2.height * 0.5, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "center" });
            _this.killsText.anchor.set(0.5, 0.5);
            //this.killsText.alpha = 0.5;
            _this.addChild(_this.killsText);
            _this.deathsText = _this.game.add.text(bg3.x + bg3.width * 0.5, bg3.y + yPadding + bg3.height * 0.5, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "center" });
            _this.deathsText.anchor.set(0.5, 0.5);
            //this.deathsText.alpha = 0.5;
            _this.addChild(_this.deathsText);
            if (DinogenArena.GameUtil.GetGameState().gameMode.getKOTH()) {
                _this.scoreText = _this.game.add.text(bg4.x + bg4.width * 0.5, bg4.y + yPadding + bg4.height * 0.5, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "center" });
                _this.scoreText.anchor.set(0.5, 0.5);
                _this.addChild(_this.scoreText);
            }
            else if (DinogenArena.GameUtil.GetGameState().gameMode.getCTF()) {
                _this.capturesText = _this.game.add.text(bg4.x + bg4.width * 0.5, bg4.y + yPadding + bg4.height * 0.5, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "center" });
                _this.capturesText.anchor.set(0.5, 0.5);
                _this.addChild(_this.capturesText);
                _this.returnsText = _this.game.add.text(bg5.x + bg5.width * 0.5, bg5.y + yPadding + bg5.height * 0.5, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "center" });
                _this.returnsText.anchor.set(0.5, 0.5);
                _this.addChild(_this.returnsText);
            }
            _this.gameModePlayer = _gameModePlayer;
            _this.bShowTeam = _bShowTeam;
            if (!_this.gameModePlayer.isUserPlayer()) {
                _this.alpha = 0.5;
            }
            return _this;
        }
        ScoreboardPlayer.prototype.destroy = function () {
            this.numText = null;
            this.playerText = null;
            this.killsText = null;
            this.deathsText = null;
            this.gameModePlayer = null;
            _super.prototype.destroy.call(this);
        };
        ScoreboardPlayer.prototype.updateAll = function () {
            if (this.gameModePlayer) {
                this.setName(this.gameModePlayer.getName());
                this.setKills(this.gameModePlayer.getKills());
                this.setDeaths(this.gameModePlayer.getDeaths());
                if (this.scoreText) {
                    this.setScore((this.gameModePlayer.getHillPoints() / DinogenArena.GameUtil.GetGameState().gameMode.getKOTH().getScoreLimit()) * 100);
                }
                if (this.capturesText) {
                    this.setCaptures(this.gameModePlayer.getFlagCaptures());
                    this.setReturns(this.gameModePlayer.getFlagReturns());
                }
            }
        };
        ScoreboardPlayer.prototype.setName = function (_str) {
            if (this.playerName) {
                return;
            }
            this.playerName = _str;
            if (this.bShowTeam) {
                var colour = DinogenArena.GameModeManager.GetColourForTeam(this.gameModePlayer.getTeam());
                //this.playerText.fill = "#" + colour.toString(16);
                this.playerText.alpha = 1;
                this.playerText.setText(_str);
                var graphics = this.game.add.graphics();
                graphics.beginFill(colour, 1);
                graphics.drawRect(0, 0, 32, 32);
                var team = this.game.add.image(0, 0, graphics.generateTexture());
                graphics.destroy();
                team.width = team.height = 8;
                team.x = (this.playerText.x + 4);
                team.y = this.playerText.textBounds.halfHeight - (team.height * 0.5);
                this.playerText.x = team.x + team.width + 4;
                this.add(team);
            }
            else {
                this.playerText.setText(_str);
            }
        };
        ScoreboardPlayer.prototype.setKills = function (_val) {
            this.playerKills = _val;
            this.killsText.setText(_val.toString());
        };
        ScoreboardPlayer.prototype.setDeaths = function (_val) {
            this.playerDeaths = _val;
            this.deathsText.setText(_val.toString());
        };
        ScoreboardPlayer.prototype.setScore = function (_val) {
            this.scoreText.setText(Math.round(_val) + "%");
        };
        ScoreboardPlayer.prototype.setCaptures = function (_val) {
            this.capturesText.setText(_val.toString());
        };
        ScoreboardPlayer.prototype.setReturns = function (_val) {
            this.returnsText.setText(_val.toString());
        };
        ScoreboardPlayer.prototype.getGameModePlayer = function () {
            return this.gameModePlayer;
        };
        ScoreboardPlayer.prototype.setNum = function (_val) {
            this.numText.setText(_val.toString());
        };
        return ScoreboardPlayer;
    }(Phaser.Group));
    DinogenArena.ScoreboardPlayer = ScoreboardPlayer;
    var MenuElement_GameMode = /** @class */ (function (_super) {
        __extends(MenuElement_GameMode, _super);
        function MenuElement_GameMode() {
            var _this = _super.call(this) || this;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_CENTER;
            _this.alignVertical = UIBase.ALIGN_VERTICAL_TOP;
            _this.offsetY = 10;
            var padding = 8;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0.5);
            graphics.drawRoundedRect(0, 0, 300, 64, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.addChild(_this.bg);
            _this.modeText = _this.game.add.text(0, 0, "", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.modeText.anchor.set(0.5, 0.5);
            _this.modeText.position.set(_this.bg.width * 0.5, (_this.bg.height * 0.5) - padding);
            _this.addChild(_this.modeText);
            _this.descText = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.descText.alpha = 0.5;
            _this.descText.anchor.set(0.5, 0);
            _this.descText.position.set(_this.modeText.x, _this.modeText.y + padding);
            _this.addChild(_this.descText);
            _this.show();
            return _this;
        }
        MenuElement_GameMode.prototype.destroy = function () {
            this.bg = null;
            this.modeText = null;
            this.descText = null;
            _super.prototype.destroy.call(this);
        };
        MenuElement_GameMode.prototype.setData = function (_gameMode) {
            var info = _gameMode.info;
            this.modeText.setText(info["name"]);
            if (_gameMode instanceof DinogenArena.GameMode_TeamDeathmatch) {
                var tdm = _gameMode;
                this.descText.setText(tdm.getScoreLimit() + " kills to win");
            }
            else if (_gameMode instanceof DinogenArena.GameMode_Deathmatch) {
                var dm = _gameMode;
                this.descText.setText(dm.getScoreLimit() + " kills to win");
            }
            else if (_gameMode instanceof DinogenArena.GameMode_Evolution) {
                var evo = _gameMode;
                if (_gameMode.getUserPlayer().getTeam() == 0) {
                    this.descText.setText("Prevent the dinosaur from evolving");
                }
                else {
                    this.descText.setText("Kill humans to evolve");
                }
            }
            else if (_gameMode instanceof DinogenArena.GameMode_DinoHunt) {
                var hunt = _gameMode;
                if (_gameMode.getUserPlayer().getTeam() == 0) {
                    this.descText.setText("Kill " + hunt.getHunterKillsMax() + " raptors to win");
                }
                else {
                    this.descText.setText("Kill the hunter");
                }
            }
            else if (_gameMode instanceof DinogenArena.GameMode_Rex) {
                var rex = _gameMode;
                if (_gameMode.getUserPlayer().getTeam() == 0) {
                    this.descText.setText("Kill the T Rex");
                }
                else {
                    this.descText.setText("Kill the humans");
                }
            }
            else {
                var gameMode = DinogenArena.GameUtil.GetGameState().gameMode;
                if (gameMode.info["teamInstructions"]) {
                    this.descText.setText(gameMode.info["instructions"][_gameMode.getUserPlayer().getTeam()]);
                }
                else {
                    this.descText.setText(gameMode.info["instructions"]);
                }
            }
            this.readjustToStage();
        };
        return MenuElement_GameMode;
    }(MenuElement));
    DinogenArena.MenuElement_GameMode = MenuElement_GameMode;
    var MenuElement_Quit = /** @class */ (function (_super) {
        __extends(MenuElement_Quit, _super);
        function MenuElement_Quit() {
            var _this = _super.call(this) || this;
            _this.alignHorizontal = UIBase.ALIGN_HORIZONTAL_CENTER;
            _this.alignVertical = UIBase.ALIGN_VERTICAL_BOTTOM;
            _this.offsetY = -10;
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0x000000, 0);
            graphics.drawRect(0, 0, 32, 32);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.bg.width = 200;
            _this.bg.height = 1;
            _this.addChild(_this.bg);
            _this.restartButton = new DinogenArena.MenuButton(_this.onRestartClicked, _this, null, true);
            _this.restartButton.setLabelText("\u21BB Replay");
            _this.restartButton.position.set((_this.bg.width * 0.5) - (_this.restartButton.width * 0.5), 0);
            _this.addChild(_this.restartButton);
            _this.quitButton = new DinogenArena.MenuButton(_this.onQuitClicked, _this, null, true);
            _this.quitButton.position.set(_this.restartButton.x, _this.restartButton.y + _this.restartButton.height + 4);
            _this.quitButton.setLabelText("Quit");
            _this.addChild(_this.quitButton);
            return _this;
        }
        MenuElement_Quit.prototype.destroy = function () {
            this.bg = null;
            this.restartButton = null;
            this.quitButton = null;
            _super.prototype.destroy.call(this);
        };
        MenuElement_Quit.prototype.onRestartClicked = function () {
            if (!this.bIsShowing) {
                return;
            }
            this.restartGame();
        };
        MenuElement_Quit.prototype.restartGame = function () {
            DinogenArena.GameUtil.game.fadeToBlack(DinogenArena.GameUtil.game.restartGame, DinogenArena.GameUtil.game);
        };
        MenuElement_Quit.prototype.onQuitClicked = function () {
            if (!this.bIsShowing) {
                return;
            }
            var gotoMenu = DinogenArena.GameUtil.GetGameState().gameMode.isSurvival() ? MainMenu.MENU_SURVIVAL : MainMenu.MENU_RANKED;
            this.engine.fadeToBlack(this.engine.loadMainMenu, this.engine, [gotoMenu]);
        };
        return MenuElement_Quit;
    }(MenuElement));
    DinogenArena.MenuElement_Quit = MenuElement_Quit;
    var PauseMenu = /** @class */ (function (_super) {
        __extends(PauseMenu, _super);
        function PauseMenu() {
            var _this = _super.call(this, DinogenArena.GameUtil.GetGameState().layerPauseMenu) || this;
            _this.bBlurWorld = true;
            _this.bg = _this.createOverlay();
            _this.add(_this.bg);
            var offset = DinogenArena.GameUtil.GetGameState().gameMode.isCampaign() ? 0 : 80;
            _this.buttonsElement = new PauseMenu_ButtonsElement();
            _this.buttonsElement.position.set(100, ((_this.game.height * 0.5) - offset) - (_this.buttonsElement.height * 0.5));
            _this.add(_this.buttonsElement);
            _this.gameElement = new PauseMenu_GameElement();
            _this.gameElement.position.set((_this.game.width - _this.gameElement.width) - 100, ((_this.game.height * 0.5) - offset) - (_this.gameElement.height * 0.5));
            _this.add(_this.gameElement);
            if (DinogenArena.GameUtil.GetGameState().gameMode.isCustom()) {
                _this.playerElement = new PauseMenu_PlayerElement();
                _this.playerElement.position.set((_this.game.width * 0.5) - (_this.playerElement.width * 0.5), (_this.game.height - _this.playerElement.height) - 20);
                _this.add(_this.playerElement);
            }
            else if (DinogenArena.GameUtil.GetGameState().gameMode.isSurvival()) {
                var survivalInfo = new DinogenArena.SurvivalInfo();
                survivalInfo.position.set((_this.game.width * 0.5) - (survivalInfo.width * 0.5), (_this.game.height - survivalInfo.height) - 20);
                _this.add(survivalInfo);
            }
            var socialLayer = _this.game.add.group();
            _this.add(socialLayer);
            var socialItems = DinogenArena.GameUtil.CreateSocialItems();
            socialLayer.add(socialItems);
            _this.show();
            return _this;
        }
        PauseMenu.prototype.destroy = function () {
            this.bg = null;
            this.buttonsElement = null;
            this.gameElement = null;
            this.playerElement = null;
            _super.prototype.destroy.call(this);
        };
        PauseMenu.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            //this.destroy();
        };
        return PauseMenu;
    }(MenuBase));
    DinogenArena.PauseMenu = PauseMenu;
    var PauseMenu_ButtonsElement = /** @class */ (function (_super) {
        __extends(PauseMenu_ButtonsElement, _super);
        function PauseMenu_ButtonsElement() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.pauseText = _this.game.add.text(0, 0, "Game Paused", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.add(_this.pauseText);
            var padding = 4;
            _this.resumeButton = new DinogenArena.MenuButton(_this.onResumeClicked, _this, null, true);
            _this.resumeButton.setLabelText("Resume");
            _this.resumeButton.position.set((_this.pauseText.x + (_this.pauseText.width * 0.5)) - (_this.resumeButton.width * 0.5), _this.pauseText.y + _this.pauseText.height + padding);
            _this.add(_this.resumeButton);
            _this.restartButton = new DinogenArena.MenuButton(_this.onRestartClicked, _this, null, true);
            _this.restartButton.setLabelText("Restart");
            _this.restartButton.position.set(_this.resumeButton.x, _this.resumeButton.y + _this.resumeButton.height + padding);
            _this.add(_this.restartButton);
            _this.settingsButton = new DinogenArena.MenuButton(_this.onSettingsClicked, _this, null, true);
            _this.settingsButton.setLabelText("Settings");
            _this.settingsButton.position.set(_this.restartButton.x, _this.restartButton.y + _this.restartButton.height + padding);
            _this.add(_this.settingsButton);
            _this.quitButton = new DinogenArena.MenuButton(_this.onQuitClicked, _this, null, true);
            _this.quitButton.setLabelText("Quit");
            _this.quitButton.position.set(_this.settingsButton.x, _this.settingsButton.y + _this.settingsButton.height + padding);
            _this.add(_this.quitButton);
            return _this;
            /*
            var line = this.createLine();
            line.y = this.restartButton.y + this.restartButton.height;
            */
        }
        PauseMenu_ButtonsElement.prototype.destroy = function () {
            this.pauseText = null;
            this.resumeButton = null;
            this.restartButton = null;
            this.quitButton = null;
            _super.prototype.destroy.call(this);
        };
        PauseMenu_ButtonsElement.prototype.createLine = function () {
            var line = this.game.add.graphics();
            line.beginFill(0xFFFFFF, 0.1);
            line.drawRect(0, 0, 120, 1);
            this.add(line);
            return line;
        };
        PauseMenu_ButtonsElement.prototype.onResumeClicked = function () {
            DinogenArena.GameUtil.GetGameState().setPaused(false);
        };
        PauseMenu_ButtonsElement.prototype.restartGame = function () {
            DinogenArena.GameUtil.game.fadeToBlack(DinogenArena.GameUtil.game.restartGame, DinogenArena.GameUtil.game);
        };
        PauseMenu_ButtonsElement.prototype.quitGame = function () {
            DinogenArena.GameUtil.game.fadeToBlack(DinogenArena.GameUtil.game.loadMainMenu, DinogenArena.GameUtil.game, [DinogenArena.PlayerManager.CurrentProfile.getLastMenuId()]);
        };
        PauseMenu_ButtonsElement.prototype.onRestartClicked = function () {
            var bCampaign = DinogenArena.GameUtil.GetGameState().gameMode.isCampaign();
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Restart",
                type: Window.TYPE_YES_NO,
                descText: "Are you sure you want to restart this game?",
                yesCallback: this.restartGame,
                yesCallbackContext: this
            });
        };
        PauseMenu_ButtonsElement.prototype.onQuitClicked = function () {
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Quit",
                type: Window.TYPE_YES_NO,
                descText: "Are you sure you want to quit this game?",
                yesCallback: this.quitGame,
                yesCallbackContext: this
            });
        };
        PauseMenu_ButtonsElement.prototype.onSettingsClicked = function () {
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Settings",
                type: Window.TYPE_SETTINGS,
                descText: "Configure game settings."
            });
        };
        PauseMenu_ButtonsElement.prototype.onGuideClicked = function () {
            DinogenArena.GameUtil.OpenDinogenArenaGuide();
        };
        return PauseMenu_ButtonsElement;
    }(Phaser.Group));
    DinogenArena.PauseMenu_ButtonsElement = PauseMenu_ButtonsElement;
    var PauseMenu_PlayerElement = /** @class */ (function (_super) {
        __extends(PauseMenu_PlayerElement, _super);
        function PauseMenu_PlayerElement() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var padding = 8;
            var bIsCustom = DinogenArena.GameUtil.GetGameState().gameMode.isCustom();
            var totalWidth = 800;
            _this.xpBar = new DinogenArena.XPBar(totalWidth, bIsCustom);
            _this.add(_this.xpBar);
            if (bIsCustom) {
                _this.challengesButton = new DinogenArena.CustomModeButton(_this.onChallengesClicked, _this);
                _this.challengesButton.setIcon("icon_button_challenges");
                _this.challengesButton.setLabelText("View Challenges");
                _this.challengesButton.x = (totalWidth * 0.5) - (_this.challengesButton.width * 0.5);
                _this.challengesButton.y = (_this.xpBar.y + _this.xpBar.height) - 10;
                _this.add(_this.challengesButton);
            }
            var gfx = _this.game.add.graphics();
            gfx.beginFill(0xFFFFFF, 0);
            gfx.drawRect(0, 0, _this.width, _this.height);
            _this.addAt(gfx, 0);
            return _this;
        }
        PauseMenu_PlayerElement.prototype.onChallengesClicked = function () {
            DinogenArena.GameUtil.game.createWindow({
                titleText: "Challenges",
                type: Window.TYPE_CHALLENGES,
                descText: "Complete challenges for bonus XP."
            });
        };
        PauseMenu_PlayerElement.prototype.destroy = function () {
            this.xpBar.destroy();
            _super.prototype.destroy.call(this);
        };
        return PauseMenu_PlayerElement;
    }(Phaser.Group));
    DinogenArena.PauseMenu_PlayerElement = PauseMenu_PlayerElement;
    var PauseMenu_GameElement = /** @class */ (function (_super) {
        __extends(PauseMenu_GameElement, _super);
        function PauseMenu_GameElement() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var info = DinogenArena.GameUtil.GetGameState().gameMode.info;
            var modeIcon = _this.game.add.image(0, 0, "atlas_ui", "icon_" + info["id"]);
            modeIcon.anchor.set(0.5, 0);
            _this.add(modeIcon);
            _this.modeNameText = _this.game.add.text(0, modeIcon.y + modeIcon.height + 8, info["name"], { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.addChild(_this.modeNameText);
            var team = DinogenArena.GameUtil.GetGameState().playerController.getGameModePlayer() ? DinogenArena.GameUtil.GetGameState().playerController.getGameModePlayer().getTeam() : 0;
            //"\nObjective: " + GameModeManager.GetInstructions(info, team)
            _this.modeDescText = _this.game.add.text(0, (_this.modeNameText.y + _this.modeNameText.height) - 4, info["desc"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center" });
            _this.modeDescText.alpha = 0.5;
            _this.addChild(_this.modeDescText);
            if (DinogenArena.GameUtil.GetGameState().gameMode instanceof DinogenArena.CustomGameMode) {
                var padding = 32;
                var mapContainer = _this.game.add.group();
                _this.add(mapContainer);
                var mapData = DinogenArena.GameUtil.GetGameState().mapData;
                var overlayBg = _this.game.add.graphics();
                overlayBg.beginFill(0x000000, 0.5);
                overlayBg.drawRoundedRect(0, 0, 420, 280, DinogenArena.GameUtil.RECTANGLE_RADIUS);
                mapContainer.addAt(overlayBg, 0);
                _this.mapOverlay = _this.game.add.image(0, 0, "atlas_map_overlays", mapData["id"]);
                _this.mapOverlay.x = (overlayBg.width * 0.5) - (_this.mapOverlay.width * 0.5);
                _this.mapOverlay.y = (overlayBg.height * 0.5) - (_this.mapOverlay.height * 0.5);
                mapContainer.add(_this.mapOverlay);
                var posScale = 0.1;
                var mapIconContainer = _this.game.add.group();
                mapIconContainer.x = _this.mapOverlay.x;
                mapIconContainer.y = _this.mapOverlay.y;
                mapContainer.add(mapIconContainer);
                var pawns = DinogenArena.GameUtil.GetGameState().pawns;
                for (var i = 0; i < pawns.length; i++) {
                    var pawn = pawns[i];
                    if (pawn.isAlive()) {
                        var icon = _this.game.add.image(pawn.x * posScale, pawn.y * posScale, "atlas_ui", pawn.getMinimapIconId());
                        icon.anchor.set(0.5, 0.5);
                        icon.rotation = pawn.rotation;
                        if (!pawn.isPlayer()) {
                            icon.tint = pawn.isPlayerAlly() ? DinogenArena.GameUtil.COLOUR_ALLY : DinogenArena.GameUtil.COLOUR_ENEMY;
                        }
                        var pawnScale = pawn.getMinimapIconScale();
                        icon.scale.set(pawnScale, pawnScale);
                        mapIconContainer.add(icon);
                    }
                }
                var ctf = DinogenArena.GameUtil.GetGameState().gameMode.getCTF();
                if (ctf) {
                    for (var i = 0; i < ctf.getNumTeams(); i++) {
                        var flag = ctf.getFlag(i);
                        if (flag) {
                            var icon = _this.game.add.image(flag.x * posScale, flag.y * posScale, "atlas_ui", "indicator_flag");
                            icon.anchor.set(0.5, 0.5);
                            icon.scale.set(0.75, 0.75);
                            icon.tint = DinogenArena.GameModeManager.GetColourForTeam(i);
                            mapIconContainer.add(icon);
                        }
                    }
                }
                var koth = DinogenArena.GameUtil.GetGameState().gameMode.getKOTH();
                if (koth) {
                    var hillPos = koth.getHillZonePosition();
                    var icon = _this.game.add.image(hillPos.x * posScale, hillPos.y * posScale, "atlas_ui", "indicator_crown");
                    icon.anchor.set(0.5, 0.5);
                    icon.tint = DinogenArena.GameUtil.COLOUR_XP;
                    mapIconContainer.add(icon);
                }
                mapContainer.y = _this.modeDescText.y + _this.modeDescText.height + padding;
            }
            _this.modeNameText.setTextBounds(0, 0, _this.width, 32);
            _this.modeDescText.setTextBounds(0, 0, _this.width, 32);
            modeIcon.x = _this.width * 0.5;
            return _this;
        }
        Object.defineProperty(PauseMenu_GameElement.prototype, "width", {
            get: function () {
                return 400;
            },
            enumerable: true,
            configurable: true
        });
        PauseMenu_GameElement.prototype.destroy = function () {
            this.modeNameText = null;
            this.modeDescText = null;
            this.mapOverlay = null;
            _super.prototype.destroy.call(this);
        };
        return PauseMenu_GameElement;
    }(Phaser.Group));
    DinogenArena.PauseMenu_GameElement = PauseMenu_GameElement;
    var SurvivalMenu = /** @class */ (function (_super) {
        __extends(SurvivalMenu, _super);
        function SurvivalMenu(_survival) {
            var _this = _super.call(this) || this;
            //this.enableEscapeKey();
            _this.bBlurWorld = true;
            _this.bHideHUD = true;
            _this.survival = _survival;
            var padding = 12;
            _this.bg = _this.createOverlay();
            _this.addAt(_this.bg, 0);
            _this.titleText = _this.game.add.text(_this.bg.width * 0.5, padding, "Armory", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.titleText.anchor.set(0.5, 0);
            _this.add(_this.titleText);
            _this.moneyText = _this.game.add.text(_this.bg.width * 0.5, _this.titleText.y + (_this.titleText.height + 12), "", { font: "24px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
            _this.moneyText.anchor.set(0.5, 0.5);
            _this.add(_this.moneyText);
            _this.closeButton = new DinogenArena.CloseButton(_this.close, _this);
            _this.closeButton.close.anchor.set(1, 0);
            _this.closeButton.position.set(_this.bg.width - padding, padding);
            _this.add(_this.closeButton);
            var inventoryText = _this.game.add.text(_this.bg.width * 0.5, _this.moneyText.y + _this.moneyText.height, "Inventory", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            inventoryText.anchor.set(0.5, 0);
            _this.add(inventoryText);
            _this.addLine(inventoryText.y + inventoryText.height);
            _this.inventoryContainer = _this.game.add.group();
            _this.inventoryContainer.y = inventoryText.y + inventoryText.height + 4;
            _this.add(_this.inventoryContainer);
            _this.updateInventory();
            var categoryText = _this.game.add.text(_this.bg.width * 0.5, _this.inventoryContainer.y + _this.inventoryContainer.height + 32, "Buy", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            categoryText.anchor.set(0.5, 0);
            _this.add(categoryText);
            _this.addLine(categoryText.y + categoryText.height);
            _this.categoryContainer = _this.game.add.group();
            var arr = [
                { id: "weapons", label: "Weapons", key: "atlas_weapons", frame: DinogenArena.InventoryManager.ITEM_FIREARM_HK417 },
                { id: DinogenArena.SurvivalManager.SUPPORT_SOLDIER, label: "Soldiers", key: "atlas_ui", frame: "soldier_sniper" },
                { id: DinogenArena.SurvivalManager.SUPPORT_AIR, label: "Air Support", key: "atlas_ui", frame: "heli_apache" }
            ];
            for (var i = 0; i < arr.length; i++) {
                var itemData = arr[i];
                var but = new DinogenArena.SurvivalButton(_this.loadCategory, _this, [itemData["id"]]);
                but.setLabelText(itemData["label"]);
                but.setIcon(itemData["key"], itemData["frame"]);
                if (itemData["id"] == DinogenArena.SurvivalManager.SUPPORT_SOLDIER) {
                    _this.soldiersButton = but;
                }
                else if (itemData["id"] == DinogenArena.SurvivalManager.SUPPORT_AIR) {
                    _this.airButton = but;
                }
                but.x = i * (but.width + 4);
                _this.categoryContainer.add(but);
            }
            _this.updateSupport();
            _this.categoryContainer.x = (_this.bg.width * 0.5) - (_this.categoryContainer.width * 0.5);
            _this.categoryContainer.y = categoryText.y + categoryText.height + 4;
            _this.add(_this.categoryContainer);
            var perkText = _this.game.add.text(_this.bg.width * 0.5, _this.categoryContainer.y + _this.categoryContainer.height + 32, "Perks", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            perkText.anchor.set(0.5, 0);
            _this.add(perkText);
            _this.addLine(perkText.y + perkText.height);
            _this.perksContainer = _this.game.add.group();
            _this.perksContainer.y = perkText.y + perkText.height + 4;
            _this.add(_this.perksContainer);
            _this.perksDescText = _this.game.add.text(0, _this.bg.height - 24, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.perksDescText.setTextBounds(0, 0, _this.bg.width, 32);
            _this.add(_this.perksDescText);
            _this.updatePerks();
            DinogenArena.SoundManager.PlayUISound("ui_armory");
            return _this;
        }
        SurvivalMenu.prototype.destroy = function () {
            this.bg = null;
            this.titleText = null;
            this.moneyText = null;
            this.closeButton = null;
            this.survival = null;
            this.inventoryContainer = null;
            this.ammoTexts = null;
            this.ammoButtons = null;
            this.perkButtons = null;
            this.perksContainer = null;
            this.perksDescText = null;
            this.categoryContainer = null;
            _super.prototype.destroy.call(this);
        };
        SurvivalMenu.prototype.addLine = function (_y) {
            var gfx = this.game.add.graphics();
            gfx.beginFill(0xFFFFFF, 0.2);
            gfx.drawRect(0, 0, this.width, 1);
            gfx.position.set(this.width * 0.5 - (gfx.width * 0.5), _y - 1);
            this.add(gfx);
            return gfx;
        };
        SurvivalMenu.prototype.loadCategory = function (_id) {
            if (_id == "weapons") {
                this.engine.createWindow({
                    titleText: "Buy New Weapon",
                    index: 0,
                    loadout: null,
                    type: Window.TYPE_WEAPONS,
                    bSurvival: true,
                    descText: "Select a weapon.",
                    onCloseCallback: this.updateAll,
                    onCloseCallbackContext: this
                });
            }
            else if (_id == DinogenArena.SurvivalManager.SUPPORT_SOLDIER) {
                //this.survival.addPlayer("Broseph", 0, false);
                this.engine.createWindow({
                    titleText: "Buy Soldier",
                    type: Window.TYPE_SURVIVAL_SUPPORT,
                    descText: "Select a soldier type.",
                    supportType: _id,
                    bSurvival: true,
                    onCloseCallback: this.updateAll,
                    onCloseCallbackContext: this
                });
            }
            else if (_id == DinogenArena.SurvivalManager.SUPPORT_AIR) {
                //this.survival.addHelicopter(this.survival.getUserPlayer(), Helicopter.TYPE_OSPREY);
                this.engine.createWindow({
                    titleText: "Buy Air Support",
                    type: Window.TYPE_SURVIVAL_SUPPORT,
                    descText: "Select air support type.",
                    supportType: _id,
                    bSurvival: true,
                    onCloseCallback: this.updateAll,
                    onCloseCallbackContext: this
                });
            }
        };
        SurvivalMenu.prototype.updateInventory = function () {
            this.ammoTexts = [];
            this.ammoButtons = [];
            this.inventoryContainer.removeAll(true);
            var char = DinogenArena.GameUtil.GetGameState().player;
            var arr = char.getInventoryItems();
            for (var i = 0; i < arr.length; i++) {
                var container = this.game.add.group();
                var firearm = arr[i];
                var bg = this.game.add.graphics();
                bg.beginFill(0xFFFFFF, 0);
                bg.drawRect(0, 0, 240, 100);
                container.add(bg);
                var nameText = this.game.add.text(0, 0, firearm.getName(), { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
                nameText.setTextBounds(0, 0, bg.width, 32);
                container.add(nameText);
                var ammoText = this.game.add.text(0, 0, firearm.getMag() + " / " + firearm.getAmmo(), { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
                ammoText.y = bg.height - ammoText.height;
                ammoText.alpha = 0.5;
                ammoText.setTextBounds(0, 0, bg.width, 32);
                container.add(ammoText);
                this.ammoTexts.push(ammoText);
                var icon = this.game.add.image(0, 0, "atlas_weapons", arr[i].getId());
                icon.anchor.set(0.5, 0.5);
                icon.x = bg.width * 0.5;
                icon.y = bg.height * 0.5;
                container.add(icon);
                var button = new DinogenArena.MenuButton(this.onBuyAmmoClicked, this, [i, firearm.getMagMax(), firearm.getAmmoCost()], true, 200);
                var cost = firearm.getAmmoCost();
                var butText = "+" + firearm.getMagMax() + " Rounds:";
                button.setLabelText(butText + " $" + cost);
                button.labelText.addColor(DinogenArena.GameUtil.COLOUR_XP_STRING, butText.length);
                button.position.set((bg.width * 0.5) - (button.width * 0.5), bg.height + 4);
                button.setEnabled(this.survival.getSurvivalMoney() >= cost);
                container.add(button);
                this.ammoButtons.push(button);
                container.x = i * (container.width + 4);
                this.inventoryContainer.add(container);
            }
            this.inventoryContainer.x = (this.bg.width * 0.5) - (this.inventoryContainer.width * 0.5);
            //this.updateInventoryAmmo();
        };
        SurvivalMenu.prototype.updateInventoryAmmo = function () {
            var char = DinogenArena.GameUtil.GetGameState().player;
            var arr = char.getInventoryItems();
            for (var i = 0; i < this.ammoTexts.length; i++) {
                var firearm = arr[i];
                this.ammoTexts[i].setText(firearm.getMag() + " / " + firearm.getAmmo(), true);
                var bEnabled = this.survival.getSurvivalMoney() >= firearm.getAmmoCost();
                this.ammoButtons[i].bAlphaWhenDisabled = true;
                this.ammoButtons[i].setEnabled(bEnabled);
            }
        };
        SurvivalMenu.prototype.updatePerkStates = function () {
            var char = DinogenArena.GameUtil.GetGameState().player;
            for (var i = 0; i < this.perkButtons.length; i++) {
                var perkButton = this.perkButtons[i];
                var perk = perkButton.getPerk();
                var bHasPerk = char.hasPerk(perk.id);
                perkButton.setPerk(perk, bHasPerk);
                if (bHasPerk) {
                    perkButton.setLockIconVisible(false);
                }
                else {
                    var bCanAfford = this.survival.getSurvivalMoney() >= perk.cost;
                    perkButton.setEnabled(bCanAfford);
                    perkButton.setLockIconVisible(!bCanAfford);
                    if (!bCanAfford) {
                        perkButton.alpha = perkButton.baseAlpha * 0.5;
                    }
                }
            }
        };
        SurvivalMenu.prototype.onBuyAmmoClicked = function (_index, _ammo, _cost) {
            var char = DinogenArena.GameUtil.GetGameState().player;
            char.addAmmoToInventoryItem(_index, _ammo);
            this.survival.useSurvivalMoney(_cost);
            this.updateMoney();
            this.updateInventoryAmmo();
        };
        SurvivalMenu.prototype.updatePerks = function () {
            this.perkButtons = [];
            this.perksContainer.removeAll(true);
            var char = DinogenArena.GameUtil.GetGameState().player;
            var arr = DinogenArena.PerkManager.GetSurvivalPerks(); //[PerkManager.GetPlayerPerkIDs(), PerkManager.GetWeaponPerkIDs()];
            for (var i = 0; i < arr.length; i++) {
                for (var j = 0; j < arr[i].length; j++) {
                    var perk = DinogenArena.PerkManager.GetPerk(arr[i][j]);
                    var perkButton = new DinogenArena.SurvivalPerkButton(this.onSurvivalPerkClicked, this, [perk]);
                    perkButton.events.onInputOver.add(this.onSurvivalPerkOver, this);
                    perkButton.events.onInputOut.add(this.onSurvivalPerkOut, this);
                    perkButton.setPerk(perk, false);
                    perkButton.x = j * (perkButton.width + 12);
                    perkButton.y = i * (perkButton.height + 12);
                    this.perksContainer.add(perkButton);
                    this.perkButtons.push(perkButton);
                }
            }
            this.perksContainer.x = ((this.bg.width * 0.5) - (this.perksContainer.width * 0.5));
            this.updatePerkStates();
        };
        SurvivalMenu.prototype.onSurvivalPerkOver = function (_button) {
            this.perksDescText.setText(_button.getPerk().desc, true);
        };
        SurvivalMenu.prototype.onSurvivalPerkOut = function (_button) {
            this.perksDescText.setText("", true);
        };
        SurvivalMenu.prototype.onSurvivalPerkClicked = function (_perk) {
            var char = DinogenArena.GameUtil.GetGameState().player;
            char.addPerk(_perk.id);
            this.survival.useSurvivalMoney(_perk.cost);
            this.updateMoney();
            this.updatePerkStates();
            //this.updatePerks();
            this.updateInventoryAmmo();
            DinogenArena.SoundManager.PlayUISound("ui_unlock_perk");
        };
        SurvivalMenu.prototype.updateMoney = function () {
            this.moneyText.setText("$" + DinogenArena.WilkinUtil.FormatNum(this.survival.getSurvivalMoney()), true);
            this.moneyText.scale.set(1.5, 1.5);
            var moneyTween = this.game.add.tween(this.moneyText.scale).to({ x: 1, y: 1 }, 500, Phaser.Easing.Back.InOut, true);
        };
        SurvivalMenu.prototype.updateSupport = function () {
            var numSoldiers = (DinogenArena.GameUtil.GetGameState().getNumCharactersForTeam(0) - 1);
            var bSoldiersAvailable = numSoldiers < DinogenArena.GameMode_Survival.MAX_SOLDIERS;
            this.soldiersButton.setDescText(numSoldiers + "/" + DinogenArena.GameMode_Survival.MAX_SOLDIERS);
            this.soldiersButton.setEnabled(bSoldiersAvailable);
            var bAirSpaceAvailable = DinogenArena.GameUtil.GetGameState().getNumHelicopters() == 0;
            this.airButton.setDescText(bAirSpaceAvailable ? "Air Space Available" : "Air Space Occupied");
            this.airButton.setEnabled(bAirSpaceAvailable);
        };
        SurvivalMenu.prototype.updateAll = function () {
            this.updateMoney();
            this.updateInventory();
            this.updateSupport();
            this.updatePerks();
        };
        SurvivalMenu.prototype.show = function () {
            _super.prototype.show.call(this);
            DinogenArena.GameUtil.GetGameState().setPaused(true, false);
            this.updateAll();
        };
        SurvivalMenu.prototype.close = function () {
            _super.prototype.close.call(this);
            DinogenArena.GameUtil.GetGameState().setPaused(false, false);
        };
        return SurvivalMenu;
    }(MenuBase));
    DinogenArena.SurvivalMenu = SurvivalMenu;
    var SetKeyMenu = /** @class */ (function (_super) {
        __extends(SetKeyMenu, _super);
        function SetKeyMenu(_keyId, _callback, _callbackContext) {
            var _this = _super.call(this) || this;
            _this.keyId = _keyId;
            _this.callback = _callback;
            _this.callbackContext = _callbackContext;
            _this.bg = _this.createOverlay();
            _this.addAt(_this.bg, 0);
            var closeButton = new DinogenArena.CloseButton(_this.close, _this);
            closeButton.close.anchor.set(1, 0);
            var padding = 12;
            closeButton.position.set(_this.bg.width - padding, padding);
            _this.addChild(closeButton);
            var totalWidth = _this.width * 0.5;
            var container = _this.game.add.group();
            var bg = _this.game.add.graphics();
            bg.beginFill(0xFFFFFF, 0);
            bg.drawRect(0, 0, totalWidth, 100);
            container.add(bg);
            _this.add(container);
            var infoText = _this.game.add.text(0, 0, "Press a key to assign for:", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            infoText.x = (totalWidth * 0.5) - (infoText.width * 0.5);
            infoText.alpha = 0.5;
            container.add(infoText);
            var text = _this.game.add.text(0, 0, DinogenArena.PlayerControls.GetKeyDescription(_keyId), { font: "24px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            text.x = (totalWidth * 0.5) - (text.width * 0.5);
            text.y = infoText.height;
            container.add(text);
            var gfx = _this.game.add.graphics();
            gfx.beginFill(0xFFFFFF, 1);
            gfx.drawRect(0, 0, 24, 2);
            gfx.x = (totalWidth * 0.5) - (gfx.width * 0.5);
            gfx.y = text.y + text.height + 24;
            container.add(gfx);
            var tween = _this.game.add.tween(gfx).to({ alpha: 0 }, 150, Phaser.Easing.Exponential.InOut, true, 0, Number.MAX_VALUE, true);
            container.x = (_this.width * 0.5) - (container.width * 0.5);
            container.y = (_this.height * 0.5) - (container.height * 0.5);
            _this.show();
            return _this;
        }
        SetKeyMenu.prototype.destroy = function () {
            this.callback = null;
            this.callbackContext = null;
            this.game.input.keyboard.onDownCallback = null;
            this.game.input.keyboard.callbackContext = null;
            _super.prototype.destroy.call(this);
        };
        SetKeyMenu.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this.game.input.keyboard.onDownCallback = this.onKeySet;
            this.game.input.keyboard.callbackContext = this;
        };
        SetKeyMenu.prototype.close = function () {
            _super.prototype.close.call(this);
        };
        SetKeyMenu.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            this.destroy();
        };
        SetKeyMenu.prototype.onKeySet = function (_event) {
            console.log("on key set " + _event.keyCode);
            var bValid = true;
            if (_event.keyCode == Phaser.Keyboard.ESC) {
                bValid = false;
            }
            if (bValid) {
                var profile = DinogenArena.PlayerManager.CurrentProfile;
                profile.controls.setKey(this.keyId, _event.keyCode);
                this.game.input.keyboard.onDownCallback = null;
                this.game.input.keyboard.callbackContext = null;
                DinogenArena.SoundManager.PlayUISound("ui_point");
                if (this.callback) {
                    this.callback.apply(this.callbackContext);
                }
                this.close();
            }
            else {
                DinogenArena.SoundManager.PlayUISound("ui_error");
            }
        };
        return SetKeyMenu;
    }(Blurable));
    DinogenArena.SetKeyMenu = SetKeyMenu;
    var AssignKeyMenu = /** @class */ (function (_super) {
        __extends(AssignKeyMenu, _super);
        function AssignKeyMenu() {
            var _this = _super.call(this) || this;
            _this.bValid = false;
            _this.enableEscapeKey();
            var padding = 12;
            _this.bg = _this.createOverlay();
            _this.addChildAt(_this.bg, 0);
            var closeButton = new DinogenArena.CloseButton(_this.onCloseClicked, _this);
            closeButton.close.anchor.set(1, 0);
            closeButton.position.set(_this.bg.width - padding, padding);
            _this.addChild(closeButton);
            var titleText = _this.game.add.text(_this.bg.width * 0.5, padding, "Assign Keys", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            titleText.anchor.set(0.5, 0);
            _this.add(titleText);
            var resetButton = new DinogenArena.MenuButton(_this.onResetClicked, _this, null, true);
            resetButton.setLabelText("Reset");
            resetButton.position.set((_this.bg.width * 0.5) - (resetButton.width * 0.5), _this.bg.height - padding - resetButton.height);
            _this.add(resetButton);
            _this.createKeys();
            _this.show();
            return _this;
        }
        AssignKeyMenu.prototype.destroy = function () {
            this.keyContainer = null;
            this.keys = null;
            _super.prototype.destroy.call(this);
        };
        AssignKeyMenu.prototype.onCloseClicked = function () {
            if (this.bValid) {
                this.close();
            }
            else {
                DinogenArena.GameUtil.game.createWindow({
                    titleText: "Duplicate Keys",
                    type: Window.TYPE_MESSAGE,
                    descText: "Some controls share the same key. Make sure each control key is unique!",
                    bHideCloseButton: true
                });
            }
        };
        AssignKeyMenu.prototype.onResetClicked = function () {
            DinogenArena.PlayerManager.CurrentProfile.controls.resetToDefaults();
            this.updateKeys();
        };
        AssignKeyMenu.prototype.createKeys = function () {
            if (this.keyContainer) {
                this.keyContainer.destroy();
            }
            this.keys = [];
            var ids = DinogenArena.PlayerControls.GetAllIds();
            for (var i = 0; i < ids.length; i++) {
                //PlayerManager.CurrentProfile.controls.setKey(ids[i], Phaser.Keyboard.P);
            }
            this.keyContainer = this.game.add.group();
            this.addChild(this.keyContainer);
            var padding = 8;
            var but;
            var movementText = this.game.add.text(0, 0, "Movement", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            this.keyContainer.add(movementText);
            var ids = [DinogenArena.PlayerControls.KEY_UP, DinogenArena.PlayerControls.KEY_LEFT, DinogenArena.PlayerControls.KEY_DOWN, DinogenArena.PlayerControls.KEY_RIGHT];
            var container = this.game.add.group();
            for (var i = 0; i < ids.length; i++) {
                var but = new DinogenArena.KeyButton(this.onKeyClicked, this, [ids[i]]);
                but.setData({ keyId: ids[i] });
                but.x = i * (but.width + padding);
                container.add(but);
                this.keys.push(but);
            }
            container.y = this.keyContainer.height;
            this.keyContainer.add(container);
            var playerText = this.game.add.text(0, this.keyContainer.height + (padding * 2), "Player", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            this.keyContainer.add(playerText);
            var ids = [DinogenArena.PlayerControls.KEY_INTERACT, DinogenArena.PlayerControls.KEY_SPRINT, DinogenArena.PlayerControls.KEY_SCOREBOARD];
            var container = this.game.add.group();
            for (var i = 0; i < ids.length; i++) {
                var but = new DinogenArena.KeyButton(this.onKeyClicked, this, [ids[i]]);
                but.setData({ keyId: ids[i] });
                but.x = i * (but.width + padding);
                container.add(but);
                this.keys.push(but);
            }
            container.x = (this.keyContainer.width * 0.5) - (container.width * 0.5);
            container.y = this.keyContainer.height;
            this.keyContainer.add(container);
            var inventoryText = this.game.add.text(0, this.keyContainer.height + (padding * 2), "Inventory", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            this.keyContainer.add(inventoryText);
            var ids = [DinogenArena.PlayerControls.KEY_RELOAD, DinogenArena.PlayerControls.KEY_SWITCH_WEAPON, DinogenArena.PlayerControls.KEY_MELEE];
            var container = this.game.add.group();
            for (var i = 0; i < ids.length; i++) {
                var but = new DinogenArena.KeyButton(this.onKeyClicked, this, [ids[i]]);
                but.setData({ keyId: ids[i] });
                but.x = i * (but.width + padding);
                container.add(but);
                this.keys.push(but);
            }
            container.x = (this.keyContainer.width * 0.5) - (container.width * 0.5);
            container.y = this.keyContainer.height;
            this.keyContainer.add(container);
            movementText.setTextBounds(0, 0, this.keyContainer.width, 32);
            playerText.setTextBounds(0, 0, this.keyContainer.width, 32);
            inventoryText.setTextBounds(0, 0, this.keyContainer.width, 32);
            this.keyContainer.x = Math.round((this.bg.width * 0.5) - (this.keyContainer.width * 0.5));
            this.keyContainer.y = Math.round((this.bg.height * 0.5) - (this.keyContainer.height * 0.5));
            this.verifyKeys();
        };
        AssignKeyMenu.prototype.updateKeys = function () {
            this.createKeys();
        };
        AssignKeyMenu.prototype.verifyKeys = function () {
            this.bValid = true;
            if (this.keys) {
                for (var i = 0; i < this.keys.length; i++) {
                    var keyButton = this.keys[i];
                    for (var j = 0; j < this.keys.length; j++) {
                        var checkButton = this.keys[j];
                        if (keyButton != checkButton) {
                            console.log(keyButton.getKeyCode() + " --> " + checkButton.getKeyCode());
                            if (keyButton.getKeyCode() == checkButton.getKeyCode()) {
                                keyButton.setWarning(true);
                                keyButton.setWarning(true);
                                this.bValid = false;
                            }
                        }
                    }
                }
            }
        };
        AssignKeyMenu.prototype.onKeyClicked = function (_keyId) {
            var menu = new SetKeyMenu(_keyId, this.updateKeys, this);
        };
        AssignKeyMenu.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            this.destroy();
        };
        return AssignKeyMenu;
    }(Blurable));
    DinogenArena.AssignKeyMenu = AssignKeyMenu;
    var LoadoutMenu = /** @class */ (function (_super) {
        __extends(LoadoutMenu, _super);
        function LoadoutMenu() {
            var _this = _super.call(this) || this;
            _this.enableEscapeKey();
            var padding = 12;
            _this.bg = _this.createOverlay();
            _this.addChildAt(_this.bg, 0);
            _this.titleText = _this.game.add.text(_this.bg.width * 0.5, padding, "Edit Loadouts", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.titleText.anchor.set(0.5, 0);
            _this.addChild(_this.titleText);
            _this.dismissButton = new DinogenArena.MenuButton(_this.onDismissClicked, _this, null, true, 200);
            _this.dismissButton.setLabelText("Dismiss New Unlocks");
            _this.dismissButton.position.set((_this.bg.width * 0.5) - (_this.dismissButton.width * 0.5), _this.bg.height - padding - _this.dismissButton.height);
            _this.addChild(_this.dismissButton);
            _this.closeButton = new DinogenArena.CloseButton(_this.close, _this);
            _this.closeButton.close.anchor.set(1, 0);
            _this.closeButton.position.set(_this.bg.width - padding, padding);
            _this.addChild(_this.closeButton);
            _this.listContainer = _this.game.add.group();
            _this.add(_this.listContainer);
            _this.classContainer = _this.game.add.group();
            _this.classContainer.x = _this.bg.width * 0.5;
            _this.add(_this.classContainer);
            var loadouts = DinogenArena.PlayerManager.CurrentProfile.loadouts;
            console.log(loadouts);
            _this.buttons = [];
            for (var i = 0; i < loadouts.length; i++) {
                var item = new DinogenArena.MenuButton(_this.onLoadoutClicked, _this, [loadouts[i]], true, 120);
                item.setData(loadouts[i]);
                item.setLabelText(loadouts[i].name);
                item.position.x = i * (item.width + 4);
                _this.listContainer.add(item);
                _this.buttons.push(item);
            }
            _this.listContainer.x = (_this.bg.width * 0.5) - (_this.listContainer.width * 0.5);
            _this.listContainer.y = (_this.titleText.y + _this.titleText.height) + 12;
            _this.show();
            _this.loadLoadout(loadouts[0]);
            if (!DinogenArena.PlayerManager.CurrentProfile.tutorials["bEditLoadouts"]) {
                DinogenArena.PlayerManager.CurrentProfile.tutorials["bEditLoadouts"] = true;
                _this.engine.createWindow({
                    titleText: "Edit Loadouts",
                    type: Window.TYPE_MESSAGE,
                    descText: "Here you can modify your Ranked mode loadouts.\n\nLoadouts are a class of weapons and perks. New weapons and perks are unlocked as you level up by earning XP in game.\n\nYou have 3 customizable loadouts."
                });
            }
            DinogenArena.SoundManager.PlayUISound("ui_loadout_equip");
            return _this;
        }
        LoadoutMenu.prototype.destroy = function () {
            this.bg = null;
            this.line = null;
            this.titleText = null;
            this.closeButton = null;
            this.listContainer = null;
            this.classContainer = null;
            this.buttons = null;
            _super.prototype.destroy.call(this);
        };
        LoadoutMenu.prototype.onDismissClicked = function () {
            /*
            var name: string = this.currentLoadout.name;
            var newName: string = prompt("Enter a name for this loadout.", this.currentLoadout.name);
            if (!newName)
            {
                newName = name;
            }
            this.currentLoadout.name = newName;
            this.buttons[PlayerManager.CurrentProfile.loadouts.indexOf(this.currentLoadout)].setLabelText(newName);
            */
            DinogenArena.PlayerManager.CurrentProfile.clearAllNewUnlocks();
            this.loadLoadout(this.currentLoadout);
            DinogenArena.SoundManager.PlayUISound("ui_bonus");
        };
        LoadoutMenu.prototype.onLoadoutClicked = function (_loadout) {
            this.loadLoadout(_loadout);
        };
        LoadoutMenu.prototype.loadLoadout = function (_loadout) {
            this.currentLoadout = _loadout;
            this.classContainer.removeChildren();
            this.setButtonSelected(_loadout.id);
            var item;
            var inv = [_loadout.weaponPrimary, _loadout.weaponSecondary];
            for (var i = 0; i < inv.length; i++) {
                var typeText = this.game.add.text(0, 0, (i == 0 ? "Primary" : "Secondary"), { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
                item = new DinogenArena.LoadoutItemButton(this.onLoadoutWeaponClicked, this, [i, _loadout]);
                item.setData({
                    type: "weapon",
                    loadout: _loadout,
                    index: i,
                    weaponId: inv[i]
                });
                item.x = i * (item.width + 4);
                item.y = typeText.height;
                this.classContainer.add(item);
                typeText.x = item.x;
                typeText.setTextBounds(0, 0, item.width, typeText.height);
                this.classContainer.add(typeText);
                item.setNewUnlocks(DinogenArena.PlayerManager.CurrentProfile.newUnlocks[i == 0 ? "primary" : "secondary"].length > 0);
            }
            var perks = [_loadout.perkPlayer, _loadout.perkWeapon];
            for (var i = 0; i < perks.length; i++) {
                var typeText = this.game.add.text(0, this.classContainer.height + 8, i == 0 ? "Player Perk" : "Weapon Perk", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
                item = new DinogenArena.LoadoutItemButton(this.onLoadoutPerkClicked, this, [i, _loadout]);
                item.setData({
                    type: "perk",
                    index: i,
                    loadout: _loadout,
                    perk: DinogenArena.PerkManager.GetPerk(perks[i])
                });
                item.x = (this.classContainer.width * 0.5) - (item.width * 0.5);
                item.y = typeText.y + typeText.height;
                this.classContainer.add(item);
                typeText.x = item.x;
                typeText.setTextBounds(0, 0, item.width, typeText.height);
                this.classContainer.add(typeText);
                item.setNewUnlocks(DinogenArena.PlayerManager.CurrentProfile.newUnlocks[i == 0 ? "perkPlayer" : "perkWeapon"].length > 0);
            }
            var desiredX = (this.bg.width * 0.5) - (this.classContainer.width * 0.5);
            var desiredY = ((this.bg.height * 0.5) - (this.classContainer.height * 0.5)) + 12;
            this.classContainer.x = desiredX;
            this.classContainer.y = desiredY;
            //this.classContainer.position.set(desiredX, desiredY - 32);
            //var tween = this.game.add.tween(this.classContainer).to({ x: desiredX, y: desiredY }, 500, Phaser.Easing.Exponential.Out, true);
            //SoundManager.PlayUISound("ui_loadout_equip");
            this.dismissButton.visible = DinogenArena.PlayerManager.CurrentProfile.hasNewUnlocks();
        };
        LoadoutMenu.prototype.onLoadoutWeaponClicked = function (_index, _loadout) {
            this.engine.createWindow({
                titleText: "Set " + (_index == 0 ? "Primary" : "Secondary") + " Weapon",
                index: _index,
                loadout: _loadout,
                type: Window.TYPE_WEAPONS,
                descText: "Select a weapon.",
                onCloseCallback: this.loadLoadout,
                onCloseCallbackContext: this,
                onCloseCallbackParams: [_loadout]
            });
        };
        LoadoutMenu.prototype.onLoadoutPerkClicked = function (_index, _loadout) {
            this.engine.createWindow({
                titleText: "Set " + (_index == 0 ? "Player" : "Weapon") + " Perk",
                index: _index,
                loadout: _loadout,
                type: Window.TYPE_PERKS,
                descText: "Select a perk.",
                onCloseCallback: this.loadLoadout,
                onCloseCallbackContext: this,
                onCloseCallbackParams: [_loadout]
            });
        };
        LoadoutMenu.prototype.setButtonSelected = function (_id) {
            for (var i = 0; i < this.buttons.length; i++) {
                var cur = this.buttons[i];
                if (cur.data["id"] == _id) {
                    cur.setTabSelected(true);
                }
                else {
                    cur.setTabSelected(false);
                }
            }
        };
        LoadoutMenu.prototype.close = function () {
            _super.prototype.close.call(this);
            DinogenArena.GameUtil.GetMainMenuState().mainMenu.contentElement.updateNewUnlocks();
        };
        LoadoutMenu.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            DinogenArena.Engine.SaveProfileData();
            this.destroy();
        };
        return LoadoutMenu;
    }(Blurable));
    DinogenArena.LoadoutMenu = LoadoutMenu;
    var Window = /** @class */ (function (_super) {
        __extends(Window, _super);
        function Window(_data) {
            var _this = _super.call(this) || this;
            _this.tweenCloseTime = 0;
            _this.enableEscapeKey();
            _this.window = _this.game.add.group();
            _this.addChild(_this.window);
            _this.bg = _this.createOverlay();
            _this.addChildAt(_this.bg, 0);
            var graphics;
            //var graphics = this.game.add.graphics(0, 0);
            //graphics.beginFill(0xCCCCCC, 0.35); //0xCCCCCC, 0.5
            //graphics.drawRect(0, 0, 32, 32);
            _this.windowBg = _this.game.add.graphics(0, 0); //this.game.add.image(0, 0, graphics.generateTexture());
            _this.windowBg.beginFill(0xCCCCCC, 0.35); //0xCCCCCC, 0.5
            _this.windowBg.drawRect(0, 0, 32, 32);
            //graphics.destroy();
            _this.windowBg.width = Window.WINDOW_WIDTH;
            _this.windowBg.height = 32;
            _this.windowBg.position.set((_this.bg.width * 0.5) - (_this.windowBg.width * 0.5), (_this.bg.height * 0.5) - (_this.windowBg.height * 0.5));
            _this.window.addChild(_this.windowBg);
            graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(0x000000, 0); //0x000000, 0.35
            graphics.drawRect(0, 0, 32, 32);
            _this.windowBar = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.windowBar.position.set(_this.windowBg.x, _this.windowBg.y);
            _this.window.addChild(_this.windowBar);
            _this.windowBar.width = _this.windowBg.width;
            _this.windowBar.height = 32; //32
            _this.titleText = _this.game.add.text(_this.windowBg.x, _this.windowBg.y + 4, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", align: "center", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.window.addChild(_this.titleText);
            _this.closeButton = new DinogenArena.CloseButton(_this.onCloseClicked, _this);
            _this.window.addChild(_this.closeButton);
            _this.content = _this.game.add.group();
            _this.window.addChild(_this.content);
            _this.setFromData(_data);
            _this.show();
            return _this;
        }
        Window.prototype.destroy = function () {
            this.clearTimers();
            if (this.windowTween.isRunning) {
                this.windowTween.stop();
            }
            this.buttons = null;
            this.scrollableContainer = null;
            this.windowTween = null;
            this.bg = null;
            this.windowBg = null;
            this.windowBar = null;
            this.titleText = null;
            this.closeButton = null;
            this.data = null;
            this.content = null;
            this.window = null;
            _super.prototype.destroy.call(this);
        };
        Window.prototype.show = function () {
            _super.prototype.show.call(this);
            this.window.position.y = 50;
            var time = 350;
            this.game.add.tween(this.window).from({ alpha: 0 }, time, Phaser.Easing.Exponential.InOut, true);
            this.windowTween = this.game.add.tween(this.window.position).to({ y: 0 }, time, Phaser.Easing.Exponential.InOut, true);
        };
        Window.prototype.setFromData = function (_data) {
            this.data = _data;
            var type = _data["type"];
            if (_data["titleText"] != undefined) {
                this.titleText.setText(_data["titleText"]);
                this.titleText.setTextBounds(0, 0, this.windowBar.width, this.windowBar.height);
            }
            if (_data["sound"]) {
                DinogenArena.SoundManager.PlayUISound(_data["sound"], 1);
            }
            else {
                DinogenArena.SoundManager.PlayUISound("ui_window_open");
            }
            if (_data["bHideCloseButton"] == true) {
                this.closeButton.visible = false;
            }
            var firstChild = null;
            var icon = null;
            var xpBar = null;
            var prePadding = 0;
            if (type == Window.TYPE_WEAPONS || type == Window.TYPE_CHALLENGES || type == Window.TYPE_PERKS || type == Window.TYPE_SURVIVAL_SUPPORT) {
                prePadding = Window.CONTENT_PADDING * 0.5;
                if (_data["bSurvival"] == true) {
                    var moneyText = this.game.add.text(0, 0, "$" + DinogenArena.WilkinUtil.FormatNum(DinogenArena.GameUtil.GetGameState().gameMode.getSurvival().getSurvivalMoney()), { font: "18px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
                    this.content.add(moneyText);
                    moneyText.x = (this.windowBg.width * 0.5) - (moneyText.width * 0.5);
                    moneyText.y = Window.CONTENT_PADDING;
                    firstChild = moneyText;
                }
                else {
                    xpBar = new DinogenArena.XPBar(this.windowBg.width - 32, true);
                    this.content.add(xpBar);
                    xpBar.x = (this.windowBg.width * 0.5) - (xpBar.width * 0.5);
                    xpBar.y = Window.CONTENT_PADDING;
                    firstChild = xpBar;
                }
            }
            else if (_data["icon"] != undefined) {
                icon = this.game.add.image(0, 0, "atlas_ui", _data["icon"]);
                icon.x = (this.windowBg.width * 0.5) - (icon.width * 0.5);
                icon.y = Window.CONTENT_PADDING;
                this.content.add(icon);
                //firstChild = icon;
            }
            if (_data["descText"] != undefined) {
                var descText = this.game.add.text(0, 0, _data["descText"], { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", wordWrap: true, wordWrapWidth: this.windowBg.width - (Window.CONTENT_PADDING * 2), align: "center", boundsAlignH: "center", boundsAlignV: "middle" });
                descText.alpha = 0.5;
                if (firstChild) {
                    descText.y = firstChild.y + firstChild.height + prePadding;
                    descText.setTextBounds(0, 0, this.windowBg.width, 32);
                }
                else if (icon) {
                    descText.y = icon.y + icon.height + prePadding;
                    descText.setTextBounds(0, 0, this.windowBg.width, 32);
                }
                else {
                    this.windowBg.height = this.windowBar.height + descText.height + (Window.CONTENT_PADDING * 2);
                    descText.setTextBounds(0, 0, this.windowBg.width, this.windowBg.height - this.windowBar.height);
                }
                this.content.addChild(descText);
            }
            if (type == Window.TYPE_MESSAGE) {
                var okayButton = new DinogenArena.MenuButton(this.close, this, null, true);
                okayButton.setLabelText("OK");
                okayButton.x = (this.windowBg.width * 0.5) - (okayButton.width * 0.5);
                okayButton.y = icon ? (this.content.height + (Window.CONTENT_PADDING * 2)) : (descText.y + descText.height + (Window.CONTENT_PADDING * 2));
                this.content.addChild(okayButton);
            }
            else if (type == Window.TYPE_SURVIVAL_LEADERBOARDS) {
                var playerList = _data["playerList"];
                /*
                if (GameUtil.IsDebugging())
                {
                    for (var i = 0; i < 20; i++)
                    {
                        playerList.push(
                            {
                                name: GameModeManager.GetBotName("human") + WilkinUtil.GenerateRandomNumber(1, 99),
                                score: Math.round(12345 / (i + 1))
                                //url: "http://xwilkinx.com"
                            }
                        );
                    }
                }
                */
                console.log("playerlist: " + playerList);
                if (playerList) {
                    this.loadLeaderboardPlayers(playerList);
                }
            }
            else if (type == Window.TYPE_SETTINGS) {
                descText.visible = false;
                var contentWidth = 650;
                var settingsContainer = this.game.add.group();
                settingsContainer.name = "settingsContainer";
                var settings = DinogenArena.PlayerManager.CurrentProfile.settings;
                var data;
                var arr;
                var modifier;
                data = { id: null, bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "Controls", contentWidth, null, data);
                this.addContentChild(settingsContainer, modifier);
                var reassignKeysButton = new DinogenArena.MenuButton(this.onAssignKeysClicked, this, null, true);
                reassignKeysButton.setLabelText("Assign Keys");
                reassignKeysButton.x = (contentWidth * 0.5) - (reassignKeysButton.width * 0.5);
                this.addContentChild(settingsContainer, reassignKeysButton);
                arr = [];
                arr.push({ id: 0, label: "Absolute" });
                arr.push({ id: 1, label: "Relative" });
                data = { id: "bAbsoluteMovement", items: arr, index: settings.bAbsoluteMovement ? 0 : 1 };
                var movementModifier = new DinogenArena.SettingsModifier(this.game, "Movement Style", contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                movementModifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(settingsContainer, movementModifier);
                var movementContainer = this.game.add.group();
                movementContainer.name = "movementContainer";
                var tweenTime = 3000;
                var absoluteMovement = this.game.add.image(0, 0, "atlas_ui", "icon_movement_absolute");
                absoluteMovement.name = "movement_absolute";
                absoluteMovement.anchor.set(0.5, 0.5);
                absoluteMovement.x = absoluteMovement.width * 0.5;
                absoluteMovement.y = absoluteMovement.height * 0.5;
                var char1 = this.game.add.image(0, 0, "atlas_char", DinogenArena.InventoryManager.ITEM_FIREARM_MP5);
                char1.anchor.set(0.5, 0.5);
                absoluteMovement.addChild(char1);
                movementContainer.add(absoluteMovement);
                movementContainer.x = (contentWidth * 0.5) - (movementContainer.width * 0.5);
                var absoluteTween = this.game.add.tween(char1).to({ rotation: -180 * DinogenArena.WilkinUtil.TO_RADIANS }, tweenTime, Phaser.Easing.Back.InOut, true, 0, Number.MAX_VALUE, true);
                var relativeMovement = this.game.add.image(0, 0, "atlas_ui", "icon_movement_relative");
                relativeMovement.name = "movement_relative";
                relativeMovement.anchor.set(0.5, 0.5);
                relativeMovement.x = absoluteMovement.x + (relativeMovement.width * 2);
                relativeMovement.y = relativeMovement.height * 0.5;
                var char2 = this.game.add.image(0, 0, "atlas_char", DinogenArena.InventoryManager.ITEM_FIREARM_MP5);
                char2.anchor.set(0.5, 0.5);
                relativeMovement.addChild(char2);
                movementContainer.add(relativeMovement);
                movementContainer.x = (contentWidth * 0.5) - (movementContainer.width * 0.5);
                var relativeTween = this.game.add.tween(relativeMovement).to({ rotation: -180 * DinogenArena.WilkinUtil.TO_RADIANS }, tweenTime, Phaser.Easing.Back.InOut, true, 0, Number.MAX_VALUE, true);
                this.addContentChild(settingsContainer, movementContainer);
                data = { id: null, bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "Visual", contentWidth, null, data);
                this.addContentChild(settingsContainer, modifier);
                arr = [];
                arr.push({ id: 0, label: "On" });
                arr.push({ id: 1, label: "Off", colour: 0x999999 });
                data = { id: "bEffects", items: arr, index: settings.bEffects ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Effects", contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(settingsContainer, modifier);
                arr = [];
                arr.push({ id: 0, label: "On" });
                arr.push({ id: 1, label: "Off", colour: 0x999999 });
                data = { id: "bDecals", items: arr, index: settings.bDecals ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Decals", contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(settingsContainer, modifier);
                arr = [];
                arr.push({ id: 0, label: "On" });
                arr.push({ id: 1, label: "Off", colour: 0x999999 });
                data = { id: "bGibs", items: arr, index: settings.bGibs ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Gibs", contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(settingsContainer, modifier);
                arr = [];
                arr.push({ id: 0, label: "On" });
                arr.push({ id: 1, label: "Off", colour: 0x999999 });
                data = { id: "bDeadBodies", items: arr, index: settings.bDeadBodies ? 0 : 1 };
                modifier = new DinogenArena.SettingsModifier(this.game, "Show Dead Bodies", contentWidth, DinogenArena.SettingsModifier.MODULE_BUTTON, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(settingsContainer, modifier);
                data = { id: null, bHideBackground: true };
                modifier = new DinogenArena.SettingsModifier(this.game, "Audio", contentWidth, null, data);
                this.addContentChild(settingsContainer, modifier);
                data = { id: "gameVolume", value: settings.gameVolume };
                modifier = new DinogenArena.SettingsModifier(this.game, "Game Volume", contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(settingsContainer, modifier);
                data = { id: "musicVolume", value: settings.musicVolume };
                modifier = new DinogenArena.SettingsModifier(this.game, "Music Volume", contentWidth, DinogenArena.SettingsModifier.MODULE_SLIDER, data);
                modifier.updateEvent.add(this.onModifierChanged, this);
                this.addContentChild(settingsContainer, modifier);
                settingsContainer.x = (this.windowBg.width * 0.5) - (settingsContainer.width * 0.5);
                settingsContainer.y = descText.y + Window.CONTENT_PADDING;
                this.content.add(settingsContainer);
                movementModifier.dispatchUpdate();
            }
            else if (type == Window.TYPE_UNLOCKS) {
                var profile = DinogenArena.PlayerManager.CurrentProfile;
                var maxShown = 4;
                var newItemsContainer = this.game.add.group();
                var newWeapons = profile.getAllNewWeaponUnlocks();
                for (i = 0; i < Math.min(newWeapons.length, maxShown); i++) {
                    var newItem = this.game.add.group();
                    var bg = this.game.add.graphics();
                    bg.beginFill(0x000000, 0.2);
                    bg.drawRoundedRect(0, 0, 200, 100, DinogenArena.GameUtil.RECTANGLE_RADIUS);
                    bg.y = (bg.height + 8) * i;
                    newItem.add(bg);
                    var wpnIcon = this.game.add.image(0, 0, "atlas_weapons", newWeapons[i]);
                    wpnIcon.anchor.set(0.5, 0.5);
                    wpnIcon.x = bg.x + (bg.width * 0.5);
                    wpnIcon.y = bg.y + (bg.height * 0.5);
                    newItem.add(wpnIcon);
                    var labelType = this.game.add.text(0, 0, "Weapon", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    labelType.alpha = 0.2;
                    labelType.anchor.set(0.5, 0);
                    labelType.x = bg.x + (bg.width * 0.5);
                    labelType.y = bg.y + 2;
                    newItem.add(labelType);
                    var label = this.game.add.text(0, 0, DinogenArena.InventoryManager.GetNameForId(newWeapons[i]), { font: "16px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_NEW_STRING });
                    label.anchor.set(0.5, 0);
                    label.x = bg.x + (bg.width * 0.5);
                    label.y = bg.y + (bg.height - label.height);
                    newItem.add(label);
                    newItemsContainer.add(newItem);
                }
                var newPerks = profile.getAllNewPerkUnlocks();
                var perkWidth = newItemsContainer.width + 8;
                for (i = 0; i < Math.min(newPerks.length, maxShown); i++) {
                    var newItem = this.game.add.group();
                    var bg = this.game.add.graphics();
                    bg.beginFill(0x000000, 0.2);
                    bg.drawRoundedRect(0, 0, 200, 100, DinogenArena.GameUtil.RECTANGLE_RADIUS);
                    bg.x = perkWidth;
                    bg.y = (bg.height + 8) * i;
                    newItem.add(bg);
                    var wpnIcon = this.game.add.image(0, 0, "atlas_ui", newPerks[i]);
                    wpnIcon.scale.set(0.5, 0.5);
                    wpnIcon.anchor.set(0.5, 0.5);
                    wpnIcon.x = bg.x + (bg.width * 0.5);
                    wpnIcon.y = bg.y + (bg.height * 0.5);
                    newItem.add(wpnIcon);
                    var labelType = this.game.add.text(0, 0, "Perk", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                    labelType.alpha = 0.2;
                    labelType.anchor.set(0.5, 0);
                    labelType.x = bg.x + (bg.width * 0.5);
                    labelType.y = bg.y + 2;
                    newItem.add(labelType);
                    var label = this.game.add.text(0, 0, DinogenArena.PerkManager.GetPerk(newPerks[i]).name, { font: "16px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_NEW_STRING });
                    label.anchor.set(0.5, 0);
                    label.x = bg.x + (bg.width * 0.5);
                    label.y = bg.y + (bg.height - label.height);
                    newItem.add(label);
                    newItemsContainer.add(newItem);
                }
                newItemsContainer.x = (this.windowBg.width * 0.5) - (newItemsContainer.width * 0.5);
                newItemsContainer.y = descText.y + descText.height + (Window.CONTENT_PADDING * 2);
                this.content.add(newItemsContainer);
                var buttonWidth = 150;
                var loadoutButton = new DinogenArena.MenuButton(this.yesCallbackAndClose, this, null, true, buttonWidth);
                loadoutButton.setLabelText("Edit Loadouts");
                loadoutButton.x = (this.windowBg.width * 0.5) - (loadoutButton.width * 0.5);
                loadoutButton.y = newItemsContainer.y + newItemsContainer.height + Window.CONTENT_PADDING;
                this.content.addChild(loadoutButton);
                var okayButton = new DinogenArena.MenuButton(this.close, this, null, true, buttonWidth);
                okayButton.setLabelText("Close");
                okayButton.x = (this.windowBg.width * 0.5) - (okayButton.width * 0.5);
                okayButton.y = (loadoutButton.y + loadoutButton.height) + 4;
                this.content.addChild(okayButton);
            }
            else if (type == Window.TYPE_YES_NO) {
                var padding = 20;
                var container = this.game.add.group();
                this.content.add(container);
                var noButton = new DinogenArena.MenuButton(this.close, this, null, true);
                noButton.setLabelText("No"); //\u2718 2717
                container.addChild(noButton);
                var yesButton = new DinogenArena.MenuButton(this.yesCallbackAndClose, this, null, true);
                yesButton.setLabelText("Yes"); //2714 GameUtil.COLOUR_NEW_STRING
                yesButton.x = container.width + 4;
                container.addChild(yesButton);
                container.x = (this.windowBg.width * 0.5) - (container.width * 0.5);
                container.y = icon ? (this.content.height + Window.CONTENT_PADDING) : (descText.y + descText.height + (Window.CONTENT_PADDING * 2));
            }
            if (type == Window.TYPE_REPLACE_WEAPON) {
                var padding = 12;
                var newWeapon = this.game.add.image(0, 0, "atlas_weapons", _data["newWeaponId"]);
                newWeapon.anchor.set(0.5, 0);
                newWeapon.x = this.windowBg.width * 0.5;
                newWeapon.y = Window.CONTENT_PADDING;
                this.content.add(newWeapon);
                var costText = this.game.add.text(0, 0, "$" + DinogenArena.WilkinUtil.FormatNum(_data["cost"]), { font: "18px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
                costText.anchor.set(0.5, 0);
                costText.x = newWeapon.x;
                costText.y = newWeapon.y + newWeapon.height + padding;
                this.content.add(costText);
                var replaceText = this.game.add.text(newWeapon.x, costText.y + costText.height + padding, "Select a weapon to replace:", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
                replaceText.anchor.set(0.5, 0);
                this.content.add(replaceText);
                var buttonsContainer = this.game.add.group();
                var arr = _data["inventory"];
                for (var i = 0; i < arr.length; i++) {
                    var firearm = arr[i];
                    var button = new DinogenArena.LoadoutItemButton(this.onWeaponReplaceClicked, this, [i, _data["newWeaponId"]]);
                    button.setData({
                        type: "weapon",
                        firearm: firearm,
                        titleText: firearm.getName(),
                        descText: "Ammo: " + firearm.getAmmoString()
                    });
                    button.x = i * (button.width + 4);
                    buttonsContainer.add(button);
                }
                buttonsContainer.x = replaceText.x - (buttonsContainer.width * 0.5);
                buttonsContainer.y = replaceText.y + replaceText.height + padding;
                this.content.add(buttonsContainer);
            }
            else if (type == Window.TYPE_CHALLENGES) {
                this.buttons = [];
                var categories;
                categories = [
                    { id: "basic", label: "Basic" },
                    { id: "weapons", label: "Firearms" },
                    { id: "prestige", label: "Prestige" }
                ];
                var catContainer = this.game.add.group();
                catContainer.name = "catContainer";
                this.content.add(catContainer);
                var catButton;
                for (var i = 0; i < categories.length; i++) {
                    catButton = new DinogenArena.MenuButton(this.onChallengeCategoryClicked, this, [categories[i]["id"]], true);
                    catButton.setLabelText(categories[i]["label"]);
                    catButton.setData(categories[i]);
                    catButton.x = i * catButton.width;
                    catContainer.add(catButton);
                    this.buttons.push(catButton);
                }
                catContainer.x = (this.windowBg.width * 0.5) - (catContainer.width * 0.5);
                catContainer.y = descText.y + descText.height + (catContainer.height * 0.5);
                var scrollPadding = 4;
                this.scrollableContainer = new DinogenArena.ScrollableContainer(this.windowBg.width - (scrollPadding * 2), Window.SCROLLABLE_HEIGHT);
                this.scrollableContainer.position.set(scrollPadding, catContainer.y + catContainer.height);
                this.content.addChild(this.scrollableContainer);
                this.loadChallengeCategory(categories[0]["id"]);
            }
            else if (type == Window.TYPE_WEAPONS) {
                this.buttons = [];
                var categories;
                if (_data["bSurvival"] == true) {
                    categories = [
                        { id: DinogenArena.Firearm.TYPE_PISTOL, label: "Pistols" },
                        { id: DinogenArena.Firearm.TYPE_SMG, label: "SMGs" },
                        { id: DinogenArena.Firearm.TYPE_RIFLE, label: "Rifles" },
                        { id: DinogenArena.Firearm.TYPE_SNIPER, label: "Snipers" },
                        { id: DinogenArena.Firearm.TYPE_SHOTGUN, label: "Shotguns" },
                        { id: DinogenArena.Firearm.TYPE_LMG, label: "LMGs" },
                        { id: DinogenArena.Firearm.TYPE_LAUNCHER, label: "Launchers" }
                    ];
                }
                else {
                    var bSecondary = _data["index"] != 0;
                    if (bSecondary) {
                        categories = [
                            { id: DinogenArena.Firearm.TYPE_PISTOL, label: "Pistols" },
                            { id: DinogenArena.Firearm.TYPE_LAUNCHER, label: "Launchers" }
                        ];
                    }
                    else {
                        categories = [
                            { id: DinogenArena.Firearm.TYPE_SMG, label: "SMGs" },
                            { id: DinogenArena.Firearm.TYPE_RIFLE, label: "Rifles" },
                            { id: DinogenArena.Firearm.TYPE_SNIPER, label: "Snipers" },
                            { id: DinogenArena.Firearm.TYPE_SHOTGUN, label: "Shotguns" },
                            { id: DinogenArena.Firearm.TYPE_LMG, label: "LMGs" }
                        ];
                    }
                }
                var catContainer = this.game.add.group();
                catContainer.name = "catContainer";
                this.content.add(catContainer);
                var catButton;
                for (var i = 0; i < categories.length; i++) {
                    catButton = new DinogenArena.MenuButton(this.onWeaponCategoryClicked, this, [categories[i]["id"]], true, _data["bSurvival"] == true ? 100 : 120);
                    catButton.setLabelText(categories[i]["label"]);
                    catButton.setData(categories[i]);
                    catButton.x = i * catButton.width;
                    catContainer.add(catButton);
                    this.buttons.push(catButton);
                    if (!_data["bSurvival"] && DinogenArena.PlayerManager.CurrentProfile.hasNewWeaponFromCategory(categories[i]["id"])) {
                        var newIcon = this.game.add.image((catButton.x + catButton.width) - 2, catButton.y + 2, "atlas_ui", "icon_new_small");
                        newIcon.alpha = 0.5;
                        newIcon.anchor.set(1, 0);
                        catContainer.add(newIcon);
                    }
                }
                catContainer.x = (this.windowBg.width * 0.5) - (catContainer.width * 0.5);
                catContainer.y = descText.y + descText.height + (catContainer.height * 0.5);
                var scrollPadding = 4;
                this.scrollableContainer = new DinogenArena.ScrollableContainer(this.windowBg.width - (scrollPadding * 2), Window.SCROLLABLE_HEIGHT);
                this.scrollableContainer.position.set(scrollPadding, catContainer.y + catContainer.height);
                this.content.addAt(this.scrollableContainer, 0);
                var categoryToLoad = categories[0]["id"];
                if (!_data["bSurvival"]) {
                    var loadout = _data["loadout"];
                    if (loadout) {
                        var firearm;
                        if (_data["index"] == 0) {
                            firearm = DinogenArena.InventoryManager.GetItemById(loadout.weaponPrimary);
                        }
                        else {
                            firearm = DinogenArena.InventoryManager.GetItemById(loadout.weaponSecondary);
                        }
                        categoryToLoad = firearm.getFirearmType();
                    }
                }
                this.loadWeaponCategory(categoryToLoad);
            }
            else if (type == Window.TYPE_PERKS) {
                var scrollPadding = 4;
                this.scrollableContainer = new DinogenArena.ScrollableContainer(this.windowBg.width - (scrollPadding * 2), Window.SCROLLABLE_HEIGHT);
                this.scrollableContainer.position.set(scrollPadding, descText.y + descText.height + scrollPadding);
                this.content.addAt(this.scrollableContainer, 0);
                this.loadPerks(this.data["index"]);
            }
            else if (type == Window.TYPE_SURVIVAL_SUPPORT) {
                var scrollPadding = 4;
                this.scrollableContainer = new DinogenArena.ScrollableContainer(this.windowBg.width - (scrollPadding * 2), Window.SCROLLABLE_HEIGHT);
                this.scrollableContainer.position.set(scrollPadding, descText.y + descText.height + scrollPadding);
                this.content.addAt(this.scrollableContainer, 0);
                this.loadSupport(this.data["supportType"]);
            }
            this.windowBg.height = Math.min(this.game.height, this.content.y + this.content.height + (Window.CONTENT_PADDING * 3) - prePadding);
            if (this.scrollableContainer) {
                this.scrollableContainer.updateMask();
            }
            this.realignElements();
        };
        Window.prototype.onAssignKeysClicked = function () {
            var menu = new AssignKeyMenu();
        };
        Window.prototype.addContentChild = function (_contentGroup, _child) {
            if (_contentGroup.length > 0) {
                var prevChild = _contentGroup.getChildAt(_contentGroup.length - 1);
                _child.y = prevChild.y + prevChild.height;
            }
            if (_contentGroup.height > 0) {
                _child.y += 4;
            }
            _contentGroup.add(_child);
        };
        Window.prototype.onModifierChanged = function (_modifier) {
            var modifier = _modifier;
            if (modifier) {
                var data = modifier.data;
                if (data) {
                    var cur = modifier.module.getSelectedData();
                    if (data["id"] == "bAbsoluteMovement") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bAbsoluteMovement = !cur;
                        var bAbsoluteMovement = DinogenArena.PlayerManager.CurrentProfile.settings.bAbsoluteMovement;
                        var settingsContainer = this.content.getByName("settingsContainer");
                        console.log(settingsContainer);
                        console.log(this.content.children);
                        var movementContainer = settingsContainer.getByName("movementContainer");
                        var absoluteMovement = movementContainer.getByName("movement_absolute");
                        var relativeMovement = movementContainer.getByName("movement_relative");
                        if (absoluteMovement && relativeMovement) {
                            absoluteMovement.alpha = bAbsoluteMovement ? 1 : 0.2;
                            relativeMovement.alpha = !bAbsoluteMovement ? 1 : 0.2;
                        }
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "bEffects") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bEffects = cur == 0;
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "bGibs") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bGibs = cur == 0;
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "bDecals") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bDecals = cur == 0;
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "bDeadBodies") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.bDeadBodies = cur == 0;
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "gameVolume") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.setGameVolume(cur);
                        DinogenArena.Engine.SaveProfileData();
                    }
                    else if (data["id"] == "musicVolume") {
                        DinogenArena.PlayerManager.CurrentProfile.settings.setMusicVolume(cur);
                        DinogenArena.Engine.SaveProfileData();
                    }
                }
            }
        };
        Window.prototype.onWeaponReplaceClicked = function (_index, _newWeaponId) {
            var char = DinogenArena.GameUtil.GetGameState().player;
            var newFirearm = DinogenArena.InventoryManager.GetItemById(_newWeaponId);
            char.replaceInventoryItem(_index, newFirearm);
            DinogenArena.GameUtil.GetGameState().gameMode.getSurvival().useSurvivalMoney(newFirearm.getCost());
            this.close();
        };
        Window.prototype.onChallengeCategoryClicked = function (_category) {
            this.loadChallengeCategory(_category);
        };
        Window.prototype.createChallengeTiersFor = function (_tierId, _current, _label, _suffix, _weaponId) {
            if (_suffix === void 0) { _suffix = null; }
            if (_weaponId === void 0) { _weaponId = null; }
            console.log(_tierId);
            var container = this.game.add.group();
            var padding = 4;
            var headerWidth = 560;
            var titleText = this.game.add.text(padding, padding, _label + ": " + _current + (_suffix ? " " + _suffix : ""), { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            titleText.setTextBounds(0, 0, headerWidth, 32);
            container.add(titleText);
            var bg = this.game.add.graphics();
            bg.beginFill(0x000000, 0.5);
            bg.drawRoundedRect(0, 0, headerWidth, this.titleText.height, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            container.addAt(bg, 0);
            var challenges = DinogenArena.PlayerManager.CurrentProfile.challenges;
            for (var i = 0; i < challenges.tiers[_tierId].length; i++) {
                var tier = i + 1;
                var goal = challenges.getTierGoalFor(_tierId, i);
                var item = new ChallengeTier("Tier " + DinogenArena.WilkinUtil.ConvertToNumeral(tier) + ": " + goal, "+" + (DinogenArena.WilkinUtil.FormatNum(DinogenArena.Challenges.XP_BONUS * tier) + "XP"), _current / goal, i == 0 || _current >= challenges.getTierGoalFor(_tierId, i - 1));
                item.x = (bg.width * 0.5) - (item.width * 0.5);
                item.y = container.height + padding;
                container.add(item);
            }
            if (_weaponId) {
                var icon = this.game.add.image(0, 0, "atlas_weapons", _weaponId);
                icon.scale.set(0.5, 0.5);
                icon.anchor.set(0.5, 0.5);
                icon.x = 50;
                icon.y = ((container.height + bg.height) * 0.5);
                container.add(icon);
            }
            this.scrollableContainer.addItem(container, true);
        };
        Window.prototype.addTimer = function (_timer) {
            if (!this.timers) {
                this.timers = [];
            }
            this.timers.push(_timer);
        };
        Window.prototype.clearTimers = function () {
            if (!this.timers) {
                return;
            }
            for (var i = 0; i < this.timers.length; i++) {
                this.timers[i].stop();
            }
            this.timers = [];
        };
        Window.prototype.loadChallengeCategory = function (_category) {
            this.clearTimers();
            for (var i = 0; i < this.buttons.length; i++) {
                var button = this.buttons[i];
                if (button.data["id"] == _category) {
                    button.setTabSelected(true);
                }
                else {
                    button.setTabSelected(false);
                }
            }
            this.scrollableContainer.clearItems();
            var challenges = DinogenArena.PlayerManager.CurrentProfile.challenges;
            var descText = this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            descText.alpha = 0.5;
            descText.setTextBounds(0, 0, this.scrollableContainer.width, 32);
            this.scrollableContainer.addItem(descText);
            if (_category == "basic") {
                descText.setText("Basic challenges.", true);
                this.createChallengeTiersFor("kills", challenges.kills, "Kills");
                this.createChallengeTiersFor("kills", challenges.meleeKills, "Melee Kills");
                this.createChallengeTiersFor("kills", challenges.killsAsDino, "Dinosaur Kills");
                this.createChallengeTiersFor("generic", challenges.wins, "Wins");
                this.createChallengeTiersFor("generic", challenges.firstBloods, "First Bloods");
                this.createChallengeTiersFor("generic", challenges.captures, "Flag Captures");
            }
            else if (_category == "weapons") {
                descText.setText("Use firearms to reveal more challenges.", true);
                var weaponKills = Object.getOwnPropertyNames(challenges.weaponKills);
                if (weaponKills.length > 0) {
                    for (var i = 0; i < weaponKills.length; i++) {
                        var weaponId = weaponKills[i];
                        var weaponName = DinogenArena.InventoryManager.GetNameForId(weaponId);
                        var timer = this.game.time.create(true);
                        timer.add(i * 50, this.createChallengeTiersFor, this, "weapon_kills", challenges.weaponKills[weaponId], DinogenArena.InventoryManager.GetNameForId(weaponId), "kill" + DinogenArena.WilkinUtil.AddPlural(challenges.weaponKills[weaponId]), weaponId);
                        timer.start();
                        this.addTimer(timer);
                        //this.createChallengeTiersFor("weapon_kills", challenges.weaponKills[weaponId], InventoryManager.GetNameForId(weaponId), "kill" + WilkinUtil.AddPlural(challenges.weaponKills[weaponId]), weaponId);
                    }
                }
                else {
                    var weaponIcon = this.game.add.image(0, 0, "atlas_ui", "race_human");
                    weaponIcon.scale.set(0.5, 0.5);
                    weaponIcon.alpha = 0.5;
                    this.scrollableContainer.addItem(weaponIcon, true);
                }
            }
            if (_category == "prestige") {
                if (DinogenArena.PlayerManager.CurrentProfile.getCustomPrestige() > 0) {
                    descText.setText("Prestige challenges.", true);
                    this.createChallengeTiersFor("kills", challenges.multiKills, "Multi-Kills");
                    this.createChallengeTiersFor("kills", challenges.kingKills, "King of the Hill Zone Kills");
                    this.createChallengeTiersFor("generic", challenges.mvps, "Team Deathmatch MVPs");
                }
                else {
                    descText.setText("Unlocked after Prestige (level " + DinogenArena.PlayerProfile.MAX_CUSTOM_LEVEL + ").", true);
                    var lockIcon = this.game.add.image(0, 0, "atlas_ui", "icon_lock");
                    lockIcon.alpha = 0.5;
                    this.scrollableContainer.addItem(lockIcon, true);
                }
            }
        };
        Window.prototype.onWeaponCategoryClicked = function (_category) {
            this.loadWeaponCategory(_category);
        };
        Window.prototype.loadWeaponCategory = function (_category) {
            for (var i = 0; i < this.buttons.length; i++) {
                var button = this.buttons[i];
                if (button.data["id"] == _category) {
                    button.setTabSelected(true);
                }
                else {
                    button.setTabSelected(false);
                }
            }
            this.scrollableContainer.clearItems();
            var newWeapons;
            if (!this.data["bSurvival"]) {
                var newUnlocks = DinogenArena.PlayerManager.CurrentProfile.newUnlocks;
                newWeapons = newUnlocks["primary"];
                newWeapons = newWeapons.concat(newUnlocks["secondary"]);
            }
            else {
                newWeapons = [];
            }
            var arr = DinogenArena.InventoryManager.GetAllByFirearmType(_category, this.data["bSurvival"]);
            for (var i = 0; i < arr.length; i++) {
                var firearm = arr[i];
                var item = new LoadoutSelection(this.onWeaponSelected, this);
                item.setFirearm(firearm, this.data["bSurvival"]);
                this.scrollableContainer.addItem(item);
                var newIndex = newWeapons.indexOf(firearm.getId());
                if (newIndex >= 0) {
                    item.itemButton.setNewUnlocks(true);
                    DinogenArena.PlayerManager.CurrentProfile.removeNewUnlock(firearm.getId());
                }
            }
        };
        Window.prototype.onWeaponSelected = function (_id) {
            if (this.data["bSurvival"] == true) {
                var char = DinogenArena.GameUtil.GetGameState().player;
                var firearm = DinogenArena.InventoryManager.GetItemById(_id);
                if (!char.hasInventorySpace()) {
                    this.engine.createWindow({
                        titleText: "Buy " + firearm.getName(),
                        type: Window.TYPE_REPLACE_WEAPON,
                        cost: firearm.getCost(),
                        newWeaponId: _id,
                        inventory: char.getInventoryItems(),
                        onCloseCallback: this.close,
                        onCloseCallbackContext: this
                    });
                }
                else {
                    DinogenArena.GameUtil.GetGameState().gameMode.getSurvival().useSurvivalMoney(firearm.getCost());
                    char.addInventoryItemById(_id);
                    this.close();
                }
            }
            else {
                var loadout = this.data["loadout"];
                if (this.data["index"] == 0) {
                    loadout.weaponPrimary = _id;
                }
                else {
                    loadout.weaponSecondary = _id;
                }
                this.close();
            }
            DinogenArena.SoundManager.PlayUISound("ui_equip");
        };
        Window.prototype.loadSupport = function (_supportType) {
            var arr;
            if (_supportType == DinogenArena.SurvivalManager.SUPPORT_AIR) {
                arr = DinogenArena.SurvivalManager.GetAirSupport();
            }
            else if (_supportType == DinogenArena.SurvivalManager.SUPPORT_SOLDIER) {
                arr = DinogenArena.SurvivalManager.GetSoldierSupport();
            }
            for (var i = 0; i < arr.length; i++) {
                var survivalButton = new DinogenArena.SurvivalSupportButton(this.onSurvivalSupportClicked, this, [arr[i]]);
                var cost = arr[i]["cost"];
                if (cost > DinogenArena.GameUtil.GetGameState().gameMode.getSurvival().getSurvivalMoney()) {
                    survivalButton.setEnabled(false);
                }
                survivalButton.setData(arr[i]);
                this.scrollableContainer.addItem(survivalButton, true);
            }
        };
        Window.prototype.onSurvivalSupportClicked = function (_data) {
            var gameMode = DinogenArena.GameUtil.GetGameState().gameMode.getSurvival();
            gameMode.useSurvivalMoney(_data["cost"]);
            if (_data["type"] == DinogenArena.SurvivalManager.SUPPORT_AIR) {
                var heli = gameMode.addHelicopter(gameMode.getUserPlayer(), _data["id"]);
                if (_data["id"] == DinogenArena.Helicopter.TYPE_SEAKNIGHT) {
                    for (var i = 0; i < 3; i++) {
                        heli.addItem({ type: "ammo" });
                    }
                }
                else if (_data["id"] == DinogenArena.Helicopter.TYPE_OSPREY) {
                    for (var i = 0; i < 3; i++) {
                        heli.addItem({ type: "weapon", firearm: DinogenArena.InventoryManager.GetRandomItem(true) });
                    }
                }
                var feedData = {};
                feedData["type"] = "default";
                feedData["text"] = _data["name"] + " inbound!";
                DinogenArena.GameUtil.GetGameState().playerController.getHUD().addToFeed(feedData);
                DinogenArena.SoundManager.PlayUISound("ui_heli");
            }
            else {
                var botSkill = 1;
                if (_data["id"] == DinogenArena.SurvivalManager.SOLDIER_SHOTGUN) {
                    botSkill = 2;
                }
                else if (_data["id"] == DinogenArena.SurvivalManager.SOLDIER_SNIPER) {
                    botSkill = 3;
                }
                else if (_data["id"] == DinogenArena.SurvivalManager.SOLDIER_HEAVY) {
                    botSkill = 3;
                }
                var player = gameMode.addPlayer(DinogenArena.GameModeManager.GetBotName("human"), 0, false, { aiSkillLevel: botSkill });
                player.setRespawnData({ type: _data["id"] });
                player.setRespawnTimerMax(0);
                player.respawn();
                DinogenArena.SoundManager.PlayUISound("ui_loadout_equip");
            }
            this.close();
        };
        Window.prototype.loadPerks = function (_index) {
            //this.scrollableContainer.clearItems();
            var arr;
            if (_index == 0) {
                arr = DinogenArena.PerkManager.GetPlayerPerkIDs();
            }
            else if (_index == 1) {
                arr = DinogenArena.PerkManager.GetWeaponPerkIDs();
            }
            for (var i = 0; i < arr.length; i++) {
                var perk = DinogenArena.PerkManager.GetPerk(arr[i]);
                var item = new LoadoutSelection(this.onPerkSelected, this);
                item.setPerk(perk);
                this.scrollableContainer.addItem(item, true);
                var newPerks = DinogenArena.PlayerManager.CurrentProfile.getAllNewPerkUnlocks();
                var newIndex = newPerks.indexOf(perk.id);
                if (newIndex >= 0) {
                    item.itemButton.setNewUnlocks(true);
                    DinogenArena.PlayerManager.CurrentProfile.removeNewUnlock(perk.id);
                }
            }
        };
        Window.prototype.onPerkSelected = function (_id) {
            var loadout = this.data["loadout"];
            if (this.data["index"] == 0) {
                loadout.perkPlayer = _id;
            }
            else {
                loadout.perkWeapon = _id;
            }
            DinogenArena.SoundManager.PlayUISound("ui_equip_perk");
            this.close();
        };
        Window.prototype.loadLeaderboardPlayers = function (_arr) {
            var itemPadding = 2;
            var header = new DinogenArena.LeaderboardHeader();
            header.x = (this.windowBg.width * 0.5) - (header.width * 0.5);
            header.y = Math.round(this.content.height + 50);
            this.content.add(header);
            var playerContainer = this.game.add.group();
            playerContainer.y = (header.y + header.height) + (itemPadding * 2);
            this.content.add(playerContainer);
            if (_arr) {
                console.log("Loaded " + _arr.length + " leaderboard players");
                var maxPlayers = 10;
                for (var i = 0; i < Math.min(_arr.length, maxPlayers); i++) {
                    var playerItem = new DinogenArena.LeaderboardPlayer(_arr[i]);
                    playerItem.setNum(i + 1);
                    playerItem.y = i * (playerItem.height + itemPadding);
                    playerContainer.add(playerItem);
                }
            }
            playerContainer.x = (this.windowBg.width * 0.5) - (playerContainer.width * 0.5);
        };
        Window.prototype.yesCallbackAndClose = function (_callback, _callbackContext) {
            if (this.data["yesCallback"]) {
                this.data["yesCallback"].apply(this.data["yesCallbackContext"]);
            }
            else {
                console.warn("Missing yesCallback");
            }
            this.close();
        };
        Window.prototype.realignElements = function () {
            var windowWidth = this.windowBg.width;
            var windowHeight = this.windowBg.height;
            this.windowBg.position.set(Math.round((this.bg.width * 0.5) - (this.windowBg.width * 0.5)), Math.round((this.bg.height * 0.5) - (this.windowBg.height * 0.5)));
            this.windowBar.position.set(this.windowBg.x, this.windowBg.y);
            this.titleText.position.set(this.windowBar.x, this.windowBar.y + 2);
            this.titleText.setTextBounds(0, 0, this.windowBar.width, this.windowBar.height);
            this.closeButton.position.set((this.windowBar.x + this.windowBar.width) - this.closeButton.close.width, this.windowBar.y + (this.windowBar.height * 0.5) - 1);
            this.content.position.set(this.windowBar.x, this.windowBar.y + this.windowBar.height);
            this.windowBg.clear();
            this.windowBg.scale.set(1, 1);
            this.windowBg.beginFill(0xCCCCCC, 0.35);
            this.windowBg.drawRoundedRect(0, 0, windowWidth, windowHeight, DinogenArena.GameUtil.RECTANGLE_RADIUS);
        };
        Window.prototype.onCloseClicked = function () {
            this.close();
        };
        Window.prototype.close = function () {
            _super.prototype.close.call(this);
            DinogenArena.SoundManager.PlayUISound("ui_window_close");
        };
        Window.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            if (this.data["onCloseCallback"] != undefined) {
                var callback = this.data["onCloseCallback"];
                callback.apply(this.data["onCloseCallbackContext"], this.data["onCloseCallbackParams"]);
            }
            this.destroy();
        };
        Window.TYPE_MESSAGE = "TYPE_MESSAGE";
        Window.TYPE_YES_NO = "TYPE_YES_NO";
        Window.TYPE_CHALLENGES = "TYPE_CHALLENGES";
        Window.TYPE_WEAPONS = "TYPE_WEAPONS";
        Window.TYPE_PERKS = "TYPE_PERKS";
        Window.TYPE_REPLACE_WEAPON = "TYPE_REPLACE_WEAPON";
        Window.TYPE_SURVIVAL_SUPPORT = "TYPE_SURVIVAL_SUPPORT";
        Window.TYPE_UNLOCKS = "TYPE_UNLOCKS";
        Window.TYPE_SETTINGS = "TYPE_SETTINGS";
        Window.TYPE_SURVIVAL_LEADERBOARDS = "TYPE_SURVIVAL_LEADERBOARDS";
        Window.CONTENT_PADDING = 24;
        Window.WINDOW_WIDTH = 700;
        Window.SCROLLABLE_HEIGHT = 400;
        return Window;
    }(Blurable));
    DinogenArena.Window = Window;
    var LoadoutSelection = /** @class */ (function (_super) {
        __extends(LoadoutSelection, _super);
        function LoadoutSelection(_callback, _callbackContext) {
            if (_callback === void 0) { _callback = null; }
            if (_callbackContext === void 0) { _callbackContext = null; }
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.callback = _callback;
            _this.callbackContext = _callbackContext;
            _this.itemButton = new DinogenArena.LoadoutItemButton(_this.onWeaponSelected, _this);
            _this.add(_this.itemButton);
            _this.stats = _this.game.add.group();
            _this.stats.x = _this.itemButton.width + 8;
            _this.add(_this.stats);
            return _this;
        }
        LoadoutSelection.prototype.destroy = function () {
            this.labelText = null;
            this.icon = null;
            _super.prototype.destroy.call(this);
        };
        LoadoutSelection.prototype.setFirearm = function (_firearm, _bSurvival) {
            var bAvailable = true;
            var bAlreadyOwns = false;
            var unlockLevel = _firearm.getUnlockLevel();
            if (_bSurvival) {
                var money = DinogenArena.GameUtil.GetGameState().gameMode.getSurvival().getSurvivalMoney();
                bAvailable = money >= _firearm.getCost();
                if (bAvailable) {
                    var char = DinogenArena.GameUtil.GetGameState().player;
                    if (char.hasInventoryItem(_firearm.getId())) {
                        bAlreadyOwns = true;
                        bAvailable = false;
                    }
                }
            }
            else {
                bAvailable = unlockLevel <= DinogenArena.PlayerManager.CurrentProfile.getCustomLevel();
            }
            if (!bAvailable) {
                this.itemButton.setData({
                    type: "weapon",
                    firearm: _firearm,
                    titleText: _bSurvival ? _firearm.getName() : ("Unlocked at Level " + unlockLevel),
                    descText: _bSurvival ? (bAlreadyOwns ? "You already have this weapon" : "Not enough money") : "",
                    bSurvival: _bSurvival,
                    bLocked: true
                });
                this.alpha = 0.35;
            }
            else {
                this.itemButton.setData({
                    type: "weapon",
                    firearm: _firearm,
                    bSurvival: _bSurvival
                });
                this.itemButton.parameters = [_firearm.getId()];
            }
            var dmgMax = 52;
            if (_firearm.isSniper()) {
                dmgMax = 110;
            }
            else if (_firearm.isShotgun()) {
                dmgMax = 100;
            }
            else if (_firearm.isLauncher()) {
                dmgMax = 100;
            }
            this.createStatBar("Damage", (_firearm.getDamage() * (_firearm.isShotgun() ? 3 : 1)) / dmgMax);
            this.createStatBar("Accuracy", 1 - (_firearm.getAccuracy() / (_firearm.isShotgun() ? 20 : 10)));
            this.createStatBar("Fire Rate", 1 - (_firearm.getFireRate() / 15));
            this.createStatBar("Reload Speed", 1 - (_firearm.getReloadTime() / 180));
            this.stats.y = (this.height * 0.5) - (this.stats.height * 0.5);
        };
        LoadoutSelection.prototype.setPerk = function (_perk) {
            var unlockLevel = _perk.getUnlockLevel();
            if (unlockLevel > DinogenArena.PlayerManager.CurrentProfile.getCustomLevel()) {
                this.itemButton.setData({
                    type: "perk",
                    perk: _perk,
                    titleText: "Unlocked at Level " + unlockLevel,
                    descText: "",
                    bLocked: true
                });
                this.alpha = 0.35;
            }
            else {
                this.itemButton.setData({
                    type: "perk",
                    perk: _perk
                });
                this.itemButton.parameters = [_perk.id];
            }
            //this.icon = this.game.add.image(this.bg.width * 0.5, this.bg.height * 0.5, "atlas_ui", _perk.id);
            //this.icon.anchor.set(0.5, 0.5);
            //this.add(this.icon);
        };
        LoadoutSelection.prototype.onWeaponSelected = function (_id) {
            this.callback.apply(this.callbackContext, [_id]);
        };
        LoadoutSelection.prototype.createStatBar = function (_label, _scale) {
            var label = this.game.add.text(0, 0, _label, { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "right" });
            label.setTextBounds(0, 0, 80, 32);
            label.y = this.stats.height;
            this.stats.add(label);
            var bar = new DinogenArena.UIBar(340, 0xFFFFFF, true, 0x000000, true);
            bar.min = 0.1;
            bar.height = 2;
            bar.x = label.x + label.textBounds.width + 6;
            bar.y = label.y + (label.height * 0.5) - 4;
            bar.setBarScale(_scale, true);
            this.stats.add(bar);
        };
        return LoadoutSelection;
    }(Phaser.Group));
    DinogenArena.LoadoutSelection = LoadoutSelection;
    var ChallengeTier = /** @class */ (function (_super) {
        __extends(ChallengeTier, _super);
        function ChallengeTier(_tierText, _xpText, _barScale, _bUnlocked) {
            if (_bUnlocked === void 0) { _bUnlocked = true; }
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var bComplete = _barScale >= 1;
            var padding = 12;
            _this.tierText = _this.game.add.text(0, 0, _tierText, { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "right" });
            _this.tierText.setTextBounds(0, 0, 88, _this.height);
            _this.add(_this.tierText);
            _this.progressBar = new DinogenArena.UIBar(200, bComplete ? DinogenArena.GameUtil.COLOUR_NEW : DinogenArena.GameUtil.COLOUR_XP, false, 0x000000, true);
            _this.progressBar.height = 2;
            _this.progressBar.x = 100;
            _this.progressBar.y = _this.tierText.height * 0.3;
            _this.add(_this.progressBar);
            _this.progressBar.setBarScale(_bUnlocked ? _barScale : 0, true);
            _this.xpText = _this.game.add.text(0, 0, bComplete ? "\u2714" : _xpText, { font: "14px " + DinogenArena.GameUtil.FONT, fill: bComplete ? DinogenArena.GameUtil.COLOUR_NEW_STRING : DinogenArena.GameUtil.COLOUR_XP_STRING });
            _this.xpText.x = _this.progressBar.x + _this.progressBar.width + padding;
            _this.add(_this.xpText);
            if (bComplete) {
                _this.alpha = 0.2;
            }
            else {
                _this.alpha = _bUnlocked ? 1 : 0.1;
            }
            return _this;
            //bComplete
        }
        ChallengeTier.prototype.destroy = function () {
            this.tierText = null;
            this.xpText = null;
            this.progressBar = null;
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(ChallengeTier.prototype, "width", {
            get: function () {
                return 400;
            },
            enumerable: true,
            configurable: true
        });
        return ChallengeTier;
    }(Phaser.Group));
    DinogenArena.ChallengeTier = ChallengeTier;
    var CinematicScreen = /** @class */ (function (_super) {
        __extends(CinematicScreen, _super);
        function CinematicScreen() {
            var _this = _super.call(this) || this;
            _this.scriptIndex = 0;
            _this.bCanBlur = false;
            _this.bHideHUD = true;
            _this.bg = _this.createOverlay(0);
            _this.add(_this.bg);
            _this.panel = _this.game.add.graphics();
            _this.panel.beginFill(0x000000, CinematicScreen.PANEL_ALPHA);
            _this.panel.drawRect(0, 0, _this.width, 100);
            _this.panel.y = _this.height - _this.panel.height;
            _this.add(_this.panel);
            _this.text = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.text.x = CinematicScreen.PANEL_PADDING;
            _this.text.y = _this.panel.y + (_this.panel.height * 0.5) + 6;
            _this.text.anchor.set(0, 0.5);
            _this.add(_this.text);
            _this.nameText = _this.game.add.text(0, 0, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING });
            _this.nameText.x = _this.text.x;
            _this.nameText.y = _this.text.y - _this.nameText.height - 6;
            _this.add(_this.nameText);
            _this.graphics = _this.game.add.graphics();
            _this.add(_this.graphics);
            _this.show();
            return _this;
        }
        CinematicScreen.prototype.destroy = function () {
            this.text = null;
            this.bg = null;
            this.graphics = null;
            this.curPos = null;
            this.curObj = null;
            this.avatar = null;
            _super.prototype.destroy.call(this);
        };
        CinematicScreen.prototype.tick = function () {
            if (this.curObj) {
                this.graphics.clear();
                this.graphics.lineStyle(2, 0x000000, CinematicScreen.PANEL_ALPHA);
                this.graphics.moveTo(this.text.x, this.panel.y);
                var useX = this.curObj.x - DinogenArena.GameUtil.game.camera.x;
                var useY = this.curObj.y - DinogenArena.GameUtil.game.camera.y;
                if (!this.curPos) {
                    this.curPos = new Phaser.Point(this.width * 0.5, this.panel.y);
                }
                var mult = 0.5;
                this.curPos.x -= (this.curPos.x - useX) * mult;
                this.curPos.y -= (this.curPos.y - useY) * mult;
                this.graphics.lineTo(this.curPos.x, this.curPos.y);
            }
        };
        CinematicScreen.prototype.startCinematic = function (_data) {
            this.data = _data;
            this.scriptIndex = 0;
            this.loadScript(0);
            this.onChildInputUp.add(this.onClick, this);
        };
        CinematicScreen.prototype.endCinematic = function () {
            this.close();
        };
        CinematicScreen.prototype.onClick = function () {
            this.nextScript();
        };
        CinematicScreen.prototype.nextScript = function () {
            this.scriptIndex++;
            this.loadScript(this.scriptIndex);
        };
        CinematicScreen.prototype.loadScript = function (_index) {
            this.curObj = null;
            var arr = this.data["scriptArray"];
            if (arr) {
                if (_index >= arr.length) {
                    if (this.data["onCompleteTriggerId"]) {
                        DinogenArena.GameUtil.GetGameState().gameMode.getCampaign().dispatchTrigger({ id: this.data["onCompleteTriggerId"] });
                    }
                    this.endCinematic();
                }
                else {
                    var cur = arr[_index];
                    if (cur["text"]) {
                        this.printText(cur["text"]);
                    }
                    if (cur["charId"]) {
                        var char = DinogenArena.GameUtil.GetGameState().getObjectById(cur["charId"]);
                        this.nameText.setText(char.getController().getGameModePlayer().getName(), true);
                        if (this.avatar) {
                            this.avatar.destroy();
                        }
                        this.avatar = new DinogenArena.CharacterAvatar();
                        this.avatar.fromPresetId(char.getAvatarId());
                        this.avatar.x = CinematicScreen.PANEL_PADDING;
                        this.avatar.y = (this.panel.y + (this.panel.height * 0.5)) - (this.avatar.height * 0.5);
                        this.text.x = this.avatar.x + this.avatar.width + CinematicScreen.PANEL_PADDING;
                        this.nameText.x = this.text.x;
                        this.add(this.avatar);
                        this.curObj = char;
                    }
                    if (cur["cameraTargetId"] != undefined) {
                        var camTarget = DinogenArena.GameUtil.GetGameState().getObjectById(cur["cameraTargetId"]);
                        if (camTarget) {
                            DinogenArena.GameUtil.GetGameState().setCameraTarget(camTarget);
                        }
                    }
                    else if (this.curObj) {
                        DinogenArena.GameUtil.GetGameState().setCameraTarget(this.curObj);
                    }
                    if (cur["triggerId"]) {
                        DinogenArena.GameUtil.GetGameState().gameMode.getCampaign().dispatchTrigger({ id: cur["triggerId"] });
                    }
                }
            }
        };
        CinematicScreen.prototype.printText = function (_val) {
            this.text.setText(_val, true);
        };
        CinematicScreen.prototype.onClose = function () {
            _super.prototype.onClose.call(this);
            DinogenArena.GameUtil.GetGameState().stopCinematic();
        };
        CinematicScreen.PANEL_PADDING = 32;
        CinematicScreen.PANEL_ALPHA = 0.5;
        return CinematicScreen;
    }(MenuBase));
    DinogenArena.CinematicScreen = CinematicScreen;
    var InterstitialAd = /** @class */ (function (_super) {
        __extends(InterstitialAd, _super);
        function InterstitialAd() {
            var _this = _super.call(this) || this;
            _this.bBlurWorld = true;
            _this.bHideHUD = true;
            _this.bg = _this.createOverlay();
            _this.addAt(_this.bg, 0);
            var wilkinButton = new DinogenArena.ImageButton(DinogenArena.GameUtil.OpenWilkinHomepage, DinogenArena.GameUtil, null, "xwilkinx_logo", null);
            wilkinButton.x = (_this.bg.width * 0.5) - (wilkinButton.width * 0.5);
            wilkinButton.y = (_this.bg.height * 0.5) - (wilkinButton.height);
            _this.add(wilkinButton);
            _this.titleText = _this.game.add.text(_this.bg.width * 0.5, wilkinButton.y + wilkinButton.height + 8, "Sponsored Message", { font: "18px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.titleText.anchor.set(0.5, 0);
            _this.add(_this.titleText);
            _this.descText = _this.game.add.text(_this.bg.width * 0.5, _this.titleText.y + _this.titleText.height, "Please consider disabling your adblocker to support XWILKINX!", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.descText.alpha = 0.5;
            _this.descText.anchor.set(0.5, 0);
            _this.add(_this.descText);
            var timer = _this.game.time.create();
            timer.add(2000, _this.showCloseButton, _this);
            timer.start();
            _this.show();
            return _this;
        }
        InterstitialAd.prototype.destroy = function () {
            this.bg = null;
            this.titleText = null;
            this.closeButton = null;
            _super.prototype.destroy.call(this);
        };
        InterstitialAd.prototype.showCloseButton = function () {
            this.closeButton = new DinogenArena.MenuButton(this.close, this, null, true, 150);
            this.closeButton.setLabelText("Resume Game");
            this.closeButton.x = (this.titleText.x) - (this.closeButton.width * 0.5);
            this.closeButton.y = this.descText.y + this.descText.height + 8;
            this.add(this.closeButton);
            var tween = this.game.add.tween(this.closeButton).from({ alpha: 0 }, 1000, Phaser.Easing.Exponential.Out, true);
        };
        InterstitialAd.prototype.show = function () {
            _super.prototype.show.call(this);
            DinogenArena.GameUtil.GetGameState().setPaused(true, false);
        };
        InterstitialAd.prototype.close = function () {
            _super.prototype.close.call(this);
            DinogenArena.GameUtil.GetGameState().setPaused(false, false);
        };
        InterstitialAd.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            DinogenArena.AdUtil.ShowAd();
        };
        return InterstitialAd;
    }(MenuBase));
    DinogenArena.InterstitialAd = InterstitialAd;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var Tooltip = /** @class */ (function (_super) {
        __extends(Tooltip, _super);
        function Tooltip() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0x000000, 1);
            graphics.drawRect(0, 0, 32, 32);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.add(_this.bg);
            return _this;
        }
        Tooltip.prototype.destroy = function () {
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        Tooltip.prototype.show = function (_data) {
            this.visible = true;
            if (!_data) {
                alert("Invalid tooltip data");
                return;
            }
            if (_data["text"] != undefined) {
            }
        };
        Tooltip.prototype.hide = function () {
            this.visible = false;
        };
        return Tooltip;
    }(Phaser.Group));
    DinogenArena.Tooltip = Tooltip;
    var TorsoCustomizer = /** @class */ (function (_super) {
        __extends(TorsoCustomizer, _super);
        function TorsoCustomizer(_width) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var gfx = _this.game.add.graphics();
            gfx.beginFill(0x000000, 0.2);
            gfx.drawRoundedRect(0, 0, _width, 100, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.add(gfx);
            _this.torso = _this.game.add.image(_this.width * 0.5, _this.height * 0.5, "atlas_char", DinogenArena.InventoryManager.ITEM_FIREARM_M9);
            _this.torso.anchor.set(0.5, 0.5);
            _this.add(_this.torso);
            return _this;
        }
        TorsoCustomizer.prototype.destroy = function () {
            this.torso = null;
            _super.prototype.destroy.call(this);
        };
        TorsoCustomizer.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.torso) {
                this.torso.rotation += 0.5 * DinogenArena.WilkinUtil.TO_RADIANS;
            }
        };
        return TorsoCustomizer;
    }(Phaser.Group));
    DinogenArena.TorsoCustomizer = TorsoCustomizer;
    var AvatarCustomizer = /** @class */ (function (_super) {
        __extends(AvatarCustomizer, _super);
        function AvatarCustomizer() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.avatar = new CharacterAvatar();
            _this.add(_this.avatar);
            /*
            this.torso = this.game.add.image(0, 0, "atlas_char", InventoryManager.ITEM_FIREARM_M9);
            this.torso.anchor.set(0.5, 0.5);
            this.add(this.torso);
            */
            _this.faceChanger = new DinogenArena.SettingsModifierModule_Button();
            _this.faceChanger.updateEvent.add(_this.onFaceChanged, _this);
            var arr = [
                { label: "Tone 1" },
                { label: "Tone 2" },
                { label: "Tone 3" },
                { label: "Tone 4" }
            ];
            _this.faceChanger.setData({ id: "face", items: arr, index: 0 });
            _this.faceChanger.y = _this.height + 8;
            _this.add(_this.faceChanger);
            _this.hairChanger = new DinogenArena.SettingsModifierModule_Button();
            _this.hairChanger.updateEvent.add(_this.onHairChanged, _this);
            var arr = [
                { label: "Generic" },
                { label: "Parted" },
                { label: "Messy" },
                { label: "Mohawk" },
                { label: "Buzzed" },
                { label: "Military" },
                { label: "Flat" },
                { label: "Balding" },
                { label: "Bald" },
            ];
            _this.hairChanger.setData({ id: "hair", items: arr, index: 0 });
            _this.hairChanger.x = _this.faceChanger.x + _this.faceChanger.width + 4;
            _this.hairChanger.y = _this.faceChanger.y;
            _this.add(_this.hairChanger);
            _this.glassesChanger = new DinogenArena.SettingsModifierModule_Button();
            _this.glassesChanger.updateEvent.add(_this.onGlassesChanged, _this);
            var arr = [
                { label: "None" },
                { label: "Spectacles" },
                { label: "Squared" },
                { label: "Shades" },
                { label: "Eye Patch" }
            ];
            _this.glassesChanger.setData({ id: "glasses", items: arr, index: 0 });
            _this.glassesChanger.x = _this.hairChanger.x + _this.hairChanger.width + 4;
            _this.glassesChanger.y = _this.faceChanger.y;
            _this.add(_this.glassesChanger);
            _this.beardChanger = new DinogenArena.SettingsModifierModule_Button();
            _this.beardChanger.updateEvent.add(_this.onBeardChanged, _this);
            var arr = [
                { label: "None" },
                { label: "Full" },
                { label: "Moustache" },
                { label: "Van Dyke" },
                { label: "Goatee" },
            ];
            _this.beardChanger.setData({ id: "beard", items: arr, index: 0 });
            _this.beardChanger.x = 0;
            _this.beardChanger.y = _this.height;
            _this.add(_this.beardChanger);
            _this.hairColourChanger = new DinogenArena.SettingsModifierModule_Button();
            _this.hairColourChanger.updateEvent.add(_this.onHairColourChanged, _this);
            var hairColours = [
                { id: CharacterAvatar.HAIR_COLOUR_BROWN, label: "Brown" },
                { id: CharacterAvatar.HAIR_COLOUR_BLONDE, label: "Blonde" },
                { id: CharacterAvatar.HAIR_COLOUR_BLACK, label: "Black" },
                { id: CharacterAvatar.HAIR_COLOUR_WHITE, label: "White" }
            ];
            _this.hairColourChanger.setData({ id: "hair_colour", items: hairColours, index: 0 });
            _this.hairColourChanger.x = _this.beardChanger.x + _this.beardChanger.width + 4;
            _this.hairColourChanger.y = _this.beardChanger.y;
            _this.add(_this.hairColourChanger);
            _this.eyesChanger = new DinogenArena.SettingsModifierModule_Button();
            _this.eyesChanger.updateEvent.add(_this.onEyesChanged, _this);
            var arr = [
                { label: "Brown" },
                { label: "Green" },
                { label: "Blue" },
                { label: "Grey" }
            ];
            _this.eyesChanger.setData({ id: "eyes", items: arr, index: 0 });
            _this.eyesChanger.x = _this.hairColourChanger.x + _this.hairColourChanger.width + 4;
            _this.eyesChanger.y = _this.hairColourChanger.y;
            _this.add(_this.eyesChanger);
            var container = _this.game.add.group();
            _this.randomizeButton = new DinogenArena.MenuButton(_this.onRandomizeClicked, _this);
            _this.randomizeButton.setLabelText("Randomize");
            container.add(_this.randomizeButton);
            _this.resetButton = new DinogenArena.MenuButton(_this.onResetClicked, _this);
            _this.resetButton.setLabelText("\u21BB Reset");
            _this.resetButton.x = _this.randomizeButton.width + 4;
            container.add(_this.resetButton);
            container.x = (_this.width * 0.5) - (container.width * 0.5);
            container.y = _this.height;
            _this.add(container);
            _this.avatar.x = (_this.width * 0.5) - (_this.avatar.width * 0.5);
            return _this;
        }
        AvatarCustomizer.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.torso) {
                this.torso.rotation += 1 * DinogenArena.WilkinUtil.TO_RADIANS;
            }
        };
        AvatarCustomizer.prototype.onFaceChanged = function () {
            this.avatar.setFace(this.faceChanger.itemIndex);
            this.saveToProfile();
        };
        AvatarCustomizer.prototype.onHairChanged = function () {
            this.avatar.setHair(this.hairChanger.itemIndex);
            this.saveToProfile();
        };
        AvatarCustomizer.prototype.onEyesChanged = function () {
            this.avatar.setEyes(this.eyesChanger.itemIndex);
            this.saveToProfile();
        };
        AvatarCustomizer.prototype.onGlassesChanged = function () {
            this.avatar.setGlasses(this.glassesChanger.itemIndex);
            this.saveToProfile();
        };
        AvatarCustomizer.prototype.onBeardChanged = function () {
            this.avatar.setBeard(this.beardChanger.itemIndex);
            this.saveToProfile();
        };
        AvatarCustomizer.prototype.onHairColourChanged = function () {
            this.avatar.setHairColour(this.hairColourChanger.getSelectedData());
            this.saveToProfile();
        };
        AvatarCustomizer.prototype.onRandomizeClicked = function () {
            this.avatar.randomize();
            this.updateChangers();
            this.saveToProfile();
        };
        AvatarCustomizer.prototype.onResetClicked = function () {
            this.avatar.reset();
            this.updateChangers();
            this.saveToProfile();
        };
        AvatarCustomizer.prototype.updateChangers = function () {
            var data = this.avatar.toObject();
            this.faceChanger.setFromIndex(data["face"]);
            this.hairChanger.setFromIndex(data["hair"]);
            this.eyesChanger.setFromIndex(data["eyes"]);
            this.beardChanger.setFromIndex(data["beard"]);
            this.glassesChanger.setFromIndex(data["glasses"]);
        };
        AvatarCustomizer.prototype.loadFromProfile = function () {
            //this.avatar.fromObject(PlayerManager.CurrentProfile.avatar);
            this.updateChangers();
        };
        AvatarCustomizer.prototype.saveToProfile = function () {
            //PlayerManager.CurrentProfile.avatar = this.avatar.toObject();
        };
        AvatarCustomizer.prototype.destroy = function () {
            this.avatar = null;
            this.randomizeButton = null;
            this.resetButton = null;
            _super.prototype.destroy.call(this);
        };
        return AvatarCustomizer;
    }(Phaser.Group));
    DinogenArena.AvatarCustomizer = AvatarCustomizer;
    var CharacterAvatar = /** @class */ (function (_super) {
        __extends(CharacterAvatar, _super);
        function CharacterAvatar() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.hairColour = 0xFFFFFF;
            _this.eyeColour = 0xFFFFFF;
            _this.face = _this.game.add.image(0, 0, "atlas_char_avatar", "mc_face0000");
            _this.add(_this.face);
            _this.hair = _this.game.add.image(1, -4, "atlas_char_avatar", "mc_hair0000");
            _this.add(_this.hair);
            _this.eyes = _this.game.add.image(_this.face.width * 0.5, 23, "atlas_char_avatar", "mc_eyes0000");
            _this.eyes.anchor.set(0.5, 0);
            _this.add(_this.eyes);
            _this.eyebrows = _this.game.add.image(_this.face.width * 0.5, _this.eyes.y - 2, "atlas_char_avatar", "mc_eyebrows0000");
            _this.eyebrows.anchor.set(0.5, 0);
            _this.add(_this.eyebrows);
            _this.glasses = _this.game.add.image(_this.face.width * 0.5, _this.eyes.y - 5, "atlas_char_avatar", "mc_glasses0000");
            _this.glasses.anchor.set(0.5, 0);
            _this.add(_this.glasses);
            _this.beard = _this.game.add.image(_this.face.width * 0.5, 26, "atlas_char_avatar", "mc_beard0000");
            _this.beard.anchor.set(0.5, 0);
            _this.add(_this.beard);
            _this.reset();
            return _this;
        }
        CharacterAvatar.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        CharacterAvatar.prototype.reset = function () {
            this.setFace(0);
            this.setHair(0);
            this.setEyes(0);
            this.setGlasses(0);
            this.setBeard(0);
            this.setHairColour(CharacterAvatar.HAIR_COLOUR_BROWN);
        };
        CharacterAvatar.prototype.randomize = function () {
            this.setFace(DinogenArena.WilkinUtil.GenerateRandomNumber(0, 3));
            this.setHair(DinogenArena.WilkinUtil.GenerateRandomNumber(0, 8));
            this.setEyes(DinogenArena.WilkinUtil.GenerateRandomNumber(0, 3));
            this.setGlasses(DinogenArena.WilkinUtil.GenerateRandomNumber(0, 4));
            this.setBeard(DinogenArena.WilkinUtil.GenerateRandomNumber(0, 4));
            this.setHairColour(CharacterAvatar.GetRandomHairColour());
        };
        CharacterAvatar.prototype.fromObject = function (_data) {
            this.setFace(_data["face"]);
            this.setHair(_data["hair"]);
            this.setEyes(_data["eyes"]);
            this.setGlasses(_data["glasses"]);
            this.setBeard(_data["beard"]);
            this.setHairColour(_data["hairColour"]);
        };
        CharacterAvatar.prototype.toObject = function () {
            return {
                face: this.getNumFromFrameName(this.face.frameName),
                hair: this.getNumFromFrameName(this.hair.frameName),
                eyes: this.getNumFromFrameName(this.eyes.frameName),
                glasses: this.getNumFromFrameName(this.glasses.frameName),
                beard: this.getNumFromFrameName(this.beard.frameName),
                hairColour: this.hairColour
            };
        };
        CharacterAvatar.prototype.getNumFromFrameName = function (_frameName) {
            var str = _frameName.substring(_frameName.indexOf("000"));
            return Number(str);
        };
        CharacterAvatar.prototype.setFace = function (_val) {
            this.face.frameName = "mc_face000" + _val;
        };
        CharacterAvatar.prototype.setHair = function (_val) {
            this.hair.frameName = "mc_hair000" + _val;
        };
        CharacterAvatar.prototype.setEyes = function (_val) {
            this.eyes.frameName = "mc_eyes000" + _val;
        };
        CharacterAvatar.prototype.setGlasses = function (_val) {
            this.glasses.frameName = "mc_glasses000" + _val;
        };
        CharacterAvatar.prototype.setBeard = function (_val) {
            this.beard.frameName = "mc_beard000" + _val;
        };
        CharacterAvatar.prototype.setHairColour = function (_val) {
            this.hairColour = _val;
            this.hair.tint = _val;
            this.eyebrows.tint = _val;
            this.beard.tint = _val;
        };
        CharacterAvatar.RandomizeAvatar = function (_avatar) {
            _avatar.randomize();
        };
        CharacterAvatar.GetRandomHairColour = function () {
            var arr = [
                CharacterAvatar.HAIR_COLOUR_BROWN,
                CharacterAvatar.HAIR_COLOUR_BLONDE,
                CharacterAvatar.HAIR_COLOUR_BLACK,
                CharacterAvatar.HAIR_COLOUR_WHITE
            ];
            return arr[DinogenArena.WilkinUtil.GenerateRandomNumber(0, arr.length - 1)];
        };
        CharacterAvatar.prototype.fromCurrentProfile = function () {
            //this.fromObject(PlayerManager.CurrentProfile.avatar);
        };
        CharacterAvatar.prototype.fromPresetId = function (_id) {
            if (_id == CharacterAvatar.PRESET_BROCK) {
                this.setFace(0);
                this.setHair(4);
                this.setEyes(1);
                this.setGlasses(0);
                this.setBeard(1);
                this.setHairColour(CharacterAvatar.HAIR_COLOUR_BROWN);
            }
            else if (_id == CharacterAvatar.PRESET_LIAM) {
                this.setFace(0);
                this.setHair(4);
                this.setEyes(0);
                this.setGlasses(2);
                this.setBeard(1);
                this.setHairColour(CharacterAvatar.HAIR_COLOUR_BLACK);
            }
            else if (_id == CharacterAvatar.PRESET_PETERSON) {
                this.setFace(0);
                this.setHair(8);
                this.setEyes(0);
                this.setGlasses(2);
                this.setBeard(2);
                this.setHairColour(CharacterAvatar.HAIR_COLOUR_BLONDE);
            }
            else if (_id == CharacterAvatar.PRESET_AXEL) {
                this.setFace(0);
                this.setHair(0);
                this.setEyes(0);
                this.setGlasses(0);
                this.setBeard(3);
                this.setHairColour(CharacterAvatar.HAIR_COLOUR_BLACK);
            }
            else if (_id == CharacterAvatar.PRESET_PLAYER) {
                this.fromCurrentProfile();
            }
            else {
                console.warn("Unknown avatar preset");
                this.randomize();
            }
        };
        CharacterAvatar.HAIR_COLOUR_BROWN = 0x433930;
        CharacterAvatar.HAIR_COLOUR_BLACK = 0x111111;
        CharacterAvatar.HAIR_COLOUR_BLONDE = 0xA89E77;
        CharacterAvatar.HAIR_COLOUR_WHITE = 0xCCCCCC;
        CharacterAvatar.PRESET_BROCK = "PRESET_BROCK";
        CharacterAvatar.PRESET_LIAM = "PRESET_LIAM";
        CharacterAvatar.PRESET_PETERSON = "PRESET_PETERSON";
        CharacterAvatar.PRESET_AXEL = "PRESET_AXEL";
        CharacterAvatar.PRESET_PLAYER = "PRESET_PLAYER";
        return CharacterAvatar;
    }(Phaser.Group));
    DinogenArena.CharacterAvatar = CharacterAvatar;
    var UIBar = /** @class */ (function (_super) {
        __extends(UIBar, _super);
        function UIBar(_barWidth, _barColour, _interpColour, _bgColour, _bTicks) {
            if (_barColour === void 0) { _barColour = 0xFFFFFF; }
            if (_interpColour === void 0) { _interpColour = false; }
            if (_bgColour === void 0) { _bgColour = 0x000000; }
            if (_bTicks === void 0) { _bTicks = false; }
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.min = 0;
            _this.max = 1;
            _this.barWidth = 32;
            _this.bInterpColour = false;
            _this.barWidth = _barWidth;
            _this.bInterpColour = _interpColour;
            var graphics = _this.game.add.graphics(0, 0);
            graphics.beginFill(_bgColour, 0.5);
            graphics.drawRect(0, 0, _this.barWidth, 32);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            _this.addAt(_this.bg, 0);
            if (_bTicks) {
                var numTicks = 5;
                for (var i = 0; i < numTicks; i++) {
                    var gfx = _this.game.add.graphics();
                    gfx.beginFill(0xFFFFFF, 0.1);
                    gfx.drawRect(0, 0, 2, _this.height);
                    var tick = _this.game.add.image(0, 0, gfx.generateTexture());
                    tick.x = Math.floor(((i + 1) / (numTicks + 1)) * _this.barWidth);
                    gfx.destroy();
                    _this.add(tick);
                }
            }
            _this.setBarColour(_barColour);
            _this.setBarScale(0, true);
            return _this;
        }
        UIBar.prototype.setBarColour = function (_val) {
            var prevScale = 1;
            if (this.bar) {
                prevScale = this.bar.scale.x;
                this.bar.destroy();
            }
            var graphics = this.game.add.graphics(0, 0);
            graphics.beginFill(_val, 1);
            graphics.drawRect(0, 0, this.barWidth, 32);
            this.bar = this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            this.add(this.bar);
            this.bar.scale.x = prevScale;
        };
        UIBar.prototype.setBarScale = function (_val, _bInstant) {
            if (_bInstant === void 0) { _bInstant = false; }
            if (this.bar) {
                _val = Math.max(Math.min(_val, this.max), this.min);
                if (_bInstant) {
                    this.bar.scale.x = _val;
                }
                else {
                    this.game.add.tween(this.bar.scale).to({ x: _val }, 350, Phaser.Easing.Cubic.Out, true);
                }
                if (this.bInterpColour) {
                    var interp = Phaser.Color.linearInterpolation([0xFFFFFF, DinogenArena.GameUtil.COLOUR_THEME], _val);
                    this.bar.tint = interp;
                }
            }
        };
        UIBar.prototype.destroy = function () {
            this.bar = null;
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        return UIBar;
    }(Phaser.Group));
    DinogenArena.UIBar = UIBar;
    var ScrollableContainer = /** @class */ (function (_super) {
        __extends(ScrollableContainer, _super);
        function ScrollableContainer(_w, _h) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.itemPadding = 6;
            _this.setArea(_w, _h);
            _this.items = _this.game.add.group();
            //this.add(this.items);
            _this.scrollBar = new ScrollBar(_h, _this.scrollUpdate, _this);
            _this.scrollBar.x = _w - _this.scrollBar.width;
            _this.add(_this.scrollBar);
            _this.scrollBar.visible = false;
            DinogenArena.GameUtil.game.setCurrentScroller(_this);
            return _this;
        }
        ScrollableContainer.prototype.destroy = function () {
            DinogenArena.GameUtil.game.setCurrentScroller(null);
            this.bg = null;
            this.items = null;
            _super.prototype.destroy.call(this);
        };
        ScrollableContainer.prototype.scrollToBottom = function () {
            /* TODO */
        };
        ScrollableContainer.prototype.updateMask = function () {
            if (this.masker) {
                this.masker.destroy();
            }
            this.add(this.items);
            this.items.mask = undefined;
            this.masker = this.game.add.graphics(0, 0);
            this.add(this.masker);
            this.masker.beginFill(0xFFFFFF);
            this.masker.drawRect(0, 0, this.bg.width, this.bg.height);
            this.items.mask = this.masker;
        };
        ScrollableContainer.prototype.scrollUpdate = function (_val) {
            if (!this.canScroll()) {
                return;
            }
            this.items.position.y = -(this.items.height - (this.bg.height - (this.itemPadding * 2))) * _val;
        };
        ScrollableContainer.prototype.canScroll = function () {
            return this.scrollBar.visible;
        };
        ScrollableContainer.prototype.setArea = function (_w, _h) {
            if (this.bg) {
                this.bg.destroy();
            }
            var graphics = this.game.add.graphics();
            graphics.beginFill(0x000000, 0.2);
            graphics.drawRoundedRect(0, 0, _w, _h, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            this.bg = this.game.add.image(0, 0, graphics.generateTexture());
            graphics.destroy();
            this.add(this.bg);
        };
        ScrollableContainer.prototype.addItem = function (_item, _bCenter) {
            if (_bCenter === void 0) { _bCenter = false; }
            _item.x = this.itemPadding;
            if (_bCenter) {
                _item.x += (this.bg.width * 0.5) - (_item.width * 0.5);
            }
            //_item.y = (this.items.height + this.itemPadding);            
            if (this.items.length > 0) {
                var child = this.items.getChildAt(this.items.length - 1);
                _item.y = child.y + child.height;
            }
            _item.y += this.itemPadding;
            this.items.addChild(_item);
            this.scrollBar.visible = this.items.height > this.bg.height;
        };
        ScrollableContainer.prototype.clearItems = function () {
            this.items.removeAll(true);
            this.items.position.y = 0;
            this.scrollBar.thumb.y = 0;
            this.scrollBar.visible = false;
        };
        ScrollableContainer.prototype.scroll = function (_val) {
            if (this.items.height <= this.masker.height) {
                return;
            }
            var weight = 20;
            this.scrollBar.moveThumb(_val);
        };
        Object.defineProperty(ScrollableContainer.prototype, "width", {
            get: function () {
                return this.bg.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollableContainer.prototype, "height", {
            get: function () {
                return this.bg.height;
            },
            enumerable: true,
            configurable: true
        });
        return ScrollableContainer;
    }(Phaser.Group));
    DinogenArena.ScrollableContainer = ScrollableContainer;
    var ScrollBar = /** @class */ (function (_super) {
        __extends(ScrollBar, _super);
        function ScrollBar(_h, _callback, _callbackContext) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.callback = _callback;
            _this.callbackContext = _callbackContext;
            var scrollerWidth = 10;
            var graphics = _this.game.add.graphics();
            graphics.beginFill(0x000000, 0.35);
            graphics.drawRoundedRect(0, 0, scrollerWidth, _h, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.bg = _this.game.add.image(0, 0, graphics.generateTexture());
            _this.add(_this.bg);
            graphics.destroy();
            //graphics = this.game.add.graphics();
            //graphics.beginFill(0xFFFFFF, 1);
            //graphics.drawRect(0, 0, this.bg.width, 50);
            //this.thumb = this.game.add.sprite(0, 0, graphics.generateTexture());
            _this.thumb = new DinogenArena.ScrollThumbButton(null, null, null, _this.bg.width, 50);
            _this.add(_this.thumb);
            graphics.destroy();
            _this.thumb.inputEnabled = true;
            _this.thumb.input.enableDrag(false);
            _this.thumb.input.setDragLock(false, true);
            _this.thumb.input.boundsRect = new Phaser.Rectangle(0, 0, _this.thumb.width, _h);
            _this.thumb.events.onDragUpdate.add(_this.onThumbUpdate, _this);
            return _this;
        }
        ScrollBar.prototype.destroy = function () {
            this.callback = null;
            this.callbackContext = null;
            this.bg = null;
            this.thumb = null;
            _super.prototype.destroy.call(this);
        };
        ScrollBar.prototype.moveThumb = function (_val) {
            var desiredY = (this.thumb.y + (_val * 0.5));
            this.thumb.y = Math.max(0, Math.min(this.bg.height - this.thumb.height, desiredY));
            this.onThumbUpdate();
        };
        ScrollBar.prototype.onThumbUpdate = function () {
            this.callback.apply(this.callbackContext, [this.thumb.position.y / (this.thumb.input.boundsRect.height - this.thumb.height)]);
        };
        return ScrollBar;
    }(Phaser.Group));
    DinogenArena.ScrollBar = ScrollBar;
    var XPBar = /** @class */ (function (_super) {
        __extends(XPBar, _super);
        function XPBar(_width, _bCustom) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.bCustom = false;
            _this.bCustom = _bCustom;
            _this.container = _this.game.add.group();
            _this.add(_this.container);
            var padding = 8;
            var profile = DinogenArena.PlayerManager.CurrentProfile;
            var bMaxLevelReached = profile.isMaxCustomLevel();
            var bg = _this.game.add.graphics();
            bg.beginFill(0x000000, 0);
            bg.drawRect(0, 0, _width, 80);
            _this.addAt(bg, 0);
            var textPadding = 100;
            var barPadding = 8;
            _this.curLevelText = _this.game.add.text(0, 8, "99", { font: "28px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "right" });
            _this.container.addChild(_this.curLevelText);
            _this.xpBar = new UIBar(_width - (textPadding * 2), DinogenArena.GameUtil.COLOUR_XP, false, 0x000000, true);
            //this.xpBar.width = _width - (textPadding * 2);
            _this.xpBar.height = 4;
            _this.xpBar.x = textPadding;
            _this.container.addChild(_this.xpBar);
            _this.xpBar.setBarScale(0, true);
            _this.nextLevelText = _this.game.add.text((_width - textPadding) + barPadding, _this.curLevelText.y, "99", { font: "28px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left" });
            _this.nextLevelText.alpha = 0.2;
            _this.container.addChild(_this.nextLevelText);
            _this.xpBar.y = (_this.curLevelText.y + (_this.curLevelText.height * 0.5)) - _this.xpBar.height;
            _this.xpText = _this.game.add.text(_this.xpBar.x + (_this.xpBar.width * 0.5), _this.xpBar.y, "", { font: "16px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING, align: "center" });
            _this.xpText.anchor.set(0.5, 1);
            _this.container.add(_this.xpText);
            _this.nextXPText = _this.game.add.text(_this.xpBar.x + (_this.xpBar.width * 0.5), _this.xpBar.y + padding, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: DinogenArena.GameUtil.COLOUR_XP_STRING, align: "center" });
            _this.nextXPText.anchor.set(0.5, 0);
            _this.nextXPText.alpha = 0.5;
            _this.container.add(_this.nextXPText);
            _this.curLevelText.setTextBounds(0, 0, textPadding - barPadding, 32);
            _this.nextLevelText.setTextBounds(0, 0, textPadding, 32);
            _this.prestigeIcon = _this.game.add.image(0, 0, "atlas_ui", "icon_button_prestige");
            _this.prestigeIcon.tint = DinogenArena.GameUtil.COLOUR_XP;
            _this.prestigeIcon.alpha = 0.1;
            _this.prestigeIcon.anchor.set(0.5, 0.5);
            _this.prestigeIcon.x = _this.width * 0.5;
            _this.prestigeIcon.y = _this.height * 0.5;
            _this.addAt(_this.prestigeIcon, 0);
            /*
            var ticksContainer = this.game.add.group();
            var ticks = this.game.add.graphics();
            var numTicks = 4;
            ticks.beginFill(0xFFFFFF, 0.2);
            for (var i = 0; i < numTicks; i++)
            {
                ticks.drawRect(Math.round(((i + 1) / (numTicks + 1)) * this.xpBar.width), 0, 1, this.xpBar.height);
            }
            ticksContainer.add(ticks);
            ticksContainer.x = this.xpBar.x;
            ticksContainer.y = this.xpBar.y;
            this.container.add(ticksContainer);
            */
            _this.updateForPlayer();
            return _this;
        }
        XPBar.prototype.updateForPlayer = function () {
            var bInGame = DinogenArena.GameUtil.game.isInGameState();
            var campaign;
            if (bInGame) {
                campaign = DinogenArena.GameUtil.GetGameState().gameMode.getCampaign();
            }
            var bInCampaign = bInGame && !this.bCustom;
            var profile = DinogenArena.PlayerManager.CurrentProfile;
            var bMaxLevelReached = profile.isMaxCustomLevel();
            var currentLevel = profile.getCustomLevel();
            if (bInCampaign) {
                currentLevel = campaign.getStoryLevel();
            }
            this.curLevelText.setText(currentLevel.toString(), true);
            this.nextLevelText.setText(bMaxLevelReached ? "N/A" : (currentLevel + 1).toString(), true);
            var xpString;
            if (bMaxLevelReached) {
                xpString = "Max level reached";
                this.xpBar.setBarScale(1);
            }
            else {
                var requiredXPForNextLevel = profile.getRequiredXPForNextCustomLevel();
                xpString = "Next level: " + DinogenArena.WilkinUtil.FormatNum(requiredXPForNextLevel - profile.getCustomXP()) + "XP needed";
                var barPercent = profile.getPercentToNextCustomLevel();
                this.xpBar.setBarScale(barPercent, true);
            }
            if (this.bCustom) {
                var bPrestiged = profile.isCustomPrestiged();
                if (bPrestiged) {
                    //xpString += " (Prestige)"; // + WilkinUtil.ConvertToNumeral(prestige);
                }
                this.prestigeIcon.visible = bPrestiged;
            }
            var actualXP = profile.getCustomXP();
            if (bInCampaign) {
                actualXP = campaign.getStoryXP();
            }
            this.xpText.setText(DinogenArena.WilkinUtil.FormatNum(actualXP) + "XP", true);
            this.nextXPText.setText(xpString, true);
            var rankIconScale = 0.8;
            var rankCurrent = this.game.add.image(0, 0, "atlas_ui", DinogenArena.GameUtil.GetRankIconForLevel(currentLevel));
            rankCurrent.scale.set(rankIconScale, rankIconScale);
            rankCurrent.x = this.curLevelText.x;
            rankCurrent.y = 0;
            this.add(rankCurrent);
            if (!bMaxLevelReached) {
                var rankNext = this.game.add.image(0, 0, "atlas_ui", DinogenArena.GameUtil.GetRankIconForLevel(currentLevel + 1));
                rankNext.scale.set(rankIconScale, rankIconScale);
                rankNext.alpha = 0.2;
                rankNext.x = (this.width - rankNext.width);
                rankNext.y = (this.height * 0.5) - (rankNext.height * 0.5);
                this.add(rankNext);
            }
            this.container.y = (rankCurrent.height * 0.5) - (this.container.height * 0.5);
        };
        XPBar.prototype.destroy = function () {
            this.container = null;
            this.xpBar = null;
            this.curLevelText = null;
            this.nextLevelText = null;
            this.xpText = null;
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(XPBar.prototype, "height", {
            get: function () {
                return 80;
            },
            enumerable: true,
            configurable: true
        });
        return XPBar;
    }(Phaser.Group));
    DinogenArena.XPBar = XPBar;
    var AchievementsContainer = /** @class */ (function (_super) {
        __extends(AchievementsContainer, _super);
        function AchievementsContainer(_width) {
            if (_width === void 0) { _width = 500; }
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var gfx = _this.game.add.graphics();
            gfx.beginFill(0x000000, 0.2);
            gfx.drawRoundedRect(0, 0, _width, 130, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.add(gfx);
            _this.labelText = _this.game.add.text(0, 8, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.labelText.alpha = 0.2;
            _this.labelText.setTextBounds(0, 0, _this.width, 32);
            _this.add(_this.labelText);
            _this.descText = _this.game.add.text(0, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.descText.setTextBounds(0, 0, _this.width, 32);
            _this.descText.y = _this.height - _this.descText.height;
            _this.add(_this.descText);
            _this.updateAchievements();
            return _this;
        }
        AchievementsContainer.prototype.destroy = function () {
            this.container = null;
            _super.prototype.destroy.call(this);
        };
        AchievementsContainer.prototype.updateAchievements = function () {
            if (this.container) {
                this.container.destroy();
            }
            this.container = this.game.add.group();
            this.add(this.container);
            var achievements = DinogenArena.PlayerManager.CurrentProfile.achievements;
            console.log(achievements);
            var arr = DinogenArena.Achievements.GetAllIds();
            var unlocked = 0;
            for (var i = 0; i < arr.length; i++) {
                var curId = arr[i];
                var data = achievements[curId];
                var but = new DinogenArena.AchievementButton();
                but.x = i * (but.width + 9);
                but.setData(data);
                but.setLabelText(data["name"]);
                but.setUnlocked(data["bUnlocked"]);
                if (data["bUnlocked"]) {
                    unlocked++;
                    DinogenArena.APIUtil.UnlockAchievement(curId);
                }
                this.container.add(but);
                but.events.onInputOver.add(this.onAchievementOver, this);
                but.events.onInputOut.add(this.onAchievementOut, this);
            }
            this.labelText.setText(unlocked + " of " + arr.length, true);
            this.container.x = (this.width * 0.5) - (this.container.width * 0.5);
            this.container.y = (this.height * 0.5) - (this.container.height * 0.5);
        };
        AchievementsContainer.prototype.onAchievementOver = function (_button) {
            this.descText.setText(_button.data["desc"], true);
        };
        AchievementsContainer.prototype.onAchievementOut = function (_button) {
            this.descText.setText("", true);
        };
        return AchievementsContainer;
    }(Phaser.Group));
    DinogenArena.AchievementsContainer = AchievementsContainer;
    var LeaderboardHeader = /** @class */ (function (_super) {
        __extends(LeaderboardHeader, _super);
        function LeaderboardHeader() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var useHeight = 32;
            _this.bg = _this.game.add.graphics();
            _this.bg.beginFill(0x000000, 0.5);
            _this.bg.drawRoundedRect(0, 0, 600, useHeight, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.add(_this.bg);
            var xPadding = 12;
            var yPadding = 4;
            _this.numText = _this.game.add.text(xPadding, yPadding, "Rank", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.numText.setTextBounds(0, 0, 50, useHeight);
            _this.add(_this.numText);
            _this.nameText = _this.game.add.text(0, yPadding, "Player", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left", boundsAlignV: "middle" });
            //this.nameText.alpha = 0.5;
            _this.nameText.x = (_this.numText.x + _this.numText.textBounds.width + xPadding) + 80;
            _this.nameText.setTextBounds(0, 0, _this.width * 0.5, useHeight);
            _this.add(_this.nameText);
            _this.scoreText = _this.game.add.text(0, yPadding, "Total Kills", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.scoreText.setTextBounds(0, 0, 150, useHeight);
            _this.scoreText.x = _this.width - (_this.scoreText.textBounds.width + xPadding);
            _this.add(_this.scoreText);
            return _this;
        }
        LeaderboardHeader.prototype.destroy = function () {
            this.bg = null;
            this.numText = null;
            this.nameText = null;
            this.scoreText = null;
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(LeaderboardHeader.prototype, "height", {
            get: function () {
                return this.bg.height;
            },
            enumerable: true,
            configurable: true
        });
        return LeaderboardHeader;
    }(Phaser.Group));
    DinogenArena.LeaderboardHeader = LeaderboardHeader;
    var LeaderboardPlayer = /** @class */ (function (_super) {
        __extends(LeaderboardPlayer, _super);
        function LeaderboardPlayer(_data) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.data = _data;
            var useHeight = 32;
            _this.bg = _this.game.add.graphics();
            _this.bg.beginFill(0xFFFFFF, 0.1);
            _this.bg.drawRoundedRect(0, 0, 600, useHeight, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.add(_this.bg);
            var xPadding = 12;
            var yPadding = 4;
            _this.numText = _this.game.add.text(xPadding, yPadding, "-", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            //this.numText.alpha = 0.5;
            _this.numText.setTextBounds(0, 0, 50, useHeight);
            _this.add(_this.numText);
            _this.nameText = _this.game.add.text(0, yPadding, "-", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "left", boundsAlignV: "middle" });
            _this.nameText.alpha = 0.5;
            _this.nameText.x = (_this.numText.x + _this.numText.textBounds.width + xPadding) + 80;
            _this.nameText.setTextBounds(0, 0, _this.width * 0.5, useHeight);
            _this.add(_this.nameText);
            _this.scoreText = _this.game.add.text(0, yPadding, "-", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center", boundsAlignV: "middle" });
            _this.scoreText.alpha = 0.5;
            _this.scoreText.setTextBounds(0, 0, 150, useHeight);
            _this.scoreText.x = _this.width - (_this.scoreText.textBounds.width + xPadding);
            _this.add(_this.scoreText);
            if (_this.data) {
                _this.nameText.setText(_this.data["name"], true);
                _this.scoreText.setText(DinogenArena.WilkinUtil.FormatNum(_this.data["score"]), true);
                if (_this.data["url"]) {
                    var urlButton = new DinogenArena.ImageButton(_this.onURLClicked, _this, [_this.data["url"]], "atlas_ui", "icon_player");
                    urlButton.x = _this.nameText.x - (urlButton.width + 4);
                    urlButton.y = (_this.height * 0.5) - (urlButton.height * 0.5);
                    _this.add(urlButton);
                }
            }
            return _this;
        }
        LeaderboardPlayer.prototype.destroy = function () {
            this.data = null;
            this.bg = null;
            this.numText = null;
            this.nameText = null;
            this.scoreText = null;
            _super.prototype.destroy.call(this);
        };
        LeaderboardPlayer.prototype.onURLClicked = function (_url) {
            open(_url, "_blank");
        };
        Object.defineProperty(LeaderboardPlayer.prototype, "height", {
            get: function () {
                return this.bg.height;
            },
            enumerable: true,
            configurable: true
        });
        LeaderboardPlayer.prototype.setNum = function (_val) {
            this.numText.setText(_val.toString(), true);
            if (_val % 2 == 0) {
                this.bg.alpha = 0.5;
            }
            var placeColours = [
                0xCFB53B,
                0xE6E8FA,
                0x8C7853
            ];
            var gfx = this.game.add.graphics();
            gfx.beginFill(0xFFFFFF, 1);
            gfx.drawCircle(0, 0, 8);
            var icon = this.game.add.image(0, 0, gfx.generateTexture());
            gfx.destroy();
            icon.anchor.set(0.5, 0.5);
            if ((_val - 1) <= placeColours.length - 1) {
                icon.tint = placeColours[_val - 1];
            }
            else {
                icon.alpha = 0.1;
            }
            icon.x = this.numText.x + 4;
            icon.y = (this.height * 0.5) + 2;
            this.add(icon);
        };
        return LeaderboardPlayer;
    }(Phaser.Group));
    DinogenArena.LeaderboardPlayer = LeaderboardPlayer;
    var AchievementBubble = /** @class */ (function (_super) {
        __extends(AchievementBubble, _super);
        function AchievementBubble(_achievementId) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.timer = 240;
            var gfx = _this.game.add.graphics();
            gfx.lineStyle(1, 0xFFFFFF, 0.5);
            gfx.beginFill(0x333333, 0.9); //0x515B66
            gfx.drawRoundedRect(0, 0, _this.width, _this.height, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            var container = _this.game.add.image(0, 0, gfx.generateTexture());
            _this.add(container);
            gfx.destroy();
            var icon = _this.game.add.image(0, 0, "atlas_medals", _achievementId);
            icon.anchor.set(0.5, 0.5);
            icon.width = 40;
            icon.scale.y = icon.scale.x;
            icon.x = _this.width * 0.5;
            icon.y = (_this.height * 0.5) - 2;
            container.addChild(icon);
            var titleText = _this.game.add.text(_this.width * 0.5, 4, "Achievement Unlocked", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            titleText.anchor.set(0.5, 0);
            container.addChild(titleText);
            _this.labelText = _this.game.add.text(_this.width * 0.5, 0, "", { font: "14px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.labelText.anchor.set(0.5, 0);
            container.addChild(_this.labelText);
            _this.descText = _this.game.add.text(_this.width * 0.5, 0, "", { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF" });
            _this.descText.y = _this.height - (_this.descText.height - 4);
            _this.descText.anchor.set(0.5, 0);
            _this.descText.alpha = 0.8;
            container.addChild(_this.descText);
            _this.labelText.y = _this.descText.y - (_this.labelText.height - 6);
            _this.setAchievement(_achievementId);
            _this.game.add.tween(container).from({ alpha: 0 }, 500, Phaser.Easing.Exponential.Out, true);
            return _this;
        }
        AchievementBubble.prototype.destroy = function () {
            this.labelText = null;
            this.descText = null;
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(AchievementBubble.prototype, "width", {
            get: function () {
                return 300;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievementBubble.prototype, "height", {
            get: function () {
                return 100;
            },
            enumerable: true,
            configurable: true
        });
        AchievementBubble.prototype.update = function () {
            if (this.timer > 0) {
                this.timer--;
            }
            else if (this.timer == 0) {
                this.hide();
                this.timer = -1;
            }
        };
        AchievementBubble.prototype.hide = function () {
            DinogenArena.GameUtil.game.destroyAchievement();
        };
        AchievementBubble.prototype.setAchievement = function (_id) {
            var data = DinogenArena.PlayerManager.CurrentProfile.achievements[_id];
            if (data) {
                this.labelText.setText(data["name"], true);
                this.descText.setText(data["desc"], true);
            }
            DinogenArena.SoundManager.PlayUISound("ui_prestige");
        };
        return AchievementBubble;
    }(Phaser.Group));
    DinogenArena.AchievementBubble = AchievementBubble;
    var SurvivalInfoBox = /** @class */ (function (_super) {
        __extends(SurvivalInfoBox, _super);
        function SurvivalInfoBox(_id) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            _this.bg = _this.game.add.graphics();
            _this.bg.beginFill(0xFFFFFF, 0.1);
            _this.bg.drawRoundedRect(0, 0, 140, 180, DinogenArena.GameUtil.RECTANGLE_RADIUS);
            _this.add(_this.bg);
            _this.setId(_id);
            return _this;
        }
        SurvivalInfoBox.prototype.destroy = function () {
            this.bg = null;
            _super.prototype.destroy.call(this);
        };
        SurvivalInfoBox.prototype.setId = function (_id) {
            var icon;
            var descString;
            if (_id == SurvivalInfoBox.ID_ARMORY) {
                descString = "Buy new weapons, ammo, and perks";
                icon = this.game.add.image(0, 0, "atlas_weapons", DinogenArena.InventoryManager.ITEM_FIREARM_HK417);
            }
            else if (_id == SurvivalInfoBox.ID_SOLDIERS) {
                descString = "Additional soldiers increase your firepower";
                icon = this.game.add.image(0, 0, "atlas_ui", "soldier_sniper");
            }
            else if (_id == SurvivalInfoBox.ID_SUPPORT) {
                descString = "Air support can provide cover fire or airdrops";
                icon = this.game.add.image(0, 0, "atlas_ui", "heli_apache");
            }
            else if (_id == SurvivalInfoBox.ID_TURRETS) {
                descString = "Upgrade your base with automated turrets";
                icon = this.game.add.image(0, 0, "atlas_ui", "icon_turret");
            }
            if (icon) {
                this.add(icon);
                icon.scale.set(0.7, 0.7);
                icon.anchor.set(0.5, 0.5);
                icon.x = this.bg.width * 0.5;
                icon.y = (this.bg.height * 0.5) - 24;
            }
            var descText = this.game.add.text(0, 0, descString, { font: "12px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", wordWrap: true, wordWrapWidth: this.width * 0.96, align: "center" });
            descText.alpha = 0.5;
            descText.anchor.set(0.5, 1);
            descText.x = (this.width * 0.5);
            descText.y = (this.height);
            this.add(descText);
        };
        SurvivalInfoBox.ID_ARMORY = "ID_ARMORY";
        SurvivalInfoBox.ID_SOLDIERS = "ID_SOLDIERS";
        SurvivalInfoBox.ID_SUPPORT = "ID_SUPPORT";
        SurvivalInfoBox.ID_TURRETS = "ID_TURRETS";
        return SurvivalInfoBox;
    }(Phaser.Group));
    DinogenArena.SurvivalInfoBox = SurvivalInfoBox;
    var SurvivalInfo = /** @class */ (function (_super) {
        __extends(SurvivalInfo, _super);
        function SurvivalInfo() {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var infoText = _this.game.add.text(0, 0, "Survival Tips:", { font: "16px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            _this.add(infoText);
            var boxes = _this.game.add.group();
            boxes.y = infoText.height;
            var boxIds = [
                SurvivalInfoBox.ID_ARMORY,
                SurvivalInfoBox.ID_SOLDIERS,
                SurvivalInfoBox.ID_SUPPORT,
                SurvivalInfoBox.ID_TURRETS
            ];
            for (var i = 0; i < boxIds.length; i++) {
                var info = new SurvivalInfoBox(boxIds[i]);
                info.x = boxes.width + (i > 0 ? 4 : 0);
                boxes.add(info);
            }
            _this.add(boxes);
            infoText.setTextBounds(0, 0, _this.width, 32);
            return _this;
        }
        return SurvivalInfo;
    }(Phaser.Group));
    DinogenArena.SurvivalInfo = SurvivalInfo;
    var DinoStat = /** @class */ (function (_super) {
        __extends(DinoStat, _super);
        function DinoStat(_label, _val) {
            var _this = _super.call(this, DinogenArena.GameUtil.game) || this;
            var labelText = _this.game.add.text(0, 0, _label, { font: "11px " + DinogenArena.GameUtil.FONT, fill: "#FFFFFF", boundsAlignH: "center" });
            labelText.setTextBounds(0, 0, 60, 32);
            labelText.alpha = 0.5;
            _this.add(labelText);
            var gfx = _this.game.add.graphics();
            for (var i = 0; i < 3; i++) {
                var bActive = i <= (_val - 1);
                gfx.beginFill(0xFFFFFF, bActive ? 1 : 0.2);
                gfx.drawCircle(i * 12, 0, bActive ? 6 : 4);
            }
            gfx.x = labelText.x + labelText.textBounds.width + 2;
            gfx.y = (_this.height * 0.5) - (gfx.height * 0.5);
            _this.add(gfx);
            return _this;
        }
        Object.defineProperty(DinoStat.prototype, "width", {
            get: function () {
                return 150;
            },
            enumerable: true,
            configurable: true
        });
        return DinoStat;
    }(Phaser.Group));
    DinogenArena.DinoStat = DinoStat;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var WilkinConsole = /** @class */ (function (_super) {
        __extends(WilkinConsole, _super);
        function WilkinConsole() {
            return _super.call(this, DinogenArena.GameUtil.game) || this;
        }
        return WilkinConsole;
    }(Phaser.Group));
    DinogenArena.WilkinConsole = WilkinConsole;
})(DinogenArena || (DinogenArena = {}));
var DinogenArena;
(function (DinogenArena) {
    var WilkinUtil = /** @class */ (function () {
        function WilkinUtil() {
        }
        WilkinUtil.GenerateRandomNumber = function (_min, _max) {
            return DinogenArena.GameUtil.game.rnd.between(_min, _max);
        };
        WilkinUtil.GenerateRandomBoolean = function () {
            return Math.random() > 0.5;
        };
        WilkinUtil.GetDistance = function (_x1, _y1, _x2, _y2) {
            return Math.sqrt((_x1 - _x2) * (_x1 - _x2) + (_y1 - _y2) * (_y1 - _y2));
        };
        WilkinUtil.ConvertToTimeString = function (_seconds, _bAddMilliSeconds) {
            if (_bAddMilliSeconds === void 0) { _bAddMilliSeconds = false; }
            _seconds = Math.ceil(_seconds);
            var s = _seconds % 60;
            var ms = (_seconds % 1) * 100;
            var m = Math.floor((_seconds % 3600) / 60);
            var h = Math.floor(_seconds / (60 * 60));
            var hourStr = (h == 0) ? "" : doubleDigitFormat(h) + ":";
            var minuteStr = doubleDigitFormat(m) + ":";
            var secondsStr = doubleDigitFormat(s);
            var msStr = doubleDigitFormat(ms);
            function doubleDigitFormat(_num) {
                if (_num < 10) {
                    return ("0" + _num);
                }
                return String(_num);
            }
            return hourStr + minuteStr + secondsStr + (_bAddMilliSeconds ? ("." + msStr) : "");
        };
        WilkinUtil.GetOrdinalString = function (_num) {
            var str = _num.toString();
            var digit = str.charAt(str.length - 1);
            if (digit == "1") {
                return "st";
            }
            else if (digit == "2") {
                return "nd";
            }
            else if (digit == "3") {
                return "rd";
            }
            return "th";
        };
        WilkinUtil.ConvertToNumeral = function (num) {
            if (!+num)
                return NaN;
            var digits = String(+num).split(""), key = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM",
                "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC",
                "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"], roman = "", i = 3;
            while (i--)
                roman = (key[+digits.pop() + (i * 10)] || "") + roman;
            return Array(+digits.join("") + 1).join("M") + roman;
        };
        WilkinUtil.AddPlural = function (_val) {
            if (_val == 1) {
                return "";
            }
            return "s";
        };
        WilkinUtil.GetAngle = function (_x1, _y1, _x2, _y2) {
            var distX = _x2 - _x1;
            var distY = _y2 - _y1;
            return Math.atan2(distY, distX);
        };
        WilkinUtil.FormatNum = function (_num) {
            if (isNaN(_num)) {
                return "";
            }
            return _num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };
        WilkinUtil.CloneObject = function (_obj) {
            return JSON.parse(JSON.stringify(_obj));
        };
        WilkinUtil.TO_RADIANS = Math.PI / 180;
        WilkinUtil.TO_DEGREES = 180 / Math.PI;
        return WilkinUtil;
    }());
    DinogenArena.WilkinUtil = WilkinUtil;
})(DinogenArena || (DinogenArena = {}));
//# sourceMappingURL=DinogenArena.js.map